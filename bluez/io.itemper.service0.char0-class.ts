import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of io.itemper at /io/itemper/service0/char0
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg name="data" direction="out" type="s"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="GetMachineId">
      <arg direction="out" name="machine_uuid" type="s"/>
    </method>
    <method name="Ping"/>
  </interface>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg direction="in" type="s"/>
      <arg direction="in" type="s"/>
      <arg direction="out" type="v"/>
    </method>
    <method name="Set">
      <arg direction="in" type="s"/>
      <arg direction="in" type="s"/>
      <arg direction="in" type="v"/>
    </method>
    <method name="GetAll">
      <arg direction="in" type="s"/>
      <arg direction="out" type="a{sv}"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="s"/>
      <arg type="a{sv}"/>
      <arg type="as"/>
    </signal>
  </interface>
  <interface name="org.bluez.GattCharacteristic1">
    <property name="UUID" type="s" access="read"/>
    <property name="Service" type="o" access="read"/>
    <property name="Value" type="ay" access="read"/>
    <property name="Flags" type="as" access="read"/>
    <method name="ReadValue">
      <arg direction="out" type="ay"/>
    </method>
    <method name="WriteValue">
      <arg direction="in" type="ay"/>
    </method>
    <method name="StartNotify"/>
    <method name="StopNotify"/>
  </interface>
</node>`;

/**
 * Service: io.itemper
 * ObjectPath: /io/itemper/service0/char0
 * Interface: org.bluez.GattCharacteristic1
 */
export class OrgbluezGattCharacteristic1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.GattCharacteristic1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/io/itemper/service0/char0", xml: string = XMLObjectData): Promise<OrgbluezGattCharacteristic1> {
        return bus.getProxyObject('io.itemper', objectPath, xml).then((obj) => new OrgbluezGattCharacteristic1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.GattCharacteristic1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'UUID', signature: 's', access: ACCESS_READ })
    public UUID(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'UUID').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Service', signature: 'o', access: ACCESS_READ })
    public Service(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Service').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Value', signature: 'ay', access: ACCESS_READ })
    public Value(): Promise<Buffer> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Value').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Flags', signature: 'as', access: ACCESS_READ })
    public Flags(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Flags').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'ReadValue', inSignature: '', outSignature: 'ay' })
    public ReadValue(): Promise<Buffer> {
        return this.thisDBusInterface.ReadValue();
    }

    //@method({ name: 'WriteValue', inSignature: 'ay', outSignature: '' })
    public WriteValue(value: Buffer): Promise<void> {
        return this.thisDBusInterface.WriteValue(value);
    }

    //@method({ name: 'StartNotify', inSignature: '', outSignature: '' })
    public StartNotify(): Promise<void> {
        return this.thisDBusInterface.StartNotify();
    }

    //@method({ name: 'StopNotify', inSignature: '', outSignature: '' })
    public StopNotify(): Promise<void> {
        return this.thisDBusInterface.StopNotify();
    }

}



