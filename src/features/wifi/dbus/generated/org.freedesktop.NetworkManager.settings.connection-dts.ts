import * as DBus from 'dbus-next';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-dts.ts.hbs
 */

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings/1
 * Interface: org.freedesktop.DBus.Properties
 */
export interface OrgfreedesktopDBusProperties extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    Get(interface_name: string, property_name: string, ): Promise<DBus.Variant>;

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    GetAll(interface_name: string, ): Promise<{[key: string]: DBus.Variant}>;

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    Set(interface_name: string, property_name: string, value: DBus.Variant): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface_name: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings/1
 * Interface: org.freedesktop.DBus.Introspectable
 */
export interface OrgfreedesktopDBusIntrospectable extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    Introspect(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings/1
 * Interface: org.freedesktop.DBus.Peer
 */
export interface OrgfreedesktopDBusPeer extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Ping', inSignature: '', outSignature: '' })
    Ping(): Promise<void>;

    //@method({ name: 'GetMachineId', inSignature: '', outSignature: 's' })
    GetMachineId(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings/1
 * Interface: org.freedesktop.NetworkManager.Settings.Connection
 */
export interface SettingsConnection extends DBus.ClientInterface {

    /***** Properties *****/

    //@property({ name: 'Unsaved', signature: 'b', access: ACCESS_READ })
    Unsaved(): Promise<boolean>;

    //@property({ name: 'Flags', signature: 'u', access: ACCESS_READ })
    Flags(): Promise<number>;

    //@property({ name: 'Filename', signature: 's', access: ACCESS_READ })
    Filename(): Promise<string>;


    /***** Methods *****/

    //@method({ name: 'Update', inSignature: 'a{sa{sv}}', outSignature: '' })
    Update(properties: /* a{sa{sv}} */ {[key:string]: any}): Promise<void>;

    //@method({ name: 'UpdateUnsaved', inSignature: 'a{sa{sv}}', outSignature: '' })
    UpdateUnsaved(properties: /* a{sa{sv}} */ {[key:string]: any}): Promise<void>;

    //@method({ name: 'Delete', inSignature: '', outSignature: '' })
    Delete(): Promise<void>;

    //@method({ name: 'GetSettings', inSignature: '', outSignature: 'a{sa{sv}}' })
    GetSettings(): Promise</* a{sa{sv}} */ {[key:string]: any}>;

    //@method({ name: 'GetSecrets', inSignature: 's', outSignature: 'a{sa{sv}}' })
    GetSecrets(setting_name: string, ): Promise</* a{sa{sv}} */ {[key:string]: any}>;

    //@method({ name: 'ClearSecrets', inSignature: '', outSignature: '' })
    ClearSecrets(): Promise<void>;

    //@method({ name: 'Save', inSignature: '', outSignature: '' })
    Save(): Promise<void>;

    //@method({ name: 'Update2', inSignature: 'a{sa{sv}}ua{sv}', outSignature: 'a{sv}' })
    Update2(settings: /* a{sa{sv}} */ {[key:string]: any}, flags: number, args: {[key: string]: DBus.Variant}, ): Promise<{[key: string]: DBus.Variant}>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    //@signal({ name: 'Updated', signature: '' })
    on(evt: "Updated", cb: () => void): this;
    //@signal({ name: 'Removed', signature: '' })
    on(evt: "Removed", cb: () => void): this;
}

