import * as DBus from 'dbus-next';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-dts.ts.hbs
 */

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager
 * Interface: org.freedesktop.DBus.Properties
 */
export interface OrgfreedesktopDBusProperties extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    Get(interface_name: string, property_name: string, ): Promise<DBus.Variant>;

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    GetAll(interface_name: string, ): Promise<{[key: string]: DBus.Variant}>;

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    Set(interface_name: string, property_name: string, value: DBus.Variant): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface_name: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager
 * Interface: org.freedesktop.DBus.Introspectable
 */
export interface OrgfreedesktopDBusIntrospectable extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    Introspect(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager
 * Interface: org.freedesktop.DBus.Peer
 */
export interface OrgfreedesktopDBusPeer extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Ping', inSignature: '', outSignature: '' })
    Ping(): Promise<void>;

    //@method({ name: 'GetMachineId', inSignature: '', outSignature: 's' })
    GetMachineId(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager
 * Interface: org.freedesktop.NetworkManager
 */
export interface NetworkManager extends DBus.ClientInterface {

    /***** Properties *****/

    //@property({ name: 'Devices', signature: 'ao', access: ACCESS_READ })
    Devices(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'AllDevices', signature: 'ao', access: ACCESS_READ })
    AllDevices(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'Checkpoints', signature: 'ao', access: ACCESS_READ })
    Checkpoints(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'NetworkingEnabled', signature: 'b', access: ACCESS_READ })
    NetworkingEnabled(): Promise<boolean>;

    //@property({ name: 'WirelessEnabled', signature: 'b', access: ACCESS_READWRITE })
    WirelessEnabled(): Promise<boolean>;
    WirelessEnabled(value: boolean): Promise<void>;

    //@property({ name: 'WirelessHardwareEnabled', signature: 'b', access: ACCESS_READ })
    WirelessHardwareEnabled(): Promise<boolean>;

    //@property({ name: 'WwanEnabled', signature: 'b', access: ACCESS_READWRITE })
    WwanEnabled(): Promise<boolean>;
    WwanEnabled(value: boolean): Promise<void>;

    //@property({ name: 'WwanHardwareEnabled', signature: 'b', access: ACCESS_READ })
    WwanHardwareEnabled(): Promise<boolean>;

    //@property({ name: 'WimaxEnabled', signature: 'b', access: ACCESS_READWRITE })
    WimaxEnabled(): Promise<boolean>;
    WimaxEnabled(value: boolean): Promise<void>;

    //@property({ name: 'WimaxHardwareEnabled', signature: 'b', access: ACCESS_READ })
    WimaxHardwareEnabled(): Promise<boolean>;

    //@property({ name: 'ActiveConnections', signature: 'ao', access: ACCESS_READ })
    ActiveConnections(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'PrimaryConnection', signature: 'o', access: ACCESS_READ })
    PrimaryConnection(): Promise<DBus.ObjectPath>;

    //@property({ name: 'PrimaryConnectionType', signature: 's', access: ACCESS_READ })
    PrimaryConnectionType(): Promise<string>;

    //@property({ name: 'Metered', signature: 'u', access: ACCESS_READ })
    Metered(): Promise<number>;

    //@property({ name: 'ActivatingConnection', signature: 'o', access: ACCESS_READ })
    ActivatingConnection(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Startup', signature: 'b', access: ACCESS_READ })
    Startup(): Promise<boolean>;

    //@property({ name: 'Version', signature: 's', access: ACCESS_READ })
    Version(): Promise<string>;

    //@property({ name: 'Capabilities', signature: 'au', access: ACCESS_READ })
    Capabilities(): Promise<Array<number>>;

    //@property({ name: 'State', signature: 'u', access: ACCESS_READ })
    State(): Promise<number>;

    //@property({ name: 'Connectivity', signature: 'u', access: ACCESS_READ })
    Connectivity(): Promise<number>;

    //@property({ name: 'ConnectivityCheckAvailable', signature: 'b', access: ACCESS_READ })
    ConnectivityCheckAvailable(): Promise<boolean>;

    //@property({ name: 'ConnectivityCheckEnabled', signature: 'b', access: ACCESS_READWRITE })
    ConnectivityCheckEnabled(): Promise<boolean>;
    ConnectivityCheckEnabled(value: boolean): Promise<void>;

    //@property({ name: 'ConnectivityCheckUri', signature: 's', access: ACCESS_READ })
    ConnectivityCheckUri(): Promise<string>;

    //@property({ name: 'GlobalDnsConfiguration', signature: 'a{sv}', access: ACCESS_READWRITE })
    GlobalDnsConfiguration(): Promise<{[key: string]: DBus.Variant}>;
    GlobalDnsConfiguration(value: {[key: string]: DBus.Variant}): Promise<void>;


    /***** Methods *****/

    //@method({ name: 'Reload', inSignature: 'u', outSignature: '' })
    Reload(flags: number): Promise<void>;

    //@method({ name: 'GetDevices', inSignature: '', outSignature: 'ao' })
    GetDevices(): Promise<Array<DBus.ObjectPath>>;

    //@method({ name: 'GetAllDevices', inSignature: '', outSignature: 'ao' })
    GetAllDevices(): Promise<Array<DBus.ObjectPath>>;

    //@method({ name: 'GetDeviceByIpIface', inSignature: 's', outSignature: 'o' })
    GetDeviceByIpIface(iface: string, ): Promise<DBus.ObjectPath>;

    //@method({ name: 'ActivateConnection', inSignature: 'ooo', outSignature: 'o' })
    ActivateConnection(connection: DBus.ObjectPath, device: DBus.ObjectPath, specific_object: DBus.ObjectPath, ): Promise<DBus.ObjectPath>;

    //@method({ name: 'AddAndActivateConnection', inSignature: 'a{sa{sv}}oo', outSignature: 'oo' })
    AddAndActivateConnection(connection: /* a{sa{sv}} */ {[key:string]: any}, device: DBus.ObjectPath, specific_object: DBus.ObjectPath, ): Promise<any>;

    //@method({ name: 'AddAndActivateConnection2', inSignature: 'a{sa{sv}}ooa{sv}', outSignature: 'ooa{sv}' })
    AddAndActivateConnection2(connection: /* a{sa{sv}} */ {[key:string]: any}, device: DBus.ObjectPath, specific_object: DBus.ObjectPath, options: {[key: string]: DBus.Variant}, ): Promise<any>;

    //@method({ name: 'DeactivateConnection', inSignature: 'o', outSignature: '' })
    DeactivateConnection(active_connection: DBus.ObjectPath): Promise<void>;

    //@method({ name: 'Sleep', inSignature: 'b', outSignature: '' })
    Sleep(sleep: boolean): Promise<void>;

    //@method({ name: 'Enable', inSignature: 'b', outSignature: '' })
    Enable(enable: boolean): Promise<void>;

    //@method({ name: 'GetPermissions', inSignature: '', outSignature: 'a{ss}' })
    GetPermissions(): Promise<{[key: string]: string}>;

    //@method({ name: 'SetLogging', inSignature: 'ss', outSignature: '' })
    SetLogging(level: string, domains: string): Promise<void>;

    //@method({ name: 'GetLogging', inSignature: '', outSignature: 'ss' })
    GetLogging(): Promise<any>;

    //@method({ name: 'CheckConnectivity', inSignature: '', outSignature: 'u' })
    CheckConnectivity(): Promise<number>;

    //@method({ name: 'state', inSignature: '', outSignature: 'u' })
    state(): Promise<number>;

    //@method({ name: 'CheckpointCreate', inSignature: 'aouu', outSignature: 'o' })
    CheckpointCreate(devices: Array<DBus.ObjectPath>, rollback_timeout: number, flags: number, ): Promise<DBus.ObjectPath>;

    //@method({ name: 'CheckpointDestroy', inSignature: 'o', outSignature: '' })
    CheckpointDestroy(checkpoint: DBus.ObjectPath): Promise<void>;

    //@method({ name: 'CheckpointRollback', inSignature: 'o', outSignature: 'a{su}' })
    CheckpointRollback(checkpoint: DBus.ObjectPath, ): Promise<{[key: string]: number}>;

    //@method({ name: 'CheckpointAdjustRollbackTimeout', inSignature: 'ou', outSignature: '' })
    CheckpointAdjustRollbackTimeout(checkpoint: DBus.ObjectPath, add_timeout: number): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    //@signal({ name: 'CheckPermissions', signature: '' })
    on(evt: "CheckPermissions", cb: () => void): this;
    //@signal({ name: 'StateChanged', signature: 'u' })
    on(evt: "StateChanged", cb: (state: number) => void): this;
    //@signal({ name: 'DeviceAdded', signature: 'o' })
    on(evt: "DeviceAdded", cb: (device_path: DBus.ObjectPath) => void): this;
    //@signal({ name: 'DeviceRemoved', signature: 'o' })
    on(evt: "DeviceRemoved", cb: (device_path: DBus.ObjectPath) => void): this;
}

