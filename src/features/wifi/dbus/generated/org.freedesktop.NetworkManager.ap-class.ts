import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of org.freedesktop.NetworkManager at /org/freedesktop/NetworkManager/Devices/AccessPoint
const XMLObjectData = `<?xml version="1.0" encoding="UTF-8"?>
<node name="/">
  <!--
      org.freedesktop.NetworkManager.AccessPoint:
      @short_description: Wi-Fi Access Point

  -->
  <interface name="org.freedesktop.NetworkManager.AccessPoint">

    <!--
        Flags:

        Flags describing the capabilities of the access point.

        Returns: <link linkend="NM80211ApFlags">NM80211ApFlags</link>
    -->
    <property name="Flags" type="u" access="read"/>

    <!--
        WpaFlags:

        Flags describing the access point's capabilities according to WPA (Wifi
        Protected Access).

        Returns: <link linkend="NM80211ApSecurityFlags">NM80211ApSecurityFlags</link>
    -->
    <property name="WpaFlags" type="u" access="read"/>

    <!--
        RsnFlags:

        Flags describing the access point's capabilities according to the RSN
        (Robust Secure Network) protocol.

        Returns: <link linkend="NM80211ApSecurityFlags">NM80211ApSecurityFlags</link>
    -->
    <property name="RsnFlags" type="u" access="read"/>

    <!--
        Ssid:

        The Service Set Identifier identifying the access point.
    -->
    <property name="Ssid" type="ay" access="read">
      <!-- gdbus-codegen assumes that "ay" means "non-UTF-8 string" and
           won't deal with '\0' bytes correctly.
      -->
      <annotation name="org.gtk.GDBus.C.ForceGVariant" value="1"/>
    </property>

    <!--
        Frequency:

        The radio channel frequency in use by the access point, in MHz.
    -->
    <property name="Frequency" type="u" access="read"/>

    <!--
        HwAddress:

        The hardware address (BSSID) of the access point.
    -->
    <property name="HwAddress" type="s" access="read"/>

    <!--
        Mode:

        Describes the operating mode of the access point.

        Returns: <link linkend="NM80211Mode">NM80211Mode</link>
    -->
    <property name="Mode" type="u" access="read"/>

    <!--
        MaxBitrate:

        The maximum bitrate this access point is capable of, in kilobits/second
        (Kb/s).
    -->
    <property name="MaxBitrate" type="u" access="read"/>

    <!--
        Strength:

        The current signal quality of the access point, in percent.
    -->
    <property name="Strength" type="y" access="read"/>

    <!--
        LastSeen:

        The timestamp (in CLOCK_BOOTTIME seconds) for the last time the access
        point was found in scan results. A value of -1 means the access point has
        never been found in scan results.
    -->
    <property name="LastSeen" type="i" access="read"/>

  </interface>
</node>`;

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/AccessPoint
 * Interface: org.freedesktop.NetworkManager.AccessPoint
 */
export class AccessPoint extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.AccessPoint';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/AccessPoint", xml: string = XMLObjectData): Promise<AccessPoint> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new AccessPoint(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.AccessPoint');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Flags', signature: 'u', access: ACCESS_READ })
    public Flags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Flags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'WpaFlags', signature: 'u', access: ACCESS_READ })
    public WpaFlags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'WpaFlags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'RsnFlags', signature: 'u', access: ACCESS_READ })
    public RsnFlags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'RsnFlags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ssid', signature: 'ay', access: ACCESS_READ })
    public Ssid(): Promise<Buffer> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ssid').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Frequency', signature: 'u', access: ACCESS_READ })
    public Frequency(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Frequency').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    public HwAddress(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'HwAddress').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Mode', signature: 'u', access: ACCESS_READ })
    public Mode(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Mode').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'MaxBitrate', signature: 'u', access: ACCESS_READ })
    public MaxBitrate(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'MaxBitrate').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Strength', signature: 'y', access: ACCESS_READ })
    public Strength(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Strength').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'LastSeen', signature: 'i', access: ACCESS_READ })
    public LastSeen(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LastSeen').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

}


