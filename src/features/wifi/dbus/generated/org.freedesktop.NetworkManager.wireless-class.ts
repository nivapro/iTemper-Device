import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of org.freedesktop.NetworkManager at /org/freedesktop/NetworkManager/Devices/3
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
                      "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<!-- GDBus 2.66.8 -->
<node>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="out"/>
    </method>
    <method name="GetAll">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="a{sv}" name="properties" direction="out"/>
    </method>
    <method name="Set">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="in"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="s" name="interface_name"/>
      <arg type="a{sv}" name="changed_properties"/>
      <arg type="as" name="invalidated_properties"/>
    </signal>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" name="xml_data" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping"/>
    <method name="GetMachineId">
      <arg type="s" name="machine_uuid" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.NetworkManager.Device.Statistics">
    <signal name="PropertiesChanged">
      <arg type="a{sv}" name="properties"/>
    </signal>
    <property type="u" name="RefreshRateMs" access="readwrite"/>
    <property type="t" name="TxBytes" access="read"/>
    <property type="t" name="RxBytes" access="read"/>
  </interface>
  <interface name="org.freedesktop.NetworkManager.Device.Wireless">
    <method name="GetAccessPoints">
      <arg type="ao" name="access_points" direction="out"/>
    </method>
    <method name="GetAllAccessPoints">
      <arg type="ao" name="access_points" direction="out"/>
    </method>
    <method name="RequestScan">
      <arg type="a{sv}" name="options" direction="in"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="a{sv}" name="properties"/>
    </signal>
    <signal name="AccessPointAdded">
      <arg type="o" name="access_point"/>
    </signal>
    <signal name="AccessPointRemoved">
      <arg type="o" name="access_point"/>
    </signal>
    <property type="s" name="HwAddress" access="read"/>
    <property type="s" name="PermHwAddress" access="read"/>
    <property type="u" name="Mode" access="read"/>
    <property type="u" name="Bitrate" access="read"/>
    <property type="ao" name="AccessPoints" access="read"/>
    <property type="o" name="ActiveAccessPoint" access="read"/>
    <property type="u" name="WirelessCapabilities" access="read"/>
    <property type="x" name="LastScan" access="read"/>
  </interface>
  <interface name="org.freedesktop.NetworkManager.Device">
    <method name="Reapply">
      <arg type="a{sa{sv}}" name="connection" direction="in"/>
      <arg type="t" name="version_id" direction="in"/>
      <arg type="u" name="flags" direction="in"/>
    </method>
    <method name="GetAppliedConnection">
      <arg type="u" name="flags" direction="in"/>
      <arg type="a{sa{sv}}" name="connection" direction="out"/>
      <arg type="t" name="version_id" direction="out"/>
    </method>
    <method name="Disconnect"/>
    <method name="Delete"/>
    <signal name="StateChanged">
      <arg type="u" name="new_state"/>
      <arg type="u" name="old_state"/>
      <arg type="u" name="reason"/>
    </signal>
    <property type="s" name="Udi" access="read"/>
    <property type="s" name="Path" access="read"/>
    <property type="s" name="Interface" access="read"/>
    <property type="s" name="IpInterface" access="read"/>
    <property type="s" name="Driver" access="read"/>
    <property type="s" name="DriverVersion" access="read"/>
    <property type="s" name="FirmwareVersion" access="read"/>
    <property type="u" name="Capabilities" access="read"/>
    <property type="u" name="Ip4Address" access="read"/>
    <property type="u" name="State" access="read"/>
    <property type="(uu)" name="StateReason" access="read"/>
    <property type="o" name="ActiveConnection" access="read"/>
    <property type="o" name="Ip4Config" access="read"/>
    <property type="o" name="Dhcp4Config" access="read"/>
    <property type="o" name="Ip6Config" access="read"/>
    <property type="o" name="Dhcp6Config" access="read"/>
    <property type="b" name="Managed" access="readwrite"/>
    <property type="b" name="Autoconnect" access="readwrite"/>
    <property type="b" name="FirmwareMissing" access="read"/>
    <property type="b" name="NmPluginMissing" access="read"/>
    <property type="u" name="DeviceType" access="read"/>
    <property type="ao" name="AvailableConnections" access="read"/>
    <property type="s" name="PhysicalPortId" access="read"/>
    <property type="u" name="Mtu" access="read"/>
    <property type="u" name="Metered" access="read"/>
    <property type="aa{sv}" name="LldpNeighbors" access="read"/>
    <property type="b" name="Real" access="read"/>
    <property type="u" name="Ip4Connectivity" access="read"/>
    <property type="u" name="Ip6Connectivity" access="read"/>
    <property type="u" name="InterfaceFlags" access="read"/>
    <property type="s" name="HwAddress" access="read"/>
  </interface>
</node>
`;

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Properties
 */
export class OrgfreedesktopDBusProperties extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Properties';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusProperties> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusProperties(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    public Get(interface_name: string, property_name: string, ): Promise<DBus.Variant> {
        return this.thisDBusInterface.Get(interface_name, property_name, );
    }

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    public GetAll(interface_name: string, ): Promise<{[key: string]: DBus.Variant}> {
        return this.thisDBusInterface.GetAll(interface_name, );
    }

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    public Set(interface_name: string, property_name: string, value: DBus.Variant): Promise<void> {
        return this.thisDBusInterface.Set(interface_name, property_name, value);
    }

}
/***** Signals for org.freedesktop.DBus.Properties *****/
export declare interface OrgfreedesktopDBusProperties {
    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface_name: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
    
    on(event: string, listener: Function): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Introspectable
 */
export class OrgfreedesktopDBusIntrospectable extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Introspectable';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusIntrospectable> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusIntrospectable(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Introspectable');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    public Introspect(): Promise<string> {
        return this.thisDBusInterface.Introspect();
    }

}


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Peer
 */
export class OrgfreedesktopDBusPeer extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Peer';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusPeer> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusPeer(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Peer');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Ping', inSignature: '', outSignature: '' })
    public Ping(): Promise<void> {
        return this.thisDBusInterface.Ping();
    }

    //@method({ name: 'GetMachineId', inSignature: '', outSignature: 's' })
    public GetMachineId(): Promise<string> {
        return this.thisDBusInterface.GetMachineId();
    }

}


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device.Statistics
 */
export class DeviceStatistics extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Device.Statistics';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<DeviceStatistics> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new DeviceStatistics(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Device.Statistics');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'RefreshRateMs', signature: 'u', access: ACCESS_READWRITE })
    public RefreshRateMs(): Promise<number>;
    public RefreshRateMs(value: number): Promise<void>;
    public RefreshRateMs(value?: number): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'RefreshRateMs', new DBus.Variant("u", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'RefreshRateMs').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'TxBytes', signature: 't', access: ACCESS_READ })
    public TxBytes(): Promise<BigInt> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'TxBytes').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'RxBytes', signature: 't', access: ACCESS_READ })
    public RxBytes(): Promise<BigInt> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'RxBytes').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

}
/***** Signals for org.freedesktop.NetworkManager.Device.Statistics *****/
export declare interface DeviceStatistics {
    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device.Wireless
 */
export class DeviceWireless extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Device.Wireless';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<DeviceWireless> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new DeviceWireless(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Device.Wireless');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    public HwAddress(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'HwAddress').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'PermHwAddress', signature: 's', access: ACCESS_READ })
    public PermHwAddress(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'PermHwAddress').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Mode', signature: 'u', access: ACCESS_READ })
    public Mode(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Mode').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Bitrate', signature: 'u', access: ACCESS_READ })
    public Bitrate(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Bitrate').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'AccessPoints', signature: 'ao', access: ACCESS_READ })
    public AccessPoints(): Promise<Array<DBus.ObjectPath>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AccessPoints').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'ActiveAccessPoint', signature: 'o', access: ACCESS_READ })
    public ActiveAccessPoint(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ActiveAccessPoint').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'WirelessCapabilities', signature: 'u', access: ACCESS_READ })
    public WirelessCapabilities(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'WirelessCapabilities').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'LastScan', signature: 'x', access: ACCESS_READ })
    public LastScan(): Promise<BigInt> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LastScan').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'GetAccessPoints', inSignature: '', outSignature: 'ao' })
    public GetAccessPoints(): Promise<Array<DBus.ObjectPath>> {
        return this.thisDBusInterface.GetAccessPoints();
    }

    //@method({ name: 'GetAllAccessPoints', inSignature: '', outSignature: 'ao' })
    public GetAllAccessPoints(): Promise<Array<DBus.ObjectPath>> {
        return this.thisDBusInterface.GetAllAccessPoints();
    }

    //@method({ name: 'RequestScan', inSignature: 'a{sv}', outSignature: '' })
    public RequestScan(options: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RequestScan(options);
    }

}
/***** Signals for org.freedesktop.NetworkManager.Device.Wireless *****/
export declare interface DeviceWireless {
    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    //@signal({ name: 'AccessPointAdded', signature: 'o' })
    on(evt: "AccessPointAdded", cb: (access_point: DBus.ObjectPath) => void): this;
    //@signal({ name: 'AccessPointRemoved', signature: 'o' })
    on(evt: "AccessPointRemoved", cb: (access_point: DBus.ObjectPath) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device
 */
export class Device extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Device';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Devices/3", xml: string = XMLObjectData): Promise<Device> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new Device(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Device');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Udi', signature: 's', access: ACCESS_READ })
    public Udi(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Udi').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Path', signature: 's', access: ACCESS_READ })
    public Path(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Path').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Interface', signature: 's', access: ACCESS_READ })
    public Interface(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Interface').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'IpInterface', signature: 's', access: ACCESS_READ })
    public IpInterface(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'IpInterface').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Driver', signature: 's', access: ACCESS_READ })
    public Driver(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Driver').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'DriverVersion', signature: 's', access: ACCESS_READ })
    public DriverVersion(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DriverVersion').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'FirmwareVersion', signature: 's', access: ACCESS_READ })
    public FirmwareVersion(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'FirmwareVersion').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Capabilities', signature: 'u', access: ACCESS_READ })
    public Capabilities(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Capabilities').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip4Address', signature: 'u', access: ACCESS_READ })
    public Ip4Address(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip4Address').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'State', signature: 'u', access: ACCESS_READ })
    public State(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'State').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'StateReason', signature: '(uu)', access: ACCESS_READ })
    public StateReason(): Promise</* (uu) */ any[]> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'StateReason').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'ActiveConnection', signature: 'o', access: ACCESS_READ })
    public ActiveConnection(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ActiveConnection').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip4Config', signature: 'o', access: ACCESS_READ })
    public Ip4Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip4Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Dhcp4Config', signature: 'o', access: ACCESS_READ })
    public Dhcp4Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Dhcp4Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip6Config', signature: 'o', access: ACCESS_READ })
    public Ip6Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip6Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Dhcp6Config', signature: 'o', access: ACCESS_READ })
    public Dhcp6Config(): Promise<DBus.ObjectPath> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Dhcp6Config').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Managed', signature: 'b', access: ACCESS_READWRITE })
    public Managed(): Promise<boolean>;
    public Managed(value: boolean): Promise<void>;
    public Managed(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Managed', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Managed').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Autoconnect', signature: 'b', access: ACCESS_READWRITE })
    public Autoconnect(): Promise<boolean>;
    public Autoconnect(value: boolean): Promise<void>;
    public Autoconnect(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Autoconnect', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Autoconnect').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'FirmwareMissing', signature: 'b', access: ACCESS_READ })
    public FirmwareMissing(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'FirmwareMissing').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'NmPluginMissing', signature: 'b', access: ACCESS_READ })
    public NmPluginMissing(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'NmPluginMissing').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'DeviceType', signature: 'u', access: ACCESS_READ })
    public DeviceType(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DeviceType').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'AvailableConnections', signature: 'ao', access: ACCESS_READ })
    public AvailableConnections(): Promise<Array<DBus.ObjectPath>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AvailableConnections').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'PhysicalPortId', signature: 's', access: ACCESS_READ })
    public PhysicalPortId(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'PhysicalPortId').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Mtu', signature: 'u', access: ACCESS_READ })
    public Mtu(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Mtu').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Metered', signature: 'u', access: ACCESS_READ })
    public Metered(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Metered').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'LldpNeighbors', signature: 'aa{sv}', access: ACCESS_READ })
    public LldpNeighbors(): Promise<Array<{[key: string]: DBus.Variant}>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'LldpNeighbors').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Real', signature: 'b', access: ACCESS_READ })
    public Real(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Real').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip4Connectivity', signature: 'u', access: ACCESS_READ })
    public Ip4Connectivity(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip4Connectivity').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Ip6Connectivity', signature: 'u', access: ACCESS_READ })
    public Ip6Connectivity(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Ip6Connectivity').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'InterfaceFlags', signature: 'u', access: ACCESS_READ })
    public InterfaceFlags(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'InterfaceFlags').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    public HwAddress(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'HwAddress').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'Reapply', inSignature: 'a{sa{sv}}tu', outSignature: '' })
    public Reapply(connection: /* a{sa{sv}} */ {[key:string]: any}, version_id: BigInt, flags: number): Promise<void> {
        return this.thisDBusInterface.Reapply(connection, version_id, flags);
    }

    //@method({ name: 'GetAppliedConnection', inSignature: 'u', outSignature: 'a{sa{sv}}t' })
    public GetAppliedConnection(flags: number, ): Promise<any> {
        return this.thisDBusInterface.GetAppliedConnection(flags, );
    }

    //@method({ name: 'Disconnect', inSignature: '', outSignature: '' })
    public Disconnect(): Promise<void> {
        return this.thisDBusInterface.Disconnect();
    }

    //@method({ name: 'Delete', inSignature: '', outSignature: '' })
    public Delete(): Promise<void> {
        return this.thisDBusInterface.Delete();
    }

}
/***** Signals for org.freedesktop.NetworkManager.Device *****/
export declare interface Device {
    //@signal({ name: 'StateChanged', signature: 'uuu' })
    on(evt: "StateChanged", cb: (new_state: number, old_state: number, reason: number) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

