import * as DBus from 'dbus-next';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-dts.ts.hbs
 */

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Properties
 */
export interface OrgfreedesktopDBusProperties extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    Get(interface_name: string, property_name: string, ): Promise<DBus.Variant>;

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    GetAll(interface_name: string, ): Promise<{[key: string]: DBus.Variant}>;

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    Set(interface_name: string, property_name: string, value: DBus.Variant): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface_name: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Introspectable
 */
export interface OrgfreedesktopDBusIntrospectable extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    Introspect(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.DBus.Peer
 */
export interface OrgfreedesktopDBusPeer extends DBus.ClientInterface {

    /***** Properties *****/


    /***** Methods *****/

    //@method({ name: 'Ping', inSignature: '', outSignature: '' })
    Ping(): Promise<void>;

    //@method({ name: 'GetMachineId', inSignature: '', outSignature: 's' })
    GetMachineId(): Promise<string>;


    /***** Signals *****/

}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device.Statistics
 */
export interface DeviceStatistics extends DBus.ClientInterface {

    /***** Properties *****/

    //@property({ name: 'RefreshRateMs', signature: 'u', access: ACCESS_READWRITE })
    RefreshRateMs(): Promise<number>;
    RefreshRateMs(value: number): Promise<void>;

    //@property({ name: 'TxBytes', signature: 't', access: ACCESS_READ })
    TxBytes(): Promise<BigInt>;

    //@property({ name: 'RxBytes', signature: 't', access: ACCESS_READ })
    RxBytes(): Promise<BigInt>;


    /***** Methods *****/


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device.Wireless
 */
export interface DeviceWireless extends DBus.ClientInterface {

    /***** Properties *****/

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    HwAddress(): Promise<string>;

    //@property({ name: 'PermHwAddress', signature: 's', access: ACCESS_READ })
    PermHwAddress(): Promise<string>;

    //@property({ name: 'Mode', signature: 'u', access: ACCESS_READ })
    Mode(): Promise<number>;

    //@property({ name: 'Bitrate', signature: 'u', access: ACCESS_READ })
    Bitrate(): Promise<number>;

    //@property({ name: 'AccessPoints', signature: 'ao', access: ACCESS_READ })
    AccessPoints(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'ActiveAccessPoint', signature: 'o', access: ACCESS_READ })
    ActiveAccessPoint(): Promise<DBus.ObjectPath>;

    //@property({ name: 'WirelessCapabilities', signature: 'u', access: ACCESS_READ })
    WirelessCapabilities(): Promise<number>;

    //@property({ name: 'LastScan', signature: 'x', access: ACCESS_READ })
    LastScan(): Promise<BigInt>;


    /***** Methods *****/

    //@method({ name: 'GetAccessPoints', inSignature: '', outSignature: 'ao' })
    GetAccessPoints(): Promise<Array<DBus.ObjectPath>>;

    //@method({ name: 'GetAllAccessPoints', inSignature: '', outSignature: 'ao' })
    GetAllAccessPoints(): Promise<Array<DBus.ObjectPath>>;

    //@method({ name: 'RequestScan', inSignature: 'a{sv}', outSignature: '' })
    RequestScan(options: {[key: string]: DBus.Variant}): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    //@signal({ name: 'AccessPointAdded', signature: 'o' })
    on(evt: "AccessPointAdded", cb: (access_point: DBus.ObjectPath) => void): this;
    //@signal({ name: 'AccessPointRemoved', signature: 'o' })
    on(evt: "AccessPointRemoved", cb: (access_point: DBus.ObjectPath) => void): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Devices/3
 * Interface: org.freedesktop.NetworkManager.Device
 */
export interface Device extends DBus.ClientInterface {

    /***** Properties *****/

    //@property({ name: 'Udi', signature: 's', access: ACCESS_READ })
    Udi(): Promise<string>;

    //@property({ name: 'Path', signature: 's', access: ACCESS_READ })
    Path(): Promise<string>;

    //@property({ name: 'Interface', signature: 's', access: ACCESS_READ })
    Interface(): Promise<string>;

    //@property({ name: 'IpInterface', signature: 's', access: ACCESS_READ })
    IpInterface(): Promise<string>;

    //@property({ name: 'Driver', signature: 's', access: ACCESS_READ })
    Driver(): Promise<string>;

    //@property({ name: 'DriverVersion', signature: 's', access: ACCESS_READ })
    DriverVersion(): Promise<string>;

    //@property({ name: 'FirmwareVersion', signature: 's', access: ACCESS_READ })
    FirmwareVersion(): Promise<string>;

    //@property({ name: 'Capabilities', signature: 'u', access: ACCESS_READ })
    Capabilities(): Promise<number>;

    //@property({ name: 'Ip4Address', signature: 'u', access: ACCESS_READ })
    Ip4Address(): Promise<number>;

    //@property({ name: 'State', signature: 'u', access: ACCESS_READ })
    State(): Promise<number>;

    //@property({ name: 'StateReason', signature: '(uu)', access: ACCESS_READ })
    StateReason(): Promise</* (uu) */ any[]>;

    //@property({ name: 'ActiveConnection', signature: 'o', access: ACCESS_READ })
    ActiveConnection(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Ip4Config', signature: 'o', access: ACCESS_READ })
    Ip4Config(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Dhcp4Config', signature: 'o', access: ACCESS_READ })
    Dhcp4Config(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Ip6Config', signature: 'o', access: ACCESS_READ })
    Ip6Config(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Dhcp6Config', signature: 'o', access: ACCESS_READ })
    Dhcp6Config(): Promise<DBus.ObjectPath>;

    //@property({ name: 'Managed', signature: 'b', access: ACCESS_READWRITE })
    Managed(): Promise<boolean>;
    Managed(value: boolean): Promise<void>;

    //@property({ name: 'Autoconnect', signature: 'b', access: ACCESS_READWRITE })
    Autoconnect(): Promise<boolean>;
    Autoconnect(value: boolean): Promise<void>;

    //@property({ name: 'FirmwareMissing', signature: 'b', access: ACCESS_READ })
    FirmwareMissing(): Promise<boolean>;

    //@property({ name: 'NmPluginMissing', signature: 'b', access: ACCESS_READ })
    NmPluginMissing(): Promise<boolean>;

    //@property({ name: 'DeviceType', signature: 'u', access: ACCESS_READ })
    DeviceType(): Promise<number>;

    //@property({ name: 'AvailableConnections', signature: 'ao', access: ACCESS_READ })
    AvailableConnections(): Promise<Array<DBus.ObjectPath>>;

    //@property({ name: 'PhysicalPortId', signature: 's', access: ACCESS_READ })
    PhysicalPortId(): Promise<string>;

    //@property({ name: 'Mtu', signature: 'u', access: ACCESS_READ })
    Mtu(): Promise<number>;

    //@property({ name: 'Metered', signature: 'u', access: ACCESS_READ })
    Metered(): Promise<number>;

    //@property({ name: 'LldpNeighbors', signature: 'aa{sv}', access: ACCESS_READ })
    LldpNeighbors(): Promise<Array<{[key: string]: DBus.Variant}>>;

    //@property({ name: 'Real', signature: 'b', access: ACCESS_READ })
    Real(): Promise<boolean>;

    //@property({ name: 'Ip4Connectivity', signature: 'u', access: ACCESS_READ })
    Ip4Connectivity(): Promise<number>;

    //@property({ name: 'Ip6Connectivity', signature: 'u', access: ACCESS_READ })
    Ip6Connectivity(): Promise<number>;

    //@property({ name: 'InterfaceFlags', signature: 'u', access: ACCESS_READ })
    InterfaceFlags(): Promise<number>;

    //@property({ name: 'HwAddress', signature: 's', access: ACCESS_READ })
    HwAddress(): Promise<string>;


    /***** Methods *****/

    //@method({ name: 'Reapply', inSignature: 'a{sa{sv}}tu', outSignature: '' })
    Reapply(connection: /* a{sa{sv}} */ {[key:string]: any}, version_id: BigInt, flags: number): Promise<void>;

    //@method({ name: 'GetAppliedConnection', inSignature: 'u', outSignature: 'a{sa{sv}}t' })
    GetAppliedConnection(flags: number, ): Promise<any>;

    //@method({ name: 'Disconnect', inSignature: '', outSignature: '' })
    Disconnect(): Promise<void>;

    //@method({ name: 'Delete', inSignature: '', outSignature: '' })
    Delete(): Promise<void>;


    /***** Signals *****/

    //@signal({ name: 'StateChanged', signature: 'uuu' })
    on(evt: "StateChanged", cb: (new_state: number, old_state: number, reason: number) => void): this;
}

