import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of org.freedesktop.NetworkManager at /org/freedesktop/NetworkManager/Settings
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
                      "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<!-- GDBus 2.66.8 -->
<node>
  <interface name="org.freedesktop.DBus.Properties">
    <method name="Get">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="out"/>
    </method>
    <method name="GetAll">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="a{sv}" name="properties" direction="out"/>
    </method>
    <method name="Set">
      <arg type="s" name="interface_name" direction="in"/>
      <arg type="s" name="property_name" direction="in"/>
      <arg type="v" name="value" direction="in"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="s" name="interface_name"/>
      <arg type="a{sv}" name="changed_properties"/>
      <arg type="as" name="invalidated_properties"/>
    </signal>
  </interface>
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg type="s" name="xml_data" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.DBus.Peer">
    <method name="Ping"/>
    <method name="GetMachineId">
      <arg type="s" name="machine_uuid" direction="out"/>
    </method>
  </interface>
  <interface name="org.freedesktop.NetworkManager.Settings">
    <method name="ListConnections">
      <arg type="ao" name="connections" direction="out"/>
    </method>
    <method name="GetConnectionByUuid">
      <arg type="s" name="uuid" direction="in"/>
      <arg type="o" name="connection" direction="out"/>
    </method>
    <method name="AddConnection">
      <arg type="a{sa{sv}}" name="connection" direction="in"/>
      <arg type="o" name="path" direction="out"/>
    </method>
    <method name="AddConnectionUnsaved">
      <arg type="a{sa{sv}}" name="connection" direction="in"/>
      <arg type="o" name="path" direction="out"/>
    </method>
    <method name="AddConnection2">
      <arg type="a{sa{sv}}" name="settings" direction="in"/>
      <arg type="u" name="flags" direction="in"/>
      <arg type="a{sv}" name="args" direction="in"/>
      <arg type="o" name="path" direction="out"/>
      <arg type="a{sv}" name="result" direction="out"/>
    </method>
    <method name="LoadConnections">
      <arg type="as" name="filenames" direction="in"/>
      <arg type="b" name="status" direction="out"/>
      <arg type="as" name="failures" direction="out"/>
    </method>
    <method name="ReloadConnections">
      <arg type="b" name="status" direction="out"/>
    </method>
    <method name="SaveHostname">
      <arg type="s" name="hostname" direction="in"/>
    </method>
    <signal name="PropertiesChanged">
      <arg type="a{sv}" name="properties"/>
    </signal>
    <signal name="NewConnection">
      <arg type="o" name="connection"/>
    </signal>
    <signal name="ConnectionRemoved">
      <arg type="o" name="connection"/>
    </signal>
    <property type="ao" name="Connections" access="read"/>
    <property type="s" name="Hostname" access="read"/>
    <property type="b" name="CanModify" access="read"/>
  </interface>
  <node name="5"/>
  <node name="1"/>
  <node name="4"/>
</node>
`;

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings
 * Interface: org.freedesktop.DBus.Properties
 */
export class OrgfreedesktopDBusProperties extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Properties';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Settings", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusProperties> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusProperties(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    public Get(interface_name: string, property_name: string, ): Promise<DBus.Variant> {
        return this.thisDBusInterface.Get(interface_name, property_name, );
    }

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    public GetAll(interface_name: string, ): Promise<{[key: string]: DBus.Variant}> {
        return this.thisDBusInterface.GetAll(interface_name, );
    }

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    public Set(interface_name: string, property_name: string, value: DBus.Variant): Promise<void> {
        return this.thisDBusInterface.Set(interface_name, property_name, value);
    }

}
/***** Signals for org.freedesktop.DBus.Properties *****/
export declare interface OrgfreedesktopDBusProperties {
    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface_name: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
    
    on(event: string, listener: Function): this;
}

/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings
 * Interface: org.freedesktop.DBus.Introspectable
 */
export class OrgfreedesktopDBusIntrospectable extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Introspectable';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Settings", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusIntrospectable> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusIntrospectable(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Introspectable');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    public Introspect(): Promise<string> {
        return this.thisDBusInterface.Introspect();
    }

}


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings
 * Interface: org.freedesktop.DBus.Peer
 */
export class OrgfreedesktopDBusPeer extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Peer';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Settings", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusPeer> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new OrgfreedesktopDBusPeer(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Peer');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Ping', inSignature: '', outSignature: '' })
    public Ping(): Promise<void> {
        return this.thisDBusInterface.Ping();
    }

    //@method({ name: 'GetMachineId', inSignature: '', outSignature: 's' })
    public GetMachineId(): Promise<string> {
        return this.thisDBusInterface.GetMachineId();
    }

}


/**
 * Service: org.freedesktop.NetworkManager
 * ObjectPath: /org/freedesktop/NetworkManager/Settings
 * Interface: org.freedesktop.NetworkManager.Settings
 */
export class Settings extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.NetworkManager.Settings';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/freedesktop/NetworkManager/Settings", xml: string = XMLObjectData): Promise<Settings> {
        return bus.getProxyObject('org.freedesktop.NetworkManager', objectPath, xml).then((obj) => new Settings(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.NetworkManager.Settings');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Connections', signature: 'ao', access: ACCESS_READ })
    public Connections(): Promise<Array<DBus.ObjectPath>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Connections').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Hostname', signature: 's', access: ACCESS_READ })
    public Hostname(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Hostname').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'CanModify', signature: 'b', access: ACCESS_READ })
    public CanModify(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'CanModify').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'ListConnections', inSignature: '', outSignature: 'ao' })
    public ListConnections(): Promise<Array<DBus.ObjectPath>> {
        return this.thisDBusInterface.ListConnections();
    }

    //@method({ name: 'GetConnectionByUuid', inSignature: 's', outSignature: 'o' })
    public GetConnectionByUuid(uuid: string, ): Promise<DBus.ObjectPath> {
        return this.thisDBusInterface.GetConnectionByUuid(uuid, );
    }

    //@method({ name: 'AddConnection', inSignature: 'a{sa{sv}}', outSignature: 'o' })
    public AddConnection(connection: /* a{sa{sv}} */ {[key:string]: any}, ): Promise<DBus.ObjectPath> {
        return this.thisDBusInterface.AddConnection(connection, );
    }

    //@method({ name: 'AddConnectionUnsaved', inSignature: 'a{sa{sv}}', outSignature: 'o' })
    public AddConnectionUnsaved(connection: /* a{sa{sv}} */ {[key:string]: any}, ): Promise<DBus.ObjectPath> {
        return this.thisDBusInterface.AddConnectionUnsaved(connection, );
    }

    //@method({ name: 'AddConnection2', inSignature: 'a{sa{sv}}ua{sv}', outSignature: 'oa{sv}' })
    public AddConnection2(settings: /* a{sa{sv}} */ {[key:string]: any}, flags: number, args: {[key: string]: DBus.Variant}, ): Promise<any> {
        return this.thisDBusInterface.AddConnection2(settings, flags, args, );
    }

    //@method({ name: 'LoadConnections', inSignature: 'as', outSignature: 'bas' })
    public LoadConnections(filenames: Array<string>, ): Promise<any> {
        return this.thisDBusInterface.LoadConnections(filenames, );
    }

    //@method({ name: 'ReloadConnections', inSignature: '', outSignature: 'b' })
    public ReloadConnections(): Promise<boolean> {
        return this.thisDBusInterface.ReloadConnections();
    }

    //@method({ name: 'SaveHostname', inSignature: 's', outSignature: '' })
    public SaveHostname(hostname: string): Promise<void> {
        return this.thisDBusInterface.SaveHostname(hostname);
    }

}
/***** Signals for org.freedesktop.NetworkManager.Settings *****/
export declare interface Settings {
    //@signal({ name: 'PropertiesChanged', signature: 'a{sv}' })
    on(evt: "PropertiesChanged", cb: (properties: {[key: string]: DBus.Variant}) => void): this;
    //@signal({ name: 'NewConnection', signature: 'o' })
    on(evt: "NewConnection", cb: (connection: DBus.ObjectPath) => void): this;
    //@signal({ name: 'ConnectionRemoved', signature: 'o' })
    on(evt: "ConnectionRemoved", cb: (connection: DBus.ObjectPath) => void): this;
    on(evt: "PropertiesChanged", cb: (iface: string, changedProperties: {[key:string]: any}, invalidatedProperties: string[]) => void): this;
    on(event: string, listener: Function): this;
}

