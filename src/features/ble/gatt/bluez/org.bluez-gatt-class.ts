import * as DBus from 'dbus-next';
import { EventEmitter } from 'events';

/*
 * Generated by dbus-next interface generator
 * Template: typescript-class.ts.hbs
 */

// Introspection XML of org.bluez at /org/bluez/hci0
const XMLObjectData = `<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node><interface name="org.freedesktop.DBus.Introspectable"><method name="Introspect"><arg name="xml" type="s" direction="out"/>
</method></interface><interface name="org.bluez.Adapter1"><method name="StartDiscovery"></method><method name="SetDiscoveryFilter"><arg name="properties" type="a{sv}" direction="in"/>
</method><method name="StopDiscovery"></method><method name="RemoveDevice"><arg name="device" type="o" direction="in"/>
</method><method name="GetDiscoveryFilters"><arg name="filters" type="as" direction="out"/>
</method><property name="Address" type="s" access="read"></property><property name="AddressType" type="s" access="read"></property><property name="Name" type="s" access="read"></property><property name="Alias" type="s" access="readwrite"></property><property name="Class" type="u" access="read"></property><property name="Powered" type="b" access="readwrite"></property><property name="Discoverable" type="b" access="readwrite"></property><property name="DiscoverableTimeout" type="u" access="readwrite"></property><property name="Pairable" type="b" access="readwrite"></property><property name="PairableTimeout" type="u" access="readwrite"></property><property name="Discovering" type="b" access="read"></property><property name="UUIDs" type="as" access="read"></property><property name="Modalias" type="s" access="read"></property></interface><interface name="org.freedesktop.DBus.Properties"><method name="Get"><arg name="interface" type="s" direction="in"/>
<arg name="name" type="s" direction="in"/>
<arg name="value" type="v" direction="out"/>
</method><method name="Set"><arg name="interface" type="s" direction="in"/>
<arg name="name" type="s" direction="in"/>
<arg name="value" type="v" direction="in"/>
</method><method name="GetAll"><arg name="interface" type="s" direction="in"/>
<arg name="properties" type="a{sv}" direction="out"/>
</method><signal name="PropertiesChanged"><arg name="interface" type="s"/>
<arg name="changed_properties" type="a{sv}"/>
<arg name="invalidated_properties" type="as"/>
</signal>
</interface><interface name="org.bluez.GattManager1"><method name="RegisterApplication"><arg name="application" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/>
</method></interface><interface name="org.bluez.LEAdvertisingManager1"><method name="RegisterAdvertisement"><arg name="advertisement" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterAdvertisement"><arg name="service" type="o" direction="in"/>
</method><property name="ActiveInstances" type="y" access="read"></property><property name="SupportedInstances" type="y" access="read"></property><property name="SupportedIncludes" type="as" access="read"></property><property name="SupportedSecondaryChannels" type="as" access="read"></property></interface><interface name="org.bluez.Media1"><method name="RegisterEndpoint"><arg name="endpoint" type="o" direction="in"/>
<arg name="properties" type="a{sv}" direction="in"/>
</method><method name="UnregisterEndpoint"><arg name="endpoint" type="o" direction="in"/>
</method><method name="RegisterPlayer"><arg name="player" type="o" direction="in"/>
<arg name="properties" type="a{sv}" direction="in"/>
</method><method name="UnregisterPlayer"><arg name="player" type="o" direction="in"/>
</method><method name="RegisterApplication"><arg name="application" type="o" direction="in"/>
<arg name="options" type="a{sv}" direction="in"/>
</method><method name="UnregisterApplication"><arg name="application" type="o" direction="in"/>
</method></interface><interface name="org.bluez.NetworkServer1"><method name="Register"><arg name="uuid" type="s" direction="in"/>
<arg name="bridge" type="s" direction="in"/>
</method><method name="Unregister"><arg name="uuid" type="s" direction="in"/>
</method></interface></node>`;

/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.freedesktop.DBus.Introspectable
 */
export class OrgfreedesktopDBusIntrospectable extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Introspectable';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusIntrospectable> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgfreedesktopDBusIntrospectable(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Introspectable');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Introspect', inSignature: '', outSignature: 's' })
    public Introspect(): Promise<string> {
        return this.thisDBusInterface.Introspect();
    }

}


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.Adapter1
 */
export class Adapter1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.Adapter1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<Adapter1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new Adapter1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.Adapter1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'Address', signature: 's', access: ACCESS_READ })
    public Address(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Address').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'AddressType', signature: 's', access: ACCESS_READ })
    public AddressType(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'AddressType').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Name', signature: 's', access: ACCESS_READ })
    public Name(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Name').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Alias', signature: 's', access: ACCESS_READWRITE })
    public Alias(): Promise<string>;
    public Alias(value: string): Promise<void>;
    public Alias(value?: string): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Alias', new DBus.Variant("s", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Alias').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Class', signature: 'u', access: ACCESS_READ })
    public Class(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Class').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Powered', signature: 'b', access: ACCESS_READWRITE })
    public Powered(): Promise<boolean>;
    public Powered(value: boolean): Promise<void>;
    public Powered(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Powered', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Powered').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Discoverable', signature: 'b', access: ACCESS_READWRITE })
    public Discoverable(): Promise<boolean>;
    public Discoverable(value: boolean): Promise<void>;
    public Discoverable(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Discoverable', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Discoverable').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'DiscoverableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public DiscoverableTimeout(): Promise<number>;
    public DiscoverableTimeout(value: number): Promise<void>;
    public DiscoverableTimeout(value?: number): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'DiscoverableTimeout', new DBus.Variant("u", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'DiscoverableTimeout').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Pairable', signature: 'b', access: ACCESS_READWRITE })
    public Pairable(): Promise<boolean>;
    public Pairable(value: boolean): Promise<void>;
    public Pairable(value?: boolean): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'Pairable', new DBus.Variant("b", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Pairable').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'PairableTimeout', signature: 'u', access: ACCESS_READWRITE })
    public PairableTimeout(): Promise<number>;
    public PairableTimeout(value: number): Promise<void>;
    public PairableTimeout(value?: number): Promise<any> {
        if(value !== undefined) {
            return this.propertiesDBusInterface.Set(this.dbusInterfaceName, 'PairableTimeout', new DBus.Variant("u", value));
        } else {
            return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'PairableTimeout').then((variant: DBus.Variant) => variant.value);
        }
    }

    //@property({ name: 'Discovering', signature: 'b', access: ACCESS_READ })
    public Discovering(): Promise<boolean> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Discovering').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'UUIDs', signature: 'as', access: ACCESS_READ })
    public UUIDs(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'UUIDs').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'Modalias', signature: 's', access: ACCESS_READ })
    public Modalias(): Promise<string> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'Modalias').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'StartDiscovery', inSignature: '', outSignature: '' })
    public StartDiscovery(): Promise<void> {
        return this.thisDBusInterface.StartDiscovery();
    }

    //@method({ name: 'SetDiscoveryFilter', inSignature: 'a{sv}', outSignature: '' })
    public SetDiscoveryFilter(properties: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.SetDiscoveryFilter(properties);
    }

    //@method({ name: 'StopDiscovery', inSignature: '', outSignature: '' })
    public StopDiscovery(): Promise<void> {
        return this.thisDBusInterface.StopDiscovery();
    }

    //@method({ name: 'RemoveDevice', inSignature: 'o', outSignature: '' })
    public RemoveDevice(device: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.RemoveDevice(device);
    }

    //@method({ name: 'GetDiscoveryFilters', inSignature: '', outSignature: 'as' })
    public GetDiscoveryFilters(): Promise<Array<string>> {
        return this.thisDBusInterface.GetDiscoveryFilters();
    }

}


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.freedesktop.DBus.Properties
 */
export class OrgfreedesktopDBusProperties extends EventEmitter {

    public readonly dbusInterfaceName = 'org.freedesktop.DBus.Properties';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<OrgfreedesktopDBusProperties> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new OrgfreedesktopDBusProperties(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Get', inSignature: 'ss', outSignature: 'v' })
    public Get(iface: string, name: string, ): Promise<DBus.Variant> {
        return this.thisDBusInterface.Get(iface, name, );
    }

    //@method({ name: 'Set', inSignature: 'ssv', outSignature: '' })
    public Set(iface: string, name: string, value: DBus.Variant): Promise<void> {
        return this.thisDBusInterface.Set(iface, name, value);
    }

    //@method({ name: 'GetAll', inSignature: 's', outSignature: 'a{sv}' })
    public GetAll(iface: string, ): Promise<{[key: string]: DBus.Variant}> {
        return this.thisDBusInterface.GetAll(iface, );
    }

}
/***** Signals for org.freedesktop.DBus.Properties *****/
export declare interface OrgfreedesktopDBusProperties {
    //@signal({ name: 'PropertiesChanged', signature: 'sa{sv}as' })
    on(evt: "PropertiesChanged", cb: (interface: string, changed_properties: {[key: string]: DBus.Variant}, invalidated_properties: Array<string>) => void): this;
    
    on(event: string, listener: Function): this;
}

/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.GattManager1
 */
export class GattManager1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.GattManager1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<GattManager1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new GattManager1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.GattManager1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'RegisterApplication', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterApplication(application: DBus.ObjectPath, options: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RegisterApplication(application, options);
    }

    //@method({ name: 'UnregisterApplication', inSignature: 'o', outSignature: '' })
    public UnregisterApplication(application: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterApplication(application);
    }

}


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.LEAdvertisingManager1
 */
export class LEAdvertisingManager1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.LEAdvertisingManager1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<LEAdvertisingManager1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new LEAdvertisingManager1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.LEAdvertisingManager1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }

    //@property({ name: 'ActiveInstances', signature: 'y', access: ACCESS_READ })
    public ActiveInstances(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'ActiveInstances').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'SupportedInstances', signature: 'y', access: ACCESS_READ })
    public SupportedInstances(): Promise<number> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'SupportedInstances').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'SupportedIncludes', signature: 'as', access: ACCESS_READ })
    public SupportedIncludes(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'SupportedIncludes').then((variant: DBus.Variant) => variant.value);
    }

    //@property({ name: 'SupportedSecondaryChannels', signature: 'as', access: ACCESS_READ })
    public SupportedSecondaryChannels(): Promise<Array<string>> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, 'SupportedSecondaryChannels').then((variant: DBus.Variant) => variant.value);
    }


    /***** Methods *****/

    //@method({ name: 'RegisterAdvertisement', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterAdvertisement(advertisement: DBus.ObjectPath, options: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RegisterAdvertisement(advertisement, options);
    }

    //@method({ name: 'UnregisterAdvertisement', inSignature: 'o', outSignature: '' })
    public UnregisterAdvertisement(service: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterAdvertisement(service);
    }

}


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.Media1
 */
export class Media1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.Media1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<Media1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new Media1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.Media1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'RegisterEndpoint', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterEndpoint(endpoint: DBus.ObjectPath, properties: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RegisterEndpoint(endpoint, properties);
    }

    //@method({ name: 'UnregisterEndpoint', inSignature: 'o', outSignature: '' })
    public UnregisterEndpoint(endpoint: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterEndpoint(endpoint);
    }

    //@method({ name: 'RegisterPlayer', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterPlayer(player: DBus.ObjectPath, properties: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RegisterPlayer(player, properties);
    }

    //@method({ name: 'UnregisterPlayer', inSignature: 'o', outSignature: '' })
    public UnregisterPlayer(player: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterPlayer(player);
    }

    //@method({ name: 'RegisterApplication', inSignature: 'oa{sv}', outSignature: '' })
    public RegisterApplication(application: DBus.ObjectPath, options: {[key: string]: DBus.Variant}): Promise<void> {
        return this.thisDBusInterface.RegisterApplication(application, options);
    }

    //@method({ name: 'UnregisterApplication', inSignature: 'o', outSignature: '' })
    public UnregisterApplication(application: DBus.ObjectPath): Promise<void> {
        return this.thisDBusInterface.UnregisterApplication(application);
    }

}


/**
 * Service: org.bluez
 * ObjectPath: /org/bluez/hci0
 * Interface: org.bluez.NetworkServer1
 */
export class NetworkServer1 extends EventEmitter {

    public readonly dbusInterfaceName = 'org.bluez.NetworkServer1';
    public dbusObject: DBus.ProxyObject;
    public propertiesDBusInterface: DBus.ClientInterface;
    public thisDBusInterface: DBus.ClientInterface;

    public static Connect(bus: DBus.MessageBus, objectPath: string = "/org/bluez/hci0", xml: string = XMLObjectData): Promise<NetworkServer1> {
        return bus.getProxyObject('org.bluez', objectPath, xml).then((obj) => new NetworkServer1(obj));
    }

    constructor(dbusObject: DBus.ProxyObject) {
        super();
        this.dbusObject = dbusObject;
        this.thisDBusInterface = this.dbusObject.getInterface('org.bluez.NetworkServer1');
        this.propertiesDBusInterface = this.dbusObject.getInterface('org.freedesktop.DBus.Properties');

        // forward property change events
        const forwardPropertyChange = (iface: string, changed: any, invalidated: any) => {
            if(iface === this.dbusInterfaceName) {
                this.emit('PropertiesChanged', iface, changed, invalidated);
            }
        }

        // forward all signals
        this.on("newListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.on('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.on(event, listener);
            }
        });
        this.on("removeListener", (event: string, listener: (...args: any[]) => void) => {
            if(event === "PropertiesChanged" && this.listenerCount('PropertiesChanged') === 0) {
                this.propertiesDBusInterface.removeListener('PropertiesChanged', forwardPropertyChange);
            } else {
                this.thisDBusInterface.removeListener(event, listener);
            }
        });
    }

    /***** Properties *****/

    public getProperties(): Promise<{[name: string]: DBus.Variant}> {
        return this.propertiesDBusInterface.GetAll(this.dbusInterfaceName);
    }

    public getProperty(name: string): Promise<DBus.Variant> {
        return this.propertiesDBusInterface.Get(this.dbusInterfaceName, name);
    }

    public setProperty(name: string, value: DBus.Variant): Promise<void> {
        return this.propertiesDBusInterface.Set(this.dbusInterfaceName, name, value);
    }


    /***** Methods *****/

    //@method({ name: 'Register', inSignature: 'ss', outSignature: '' })
    public Register(uuid: string, bridge: string): Promise<void> {
        return this.thisDBusInterface.Register(uuid, bridge);
    }

    //@method({ name: 'Unregister', inSignature: 's', outSignature: '' })
    public Unregister(uuid: string): Promise<void> {
        return this.thisDBusInterface.Unregister(uuid);
    }

}


