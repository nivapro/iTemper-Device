"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cors = require("cors");
var express = require("express");
var path = require("path");
var api_1 = require("./routes/api");
var index_1 = require("./routes/index");
var settings_1 = require("./routes/settings");
var usb_controller_1 = require("./models/usb-controller");
var logger_1 = require("./logger");
var app = express();
app.use(cors());
app.options('*', cors());
app.disable('etag');
usb_controller_1.USBController.initializeDevices();
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
app.use(express.static(path.join(__dirname, 'public')));
app.use('/', index_1.default);
app.use('/api', api_1.default);
app.use('/settings', settings_1.default);
app.use(function (req, res, next) {
    if (req) {
    }
    if (res) {
    }
    var err = new Error('Not Found at server');
    err['status'] = 404;
    next(err);
});
if (app.get('env') === 'development') {
    app.use(function (err, req, res, next) {
        res.status(err['status'] || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
        if (next) {
        }
        if (req) {
        }
    });
}
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
    if (next) {
    }
    if (req) {
    }
});
app.set('port', process.env.PORT || 80);
var server = app.listen(app.get('port'), function () {
    logger_1.log.info('iTemper listening on port ' + server.address().port);
});
exports.default = server;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0lBQ3BELFlBQUcsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvcnMgZnJvbSAnY29ycyc7XHJcbmltcG9ydCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xyXG5pbXBvcnQgKiBhcyBodHRwIGZyb20gJ2h0dHAnO1xyXG5pbXBvcnQgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuXHJcbmltcG9ydCByb3V0ZV9hcGkgZnJvbSAnLi9yb3V0ZXMvYXBpJztcclxuaW1wb3J0IHJvdXRlX2luZGV4IGZyb20gJy4vcm91dGVzL2luZGV4JztcclxuaW1wb3J0IHJvdXRlX3NldHRpbmdzIGZyb20gJy4vcm91dGVzL3NldHRpbmdzJztcclxuXHJcbmltcG9ydCB7IFVTQkNvbnRyb2xsZXIgfSBmcm9tICcuL21vZGVscy91c2ItY29udHJvbGxlcic7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlcic7XHJcblxyXG5jb25zdCBhcHA6IGV4cHJlc3MuRXhwcmVzcyA9IGV4cHJlc3MoKTtcclxuLy8gVE9ETzogQ09SUyBoYXJkZW5pbmdcclxuYXBwLnVzZShjb3JzKCkpO1xyXG5hcHAub3B0aW9ucygnKicsIGNvcnMoKSk7XHJcbmFwcC5kaXNhYmxlKCdldGFnJyk7XHJcblxyXG5VU0JDb250cm9sbGVyLmluaXRpYWxpemVEZXZpY2VzKCk7XHJcblxyXG4vLyB2aWV3IGVuZ2luZSBzZXR1cFxyXG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICd2aWV3cycpKTtcclxuYXBwLnNldCgndmlldyBlbmdpbmUnLCAncHVnJyk7XHJcblxyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSkpO1xyXG5cclxuYXBwLnVzZSgnLycsIHJvdXRlX2luZGV4KTtcclxuYXBwLnVzZSgnL2FwaScsIHJvdXRlX2FwaSk7XHJcbmFwcC51c2UoJy9zZXR0aW5ncycsIHJvdXRlX3NldHRpbmdzKTtcclxuXHJcbi8vIGNhdGNoIDQwNCBhbmQgZm9yd2FyZCB0byBlcnJvciBoYW5kbGVyXHJcbmFwcC51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcclxuICAgIGlmIChyZXEpIHtcclxuICAgICAgICAvLyBUbyBiZSBpbXBsZW1lbnRlZFxyXG4gICAgfVxyXG4gICAgaWYgKHJlcykge1xyXG4gICAgICAgIC8vIFRvIGJlIGltcGxlbWVudGVkXHJcbiAgICB9XHJcbiAgICBjb25zdCBlcnI6IGFueSA9IG5ldyBFcnJvcignTm90IEZvdW5kIGF0IHNlcnZlcicpO1xyXG4gICAgZXJyWydzdGF0dXMnXSA9IDQwNDtcclxuICAgIG5leHQoZXJyKTtcclxufSk7XHJcblxyXG5cclxuLy8gZXJyb3IgaGFuZGxlcnNcclxuXHJcbi8vIGRldmVsb3BtZW50IGVycm9yIGhhbmRsZXJcclxuLy8gd2lsbCBwcmludCBzdGFja3RyYWNlXHJcbmlmIChhcHAuZ2V0KCdlbnYnKSA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgYXBwLnVzZSgoZXJyOiBhbnksIHJlcTogYW55LCByZXM6IGFueSwgbmV4dDogYW55KSA9PiB7XHJcbiAgICAgICAgcmVzLnN0YXR1cyhlcnJbJ3N0YXR1cyddIHx8IDUwMCk7XHJcbiAgICAgICAgcmVzLnJlbmRlcignZXJyb3InLCB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgICAgICBlcnJvcjogZXJyfSk7XHJcbiAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgLy8gdG8gYmUgaW1wbGVtZW50ZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlcSkge1xyXG4gICAgICAgICAgICAvLyB0byBiZSBpbXBsZW1lbnRlZFxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBwcm9kdWN0aW9uIGVycm9yIGhhbmRsZXJcclxuLy8gbm8gc3RhY2sgdHJhY2VzIGxlYWtlZCB0byB1c2VyXHJcbmFwcC51c2UoKGVycjogYW55LCByZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6IGFueSkgPT4ge1xyXG4gICAgcmVzLnN0YXR1cyhlcnIuc3RhdHVzIHx8IDUwMCk7XHJcbiAgICByZXMucmVuZGVyKCdlcnJvcicsIHtcclxuICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSxcclxuICAgICAgICBlcnJvcjoge319KTtcclxuICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgLy8gdG8gYmUgaW1wbGVtZW50ZWRcclxuICAgIH1cclxuICAgIGlmIChyZXEpIHtcclxuICAgICAgICAvLyB0byBiZSBpbXBsZW1lbnRlZFxyXG4gICAgfVxyXG59KTtcclxuXHJcbmFwcC5zZXQoJ3BvcnQnLCBwcm9jZXNzLmVudi5QT1JUIHx8IDgwKTtcclxuXHJcbmNvbnN0IHNlcnZlcjogaHR0cC5TZXJ2ZXIgPSBhcHAubGlzdGVuKGFwcC5nZXQoJ3BvcnQnKSwgZnVuY3Rpb24oKSB7XHJcbiAgICBsb2cuaW5mbygnaVRlbXBlciBsaXN0ZW5pbmcgb24gcG9ydCAnICsgc2VydmVyLmFkZHJlc3MoKS5wb3J0KTtcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzZXJ2ZXI7XHJcbiJdfQ==
