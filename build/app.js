"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cors = require("cors");
var debug = require("debug");
var express = require("express");
var path = require("path");
var api_1 = require("./routes/api");
var index_1 = require("./routes/index");
var Temper8 = require("./models/temper8");
var app = express();
app.use(cors());
app.options('*', cors());
var temper8 = new Temper8.Device();
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
app.use(express.static(path.join(__dirname, 'public')));
app.use('/', index_1.default);
app.use('/api', api_1.default);
app.use(function (req, res, next) {
    var err = new Error('Not Found at server');
    err['status'] = 404;
    next(err);
});
if (app.get('env') === 'development') {
    app.use(function (err, req, res, next) {
        res.status(err['status'] || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
    });
}
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
});
app.set('port', process.env.PORT || 80);
var server = app.listen(app.get('port'), function () {
    debug('Express server listening on port ' + server.address().port);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQkFBNkI7QUFDN0IsNkJBQWdDO0FBQ2hDLGlDQUFvQztBQUVwQywyQkFBOEI7QUFFOUIsb0NBQXFDO0FBQ3JDLHdDQUF5QztBQUV6QywwQ0FBNkM7QUFFN0MsSUFBTSxHQUFHLEdBQW9CLE9BQU8sRUFBRSxDQUFDO0FBRXZDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNoQixHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXpCLElBQU0sT0FBTyxHQUFtQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUdyRCxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2hELEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTlCLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFeEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsZUFBVyxDQUFDLENBQUM7QUFDMUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsYUFBUyxDQUFDLENBQUM7QUFHM0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFTLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUMzQixJQUFNLEdBQUcsR0FBVSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsQ0FBQyxDQUFDLENBQUM7QUFPSCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbkMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQVEsRUFBRSxHQUFRLEVBQUUsR0FBUSxFQUFFLElBQVM7UUFDNUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDakMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDaEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO1lBQ3BCLEtBQUssRUFBRSxHQUFHO1NBQUMsQ0FBQyxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUlELEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLEdBQVEsRUFBRSxJQUFTO0lBQzVDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNoQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87UUFDcEIsS0FBSyxFQUFFLEVBQUU7S0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztBQUV4QyxJQUFNLE1BQU0sR0FBZ0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO0lBQ3BELEtBQUssQ0FBQyxtQ0FBbUMsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcclxuaW1wb3J0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKTtcclxuaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5cclxuaW1wb3J0IHJvdXRlX2FwaSBmcm9tICcuL3JvdXRlcy9hcGknO1xyXG5pbXBvcnQgcm91dGVfaW5kZXggZnJvbSAnLi9yb3V0ZXMvaW5kZXgnO1xyXG5cclxuaW1wb3J0IFRlbXBlcjggPSByZXF1aXJlKCcuL21vZGVscy90ZW1wZXI4Jyk7XHJcblxyXG5jb25zdCBhcHA6IGV4cHJlc3MuRXhwcmVzcyA9IGV4cHJlc3MoKTtcclxuLy8gVE9ETzogQ09SUyBoYXJkZW5pbmcgICAgICAgIFxyXG5hcHAudXNlKGNvcnMoKSk7XHJcbmFwcC5vcHRpb25zKCcqJywgY29ycygpKTtcclxuXHJcbmNvbnN0IHRlbXBlcjg6IFRlbXBlcjguRGV2aWNlID0gbmV3IFRlbXBlcjguRGV2aWNlKCk7XHJcblxyXG4vLyB2aWV3IGVuZ2luZSBzZXR1cFxyXG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICd2aWV3cycpKTtcclxuYXBwLnNldCgndmlldyBlbmdpbmUnLCAncHVnJyk7XHJcblxyXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKHBhdGguam9pbihfX2Rpcm5hbWUsICdwdWJsaWMnKSkpO1xyXG5cclxuYXBwLnVzZSgnLycsIHJvdXRlX2luZGV4KTtcclxuYXBwLnVzZSgnL2FwaScsIHJvdXRlX2FwaSk7XHJcblxyXG4vLyBjYXRjaCA0MDQgYW5kIGZvcndhcmQgdG8gZXJyb3IgaGFuZGxlclxyXG5hcHAudXNlKGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgICBjb25zdCBlcnI6IEVycm9yID0gbmV3IEVycm9yKCdOb3QgRm91bmQgYXQgc2VydmVyJyk7XHJcbiAgICBlcnJbJ3N0YXR1cyddID0gNDA0O1xyXG4gICAgbmV4dChlcnIpO1xyXG59KTtcclxuXHJcblxyXG4vLyBlcnJvciBoYW5kbGVyc1xyXG5cclxuLy8gZGV2ZWxvcG1lbnQgZXJyb3IgaGFuZGxlclxyXG4vLyB3aWxsIHByaW50IHN0YWNrdHJhY2VcclxuaWYgKGFwcC5nZXQoJ2VudicpID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICBhcHAudXNlKChlcnI6IGFueSwgcmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcclxuICAgICAgICByZXMuc3RhdHVzKGVyclsnc3RhdHVzJ10gfHwgNTAwKTtcclxuICAgICAgICByZXMucmVuZGVyKCdlcnJvcicsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIGVycm9yOiBlcnJ9KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBwcm9kdWN0aW9uIGVycm9yIGhhbmRsZXJcclxuLy8gbm8gc3RhY2t0cmFjZXMgbGVha2VkIHRvIHVzZXJcclxuYXBwLnVzZSgoZXJyOiBhbnksIHJlcTogYW55LCByZXM6IGFueSwgbmV4dDogYW55KSA9PiB7XHJcbiAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcclxuICAgIHJlcy5yZW5kZXIoJ2Vycm9yJywge1xyXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIGVycm9yOiB7fX0pO1xyXG59KTtcclxuXHJcbmFwcC5zZXQoJ3BvcnQnLCBwcm9jZXNzLmVudi5QT1JUIHx8IDgwKTtcclxuXHJcbmNvbnN0IHNlcnZlcjogaHR0cC5TZXJ2ZXIgPSBhcHAubGlzdGVuKGFwcC5nZXQoJ3BvcnQnKSwgZnVuY3Rpb24oKSB7XHJcbiAgICBkZWJ1ZygnRXhwcmVzcyBzZXJ2ZXIgbGlzdGVuaW5nIG9uIHBvcnQgJyArIHNlcnZlci5hZGRyZXNzKCkucG9ydCk7XHJcbn0pO1xyXG4iXX0=
