"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cors = require("cors");
var express = require("express");
var path = require("path");
var api_1 = require("./routes/api");
var index_1 = require("./routes/index");
var settings_1 = require("./routes/settings");
var usb_sensor_manager_1 = require("./models/usb-sensor-manager");
var logger_1 = require("./logger");
var app = express();
app.use(cors());
app.options('*', cors());
app.disable('etag');
usb_sensor_manager_1.USBSensorManager.factory();
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');
app.use(express.static(path.join(__dirname, 'public')));
app.use('/', index_1.default);
app.use('/api', api_1.default);
app.use('/settings', settings_1.default);
app.use(function (req, res, next) {
    if (req) {
    }
    if (res) {
    }
    var err = new Error('Not Found at server');
    err['status'] = 404;
    next(err);
});
if (app.get('env') === 'development') {
    app.use(function (err, req, res, next) {
        res.status(err['status'] || 500);
        res.render('error', {
            message: err.message,
            error: err
        });
        if (next) {
        }
        if (req) {
        }
    });
}
app.use(function (err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
        message: err.message,
        error: {}
    });
    if (next) {
    }
    if (req) {
    }
});
app.set('port', process.env.PORT || 80);
var server = app.listen(app.get('port'), function () {
    logger_1.log.info('iTemper listening on port ' + server.address().port);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7SUFDcEQsWUFBRyxDQUFDLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkUsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY29ycyBmcm9tICdjb3JzJztcclxuaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSAnaHR0cCc7XHJcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5cclxuaW1wb3J0IHJvdXRlX2FwaSBmcm9tICcuL3JvdXRlcy9hcGknO1xyXG5pbXBvcnQgcm91dGVfaW5kZXggZnJvbSAnLi9yb3V0ZXMvaW5kZXgnO1xyXG5pbXBvcnQgcm91dGVfc2V0dGluZ3MgZnJvbSAnLi9yb3V0ZXMvc2V0dGluZ3MnO1xyXG5cclxuaW1wb3J0IHsgVVNCU2Vuc29yTWFuYWdlciB9IGZyb20gJy4vbW9kZWxzL3VzYi1zZW5zb3ItbWFuYWdlcic7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuL2xvZ2dlcic7XHJcblxyXG5jb25zdCBhcHA6IGV4cHJlc3MuRXhwcmVzcyA9IGV4cHJlc3MoKTtcclxuLy8gVE9ETzogQ09SUyBoYXJkZW5pbmdcclxuYXBwLnVzZShjb3JzKCkpO1xyXG5hcHAub3B0aW9ucygnKicsIGNvcnMoKSk7XHJcbmFwcC5kaXNhYmxlKCdldGFnJyk7XHJcblxyXG5VU0JTZW5zb3JNYW5hZ2VyLmZhY3RvcnkoKTtcclxuXHJcbi8vIHZpZXcgZW5naW5lIHNldHVwXHJcbmFwcC5zZXQoJ3ZpZXdzJywgcGF0aC5qb2luKF9fZGlybmFtZSwgJ3ZpZXdzJykpO1xyXG5hcHAuc2V0KCd2aWV3IGVuZ2luZScsICdwdWcnKTtcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJ3B1YmxpYycpKSk7XHJcblxyXG5hcHAudXNlKCcvJywgcm91dGVfaW5kZXgpO1xyXG5hcHAudXNlKCcvYXBpJywgcm91dGVfYXBpKTtcclxuYXBwLnVzZSgnL3NldHRpbmdzJywgcm91dGVfc2V0dGluZ3MpO1xyXG5cclxuLy8gY2F0Y2ggNDA0IGFuZCBmb3J3YXJkIHRvIGVycm9yIGhhbmRsZXJcclxuYXBwLnVzZShmdW5jdGlvbihyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgaWYgKHJlcSkge1xyXG4gICAgICAgIC8vIFRvIGJlIGltcGxlbWVudGVkXHJcbiAgICB9XHJcbiAgICBpZiAocmVzKSB7XHJcbiAgICAgICAgLy8gVG8gYmUgaW1wbGVtZW50ZWRcclxuICAgIH1cclxuICAgIGNvbnN0IGVycjogYW55ID0gbmV3IEVycm9yKCdOb3QgRm91bmQgYXQgc2VydmVyJyk7XHJcbiAgICBlcnJbJ3N0YXR1cyddID0gNDA0O1xyXG4gICAgbmV4dChlcnIpO1xyXG59KTtcclxuXHJcblxyXG4vLyBlcnJvciBoYW5kbGVyc1xyXG5cclxuLy8gZGV2ZWxvcG1lbnQgZXJyb3IgaGFuZGxlclxyXG4vLyB3aWxsIHByaW50IHN0YWNrdHJhY2VcclxuaWYgKGFwcC5nZXQoJ2VudicpID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICBhcHAudXNlKChlcnI6IGFueSwgcmVxOiBhbnksIHJlczogYW55LCBuZXh0OiBhbnkpID0+IHtcclxuICAgICAgICByZXMuc3RhdHVzKGVyclsnc3RhdHVzJ10gfHwgNTAwKTtcclxuICAgICAgICByZXMucmVuZGVyKCdlcnJvcicsIHtcclxuICAgICAgICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIGVycm9yOiBlcnJ9KTtcclxuICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAvLyB0byBiZSBpbXBsZW1lbnRlZFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVxKSB7XHJcbiAgICAgICAgICAgIC8vIHRvIGJlIGltcGxlbWVudGVkXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIHByb2R1Y3Rpb24gZXJyb3IgaGFuZGxlclxyXG4vLyBubyBzdGFjayB0cmFjZXMgbGVha2VkIHRvIHVzZXJcclxuYXBwLnVzZSgoZXJyOiBhbnksIHJlcTogYW55LCByZXM6IGFueSwgbmV4dDogYW55KSA9PiB7XHJcbiAgICByZXMuc3RhdHVzKGVyci5zdGF0dXMgfHwgNTAwKTtcclxuICAgIHJlcy5yZW5kZXIoJ2Vycm9yJywge1xyXG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxyXG4gICAgICAgIGVycm9yOiB7fX0pO1xyXG4gICAgaWYgKG5leHQpIHtcclxuICAgICAgICAvLyB0byBiZSBpbXBsZW1lbnRlZFxyXG4gICAgfVxyXG4gICAgaWYgKHJlcSkge1xyXG4gICAgICAgIC8vIHRvIGJlIGltcGxlbWVudGVkXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuYXBwLnNldCgncG9ydCcsIHByb2Nlc3MuZW52LlBPUlQgfHwgODApO1xyXG5cclxuY29uc3Qgc2VydmVyOiBodHRwLlNlcnZlciA9IGFwcC5saXN0ZW4oYXBwLmdldCgncG9ydCcpLCBmdW5jdGlvbigpIHtcclxuICAgIGxvZy5pbmZvKCdpVGVtcGVyIGxpc3RlbmluZyBvbiBwb3J0ICcgKyBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQpO1xyXG59KTtcclxuIl19
