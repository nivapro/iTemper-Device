"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var router = express.Router();
var usb_sensor_manager_1 = require("../models/usb-sensor-manager");
var logger_1 = require("./../logger");
router.get('/', function (_req, res) {
    var sensorLogger = usb_sensor_manager_1.USBSensorManager.getLoggers()
        .find(function (logger) { return logger.getState !== undefined; });
    res.setHeader('Content-Type', 'application/json');
    if (sensorLogger) {
        var sensorData = sensorLogger.getState().getSensorData();
        logger_1.log.debug('--- /api.get, state: ', sensorLogger.getState());
        logger_1.log.debug('--- /api.get, data:', sensorData);
        res.send(JSON.stringify(sensorData));
    }
    else {
        res.send(JSON.stringify([]));
        console.log('--- /api.get:', JSON.stringify([]));
    }
});
router.post('/debug', function (_req, res) {
    res.setHeader('Content-Type', 'application/json');
    var level = _req.query.level;
    if (level && (level === 'debug' || level === 'info' || level === 'warn' || level === 'error')) {
        logger_1.setLevel(level);
        logger_1.log.info('/debug log level:', level);
        res.status(200).send({ level: level });
    }
    else {
        logger_1.log.info('/debug log level not set:', level);
        res.sendStatus(404);
    }
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsaUNBQW9DO0FBQ3BDLElBQU0sTUFBTSxHQUFtQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEQsbUVBQWdFO0FBRWhFLHNDQUE0QztBQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFFekQsSUFBTSxZQUFZLEdBQ2QscUNBQWdCLENBQUMsVUFBVSxFQUFFO1NBQzVCLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBRyxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFFbEQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxJQUFJLFlBQVksRUFBRTtRQUNkLElBQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzRCxZQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTVELFlBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FFeEM7U0FBTTtRQUNILEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNwRDtBQUVMLENBQUMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBQyxJQUFxQixFQUFFLEdBQXFCO0lBQy9ELEdBQUcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDbEQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDL0IsSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxJQUFJLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxDQUFDLEVBQUU7UUFDM0YsaUJBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQixZQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxPQUFBLEVBQUMsQ0FBQyxDQUFDO0tBQ2pDO1NBQU07UUFDSCxZQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDdkI7QUFFTCxDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLE1BQU0sQ0FBQyIsImZpbGUiOiJyb3V0ZXMvYXBpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogR0VUIHNlbnNvciBkYXRhLlxyXG4gKi9cclxuaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmNvbnN0IHJvdXRlcjogZXhwcmVzcy5Sb3V0ZXIgPSBleHByZXNzLlJvdXRlcigpO1xyXG5cclxuaW1wb3J0IHsgVVNCU2Vuc29yTWFuYWdlciB9IGZyb20gJy4uL21vZGVscy91c2Itc2Vuc29yLW1hbmFnZXInO1xyXG5cclxuaW1wb3J0IHsgbG9nLCBzZXRMZXZlbCB9IGZyb20gJy4vLi4vbG9nZ2VyJztcclxuXHJcbnJvdXRlci5nZXQoJy8nLCAoX3JlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuXHJcbiAgICBjb25zdCBzZW5zb3JMb2dnZXIgPVxyXG4gICAgICAgIFVTQlNlbnNvck1hbmFnZXIuZ2V0TG9nZ2VycygpXHJcbiAgICAgICAgLmZpbmQobG9nZ2VyPT4gbG9nZ2VyLmdldFN0YXRlICE9PSB1bmRlZmluZWQpO1xyXG5cclxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBpZiAoc2Vuc29yTG9nZ2VyKSB7XHJcbiAgICAgICAgY29uc3Qgc2Vuc29yRGF0YSA9IHNlbnNvckxvZ2dlci5nZXRTdGF0ZSgpLmdldFNlbnNvckRhdGEoKTtcclxuICAgICAgICBsb2cuZGVidWcoJy0tLSAvYXBpLmdldCwgc3RhdGU6ICcsIHNlbnNvckxvZ2dlci5nZXRTdGF0ZSgpKTtcclxuXHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gL2FwaS5nZXQsIGRhdGE6Jywgc2Vuc29yRGF0YSk7XHJcbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkoc2Vuc29yRGF0YSkpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkoW10pKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnLS0tIC9hcGkuZ2V0OicsIEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgICB9XHJcblxyXG59KTtcclxuXHJcbnJvdXRlci5wb3N0KCcvZGVidWcnLCAoX3JlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBjb25zdCBsZXZlbCA9IF9yZXEucXVlcnkubGV2ZWw7XHJcbiAgICBpZiAobGV2ZWwgJiYgKGxldmVsID09PSAnZGVidWcnIHx8IGxldmVsID09PSAnaW5mbycgfHwgbGV2ZWwgPT09ICd3YXJuJyB8fCBsZXZlbCA9PT0gJ2Vycm9yJykpIHtcclxuICAgICAgICBzZXRMZXZlbChsZXZlbCk7XHJcbiAgICAgICAgbG9nLmluZm8oJy9kZWJ1ZyBsb2cgbGV2ZWw6JywgbGV2ZWwpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtsZXZlbH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsb2cuaW5mbygnL2RlYnVnIGxvZyBsZXZlbCBub3Qgc2V0OicsIGxldmVsKTtcclxuICAgICAgICByZXMuc2VuZFN0YXR1cyg0MDQpO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XHJcblxyXG4iXX0=
