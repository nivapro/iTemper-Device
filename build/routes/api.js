"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var router = express.Router();
var usb_sensor_manager_1 = require("../models/usb-sensor-manager");
var logger_1 = require("./../logger");
router.get('/', function (_req, res) {
    var sensorLogger = usb_sensor_manager_1.USBSensorManager.getLoggers()
        .find(function (logger) { return logger.getState !== undefined; });
    res.setHeader('Content-Type', 'application/json');
    if (sensorLogger) {
        var sensorData = sensorLogger.getState().getSensorData();
        logger_1.log.debug('--- /api.get, state: ', JSON.stringify(sensorLogger.getState()));
        logger_1.log.debug('--- /api.get, data:', JSON.stringify(sensorData));
        res.send(JSON.stringify(sensorData));
    }
    else {
        res.send(JSON.stringify([]));
        console.log('--- /api.get:', JSON.stringify([]));
    }
});
router.post('/debug', function (_req, res) {
    res.setHeader('Content-Type', 'application/json');
    var level = _req.query.level;
    if (level && (level === 'debug' || level === 'info' || level === 'warn' || level === 'error')) {
        logger_1.setLevel(level);
        logger_1.log.info('/debug log level:', level);
        res.status(200).send({ level: level });
    }
    else {
        logger_1.log.info('/debug log level not set:', level);
        res.sendStatus(404);
    }
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsaUNBQW9DO0FBQ3BDLElBQU0sTUFBTSxHQUFtQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEQsbUVBQWdFO0FBRWhFLHNDQUE0QztBQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFFekQsSUFBTSxZQUFZLEdBQ2QscUNBQWdCLENBQUMsVUFBVSxFQUFFO1NBQzVCLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBRyxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFFbEQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNELFlBQUcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTVFLFlBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzdELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXpDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFDL0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMvQixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxJQUFJLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVGLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEIsWUFBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssT0FBQSxFQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixZQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9hcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBHRVQgc2Vuc29yIGRhdGEuXHJcbiAqL1xyXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3Qgcm91dGVyOiBleHByZXNzLlJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG5pbXBvcnQgeyBVU0JTZW5zb3JNYW5hZ2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzYi1zZW5zb3ItbWFuYWdlcic7XHJcblxyXG5pbXBvcnQgeyBsb2csIHNldExldmVsIH0gZnJvbSAnLi8uLi9sb2dnZXInO1xyXG5cclxucm91dGVyLmdldCgnLycsIChfcmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHNlbnNvckxvZ2dlciA9XHJcbiAgICAgICAgVVNCU2Vuc29yTWFuYWdlci5nZXRMb2dnZXJzKClcclxuICAgICAgICAuZmluZChsb2dnZXI9PiBsb2dnZXIuZ2V0U3RhdGUgIT09IHVuZGVmaW5lZCk7XHJcblxyXG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAgIGlmIChzZW5zb3JMb2dnZXIpIHtcclxuICAgICAgICBjb25zdCBzZW5zb3JEYXRhID0gc2Vuc29yTG9nZ2VyLmdldFN0YXRlKCkuZ2V0U2Vuc29yRGF0YSgpO1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIC9hcGkuZ2V0LCBzdGF0ZTogJywgSlNPTi5zdHJpbmdpZnkoc2Vuc29yTG9nZ2VyLmdldFN0YXRlKCkpKTtcclxuXHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gL2FwaS5nZXQsIGRhdGE6JywgSlNPTi5zdHJpbmdpZnkoc2Vuc29yRGF0YSkpO1xyXG4gICAgICAgIHJlcy5zZW5kKEpTT04uc3RyaW5naWZ5KHNlbnNvckRhdGEpKTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlcy5zZW5kKEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJy0tLSAvYXBpLmdldDonLCBKU09OLnN0cmluZ2lmeShbXSkpO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5yb3V0ZXIucG9zdCgnL2RlYnVnJywgKF9yZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgY29uc3QgbGV2ZWwgPSBfcmVxLnF1ZXJ5LmxldmVsO1xyXG4gICAgaWYgKGxldmVsICYmIChsZXZlbCA9PT0gJ2RlYnVnJyB8fCBsZXZlbCA9PT0gJ2luZm8nIHx8IGxldmVsID09PSAnd2FybicgfHwgbGV2ZWwgPT09ICdlcnJvcicpKSB7XHJcbiAgICAgICAgc2V0TGV2ZWwobGV2ZWwpO1xyXG4gICAgICAgIGxvZy5pbmZvKCcvZGVidWcgbG9nIGxldmVsOicsIGxldmVsKTtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZCh7bGV2ZWx9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nLmluZm8oJy9kZWJ1ZyBsb2cgbGV2ZWwgbm90IHNldDonLCBsZXZlbCk7XHJcbiAgICAgICAgcmVzLnNlbmRTdGF0dXMoNDA0KTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xyXG5cclxuIl19
