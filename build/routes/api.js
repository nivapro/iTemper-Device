"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var router = express.Router();
var usb_sensor_manager_1 = require("../models/usb-sensor-manager");
var logger_1 = require("./../logger");
router.get('/', function (_req, res) {
    var sensorLogger = usb_sensor_manager_1.USBSensorManager.getLoggers()
        .find(function (logger) { return logger.getState !== undefined; });
    res.setHeader('Content-Type', 'application/json');
    if (sensorLogger) {
        var sensorData = sensorLogger.getState().getSensorData();
        logger_1.log.debug('--- /api.get, state: ', JSON.stringify(sensorLogger.getState()));
        logger_1.log.debug('--- /api.get, data:', JSON.stringify(sensorData));
        res.send(JSON.stringify(sensorData));
    }
    else {
        res.send(JSON.stringify([]));
        console.log('--- /api.get:', JSON.stringify([]));
    }
});
router.post('/debug', function (_req, res) {
    res.setHeader('Content-Type', 'application/json');
    var level = _req.query.level;
    if (level && (level === 'debug' || level === 'info' || level === 'warn' || level === 'error')) {
        logger_1.setLevel(level);
        logger_1.log.info('/debug log level:', level);
        res.status(200).send({ level: level });
    }
    else {
        logger_1.log.info('/debug log level not set:', level);
        res.sendStatus(404);
    }
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsaUNBQW9DO0FBQ3BDLElBQU0sTUFBTSxHQUFtQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFLaEQsbUVBQWdFO0FBRWhFLHNDQUE0QztBQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFFekQsSUFBTSxZQUFZLEdBQ2QscUNBQWdCLENBQUMsVUFBVSxFQUFFO1NBQzVCLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBRyxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFFbEQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNELFlBQUcsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRTVFLFlBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzdELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBRXpDLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0FBRUwsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFDL0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMvQixFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxJQUFJLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVGLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEIsWUFBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLEtBQUssT0FBQSxFQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixZQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEIsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9hcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBHRVQgc2Vuc29yIGRhdGEuXHJcbiAqL1xyXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3Qgcm91dGVyOiBleHByZXNzLlJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcbmltcG9ydCB7IFNlbnNvckxvZ2dlciB9IGZyb20gJy4uL3NlcnZpY2VzL3NlbnNvci1sb2dnZXInO1xyXG5cclxuaW1wb3J0IHsgU2Vuc29yU3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvc2Vuc29yLXN0YXRlJztcclxuXHJcbmltcG9ydCB7IFVTQlNlbnNvck1hbmFnZXIgfSBmcm9tICcuLi9tb2RlbHMvdXNiLXNlbnNvci1tYW5hZ2VyJztcclxuXHJcbmltcG9ydCB7IGxvZywgc2V0TGV2ZWwgfSBmcm9tICcuLy4uL2xvZ2dlcic7XHJcblxyXG5yb3V0ZXIuZ2V0KCcvJywgKF9yZXE6IGV4cHJlc3MuUmVxdWVzdCwgcmVzOiBleHByZXNzLlJlc3BvbnNlKSA9PiB7XHJcblxyXG4gICAgY29uc3Qgc2Vuc29yTG9nZ2VyID1cclxuICAgICAgICBVU0JTZW5zb3JNYW5hZ2VyLmdldExvZ2dlcnMoKVxyXG4gICAgICAgIC5maW5kKGxvZ2dlcj0+IGxvZ2dlci5nZXRTdGF0ZSAhPT0gdW5kZWZpbmVkKTtcclxuXHJcbiAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgaWYgKHNlbnNvckxvZ2dlcikge1xyXG4gICAgICAgIGNvbnN0IHNlbnNvckRhdGEgPSBzZW5zb3JMb2dnZXIuZ2V0U3RhdGUoKS5nZXRTZW5zb3JEYXRhKCk7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gL2FwaS5nZXQsIHN0YXRlOiAnLCBKU09OLnN0cmluZ2lmeShzZW5zb3JMb2dnZXIuZ2V0U3RhdGUoKSkpO1xyXG5cclxuICAgICAgICBsb2cuZGVidWcoJy0tLSAvYXBpLmdldCwgZGF0YTonLCBKU09OLnN0cmluZ2lmeShzZW5zb3JEYXRhKSk7XHJcbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkoc2Vuc29yRGF0YSkpO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzLnNlbmQoSlNPTi5zdHJpbmdpZnkoW10pKTtcclxuICAgICAgICBjb25zb2xlLmxvZygnLS0tIC9hcGkuZ2V0OicsIEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgICB9XHJcblxyXG59KTtcclxuXHJcbnJvdXRlci5wb3N0KCcvZGVidWcnLCAoX3JlcTogZXhwcmVzcy5SZXF1ZXN0LCByZXM6IGV4cHJlc3MuUmVzcG9uc2UpID0+IHtcclxuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XHJcbiAgICBjb25zdCBsZXZlbCA9IF9yZXEucXVlcnkubGV2ZWw7XHJcbiAgICBpZiAobGV2ZWwgJiYgKGxldmVsID09PSAnZGVidWcnIHx8IGxldmVsID09PSAnaW5mbycgfHwgbGV2ZWwgPT09ICd3YXJuJyB8fCBsZXZlbCA9PT0gJ2Vycm9yJykpIHtcclxuICAgICAgICBzZXRMZXZlbChsZXZlbCk7XHJcbiAgICAgICAgbG9nLmluZm8oJy9kZWJ1ZyBsb2cgbGV2ZWw6JywgbGV2ZWwpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtsZXZlbH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsb2cuaW5mbygnL2RlYnVnIGxvZyBsZXZlbCBub3Qgc2V0OicsIGxldmVsKTtcclxuICAgICAgICByZXMuc2VuZFN0YXR1cyg0MDQpO1xyXG4gICAgfVxyXG5cclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7XHJcblxyXG4iXX0=
