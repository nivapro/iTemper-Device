"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var router = express.Router();
var usb_sensor_manager_1 = require("../models/usb-sensor-manager");
var logger_1 = require("./../logger");
router.get('/', function (_req, res) {
    var sensorLogger = usb_sensor_manager_1.USBSensorManager.getLoggers()
        .find(function (logger) { return logger.getState !== undefined; });
    res.setHeader('Content-Type', 'application/json');
    if (sensorLogger) {
        var sensorData = sensorLogger.getState().getSensorData();
        logger_1.log.debug('--- /api.get, state: ', sensorLogger.getState());
        logger_1.log.debug('--- /api.get, data:', sensorData);
        res.status(200).send(JSON.stringify(sensorData));
    }
    else {
        res.status(200).send(JSON.stringify([]));
        console.log('--- /api.get:', JSON.stringify([]));
    }
});
router.post('/debug', function (_req, res) {
    res.setHeader('Content-Type', 'application/json');
    var level = _req.query.level;
    if (level && (level === 'debug' || level === 'info' || level === 'warn' || level === 'error')) {
        logger_1.setLevel(level);
        logger_1.log.info('/debug log level:', level);
        res.status(200).send({ level: level });
    }
    else {
        logger_1.log.info('/debug log level not set:', level);
        res.status(404).end();
    }
});
exports.default = router;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yb3V0ZXMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsaUNBQW9DO0FBQ3BDLElBQU0sTUFBTSxHQUFtQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFaEQsbUVBQWdFO0FBRWhFLHNDQUE0QztBQUU1QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFFekQsSUFBTSxZQUFZLEdBQ2QscUNBQWdCLENBQUMsVUFBVSxFQUFFO1NBQzVCLElBQUksQ0FBQyxVQUFBLE1BQU0sSUFBRyxPQUFBLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFFbEQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxJQUFJLFlBQVksRUFBRTtRQUNkLElBQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzRCxZQUFHLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBRTVELFlBQUcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0tBRXBEO1NBQU07UUFDSCxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3BEO0FBRUwsQ0FBQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQXFCLEVBQUUsR0FBcUI7SUFDL0QsR0FBRyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMvQixJQUFJLEtBQUssSUFBSSxDQUFDLEtBQUssS0FBSyxPQUFPLElBQUksS0FBSyxLQUFLLE1BQU0sSUFBSSxLQUFLLEtBQUssTUFBTSxJQUFJLEtBQUssS0FBSyxPQUFPLENBQUMsRUFBRTtRQUMzRixpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hCLFlBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLE9BQUEsRUFBQyxDQUFDLENBQUM7S0FDakM7U0FBTTtRQUNILFlBQUcsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUN6QjtBQUVMLENBQUMsQ0FBQyxDQUFDO0FBRUgsa0JBQWUsTUFBTSxDQUFDIiwiZmlsZSI6InJvdXRlcy9hcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBHRVQgc2Vuc29yIGRhdGEuXHJcbiAqL1xyXG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcclxuY29uc3Qgcm91dGVyOiBleHByZXNzLlJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XHJcblxyXG5pbXBvcnQgeyBVU0JTZW5zb3JNYW5hZ2VyIH0gZnJvbSAnLi4vbW9kZWxzL3VzYi1zZW5zb3ItbWFuYWdlcic7XHJcblxyXG5pbXBvcnQgeyBsb2csIHNldExldmVsIH0gZnJvbSAnLi8uLi9sb2dnZXInO1xyXG5cclxucm91dGVyLmdldCgnLycsIChfcmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG5cclxuICAgIGNvbnN0IHNlbnNvckxvZ2dlciA9XHJcbiAgICAgICAgVVNCU2Vuc29yTWFuYWdlci5nZXRMb2dnZXJzKClcclxuICAgICAgICAuZmluZChsb2dnZXI9PiBsb2dnZXIuZ2V0U3RhdGUgIT09IHVuZGVmaW5lZCk7XHJcblxyXG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAgIGlmIChzZW5zb3JMb2dnZXIpIHtcclxuICAgICAgICBjb25zdCBzZW5zb3JEYXRhID0gc2Vuc29yTG9nZ2VyLmdldFN0YXRlKCkuZ2V0U2Vuc29yRGF0YSgpO1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIC9hcGkuZ2V0LCBzdGF0ZTogJywgc2Vuc29yTG9nZ2VyLmdldFN0YXRlKCkpO1xyXG5cclxuICAgICAgICBsb2cuZGVidWcoJy0tLSAvYXBpLmdldCwgZGF0YTonLCBzZW5zb3JEYXRhKTtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChKU09OLnN0cmluZ2lmeShzZW5zb3JEYXRhKSk7XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuc2VuZChKU09OLnN0cmluZ2lmeShbXSkpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCctLS0gL2FwaS5nZXQ6JywgSlNPTi5zdHJpbmdpZnkoW10pKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxucm91dGVyLnBvc3QoJy9kZWJ1ZycsIChfcmVxOiBleHByZXNzLlJlcXVlc3QsIHJlczogZXhwcmVzcy5SZXNwb25zZSkgPT4ge1xyXG4gICAgcmVzLnNldEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcclxuICAgIGNvbnN0IGxldmVsID0gX3JlcS5xdWVyeS5sZXZlbDtcclxuICAgIGlmIChsZXZlbCAmJiAobGV2ZWwgPT09ICdkZWJ1ZycgfHwgbGV2ZWwgPT09ICdpbmZvJyB8fCBsZXZlbCA9PT0gJ3dhcm4nIHx8IGxldmVsID09PSAnZXJyb3InKSkge1xyXG4gICAgICAgIHNldExldmVsKGxldmVsKTtcclxuICAgICAgICBsb2cuaW5mbygnL2RlYnVnIGxvZyBsZXZlbDonLCBsZXZlbCk7XHJcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoe2xldmVsfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxvZy5pbmZvKCcvZGVidWcgbG9nIGxldmVsIG5vdCBzZXQ6JywgbGV2ZWwpO1xyXG4gICAgICAgIHJlcy5zdGF0dXMoNDA0KS5lbmQoKTtcclxuICAgIH1cclxuXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xyXG5cclxuIl19
