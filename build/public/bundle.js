(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
init();
function init() {
    initMenu();
    openSection('sensorSection');
    const monitorBtn = document.getElementById('monitor');
    on('click', monitorBtn, () => { monitor(); });
}
function initMenu() {
    const menu = document.getElementById('menu');
    console.log('initMenu()');
    menu.appendChild(menuItem('Sensors', 'sensorSection'));
    menu.appendChild(menuItem('Settings', 'settingsSection'));
}
function menuItem(name, sectionId) {
    console.log('menuItem: name=%s, sectionId=%s', name, sectionId);
    const li = document.createElement('li');
    const a = document.createElement('a');
    a.innerHTML = name;
    on('click', a, () => { openSection(sectionId); });
    li.appendChild(a);
    return li;
}
function on(event, element, fn) {
    if (element) {
        console.log('on %s: add event listener', event);
        element.addEventListener(event, fn);
    }
}
function openSection(id) {
    console.log('openSection: ', id);
    closeActiveSections();
    const section = document.getElementById(id);
    if (section) {
        console.log('openSection: %s', id);
        section.style.display = 'block';
        section.classList.add('active');
    }
    else {
        console.log('openSection: section %s not found', id);
    }
}
function closeActiveSections() {
    const activeItems = document.getElementsByClassName('active');
    for (let index = 0; index < activeItems.length; index++) {
        const section = activeItems[index];
        section.classList.remove('active');
        section.setAttribute('style', 'display:none');
    }
}
const sensors = [];
// let settings = [];
const url = 'ws://' + document.domain;
let socket = new WebSocket(url);
socket.onopen = function () {
    setConnectionStatus(true);
    socket.send(JSON.stringify({ command: 'getSensors' }));
    socket.send(JSON.stringify({ command: 'getSettings' }));
};
socket.onmessage = function (event) {
    setConnectionStatus(true);
    const msg = JSON.parse(event.data);
    switch (msg.command) {
        case 'sensors':
            receiveSensors(msg.data);
            if (!isMonitoring) {
                startMonitor(sensors);
            }
            break;
        case 'settings':
            receiveSettings(msg.data);
            break;
        case 'log':
            log(msg.data);
            break;
    }
};
socket.onclose = function () {
    setConnectionStatus(false);
    clearTimeout(logTimer);
    logTimer = setInterval(clearSensorValue, 5000);
};
socket.onerror = function () {
    setConnectionStatus(false);
    clearTimeout(logTimer);
    logTimer = setInterval(clearSensorValue, 5000);
};
function sensorName(desc) {
    return desc.SN + ', port ' + desc.port;
}
function sensorId(desc) {
    const sn = desc.SN.replace(' ', desc.SN);
    const id = desc.SN.replace(' ', desc.SN) + '-' + desc.port;
    return id;
}
function receiveSensors(sensors) {
    const section = document.getElementById('sensorSection');
    for (const sensor of sensors) {
        const article = document.createElement('article');
        const heading = document.createElement('h3');
        heading.id = sensorId(sensor.desc) + '-value';
        article.appendChild(heading);
        const desc = document.createElement('p');
        desc.id = sensorId(sensor.desc);
        article.appendChild(desc);
        if (section) {
            section.appendChild(article);
        }
    }
    log(sensors);
}
let isMonitoring = false;
function setMonitoringButton() {
    const button = document.getElementById('monitor');
    if (!button) {
        return;
    }
    if (isMonitoring) {
        button.innerHTML = 'Stop monitor';
        button.classList.add('isMonitoring');
    }
    else {
        button.innerHTML = 'Start Monitor';
        button.classList.remove('isMonitoring');
    }
}
function startMonitor(sensors) {
    isMonitoring = true;
    setMonitoringButton();
    const command = 'startMonitor';
    const data = [];
    for (const sensor of sensors) {
        data.push(sensor.desc);
    }
    socket.send(JSON.stringify({ command, data }));
}
function stopMonitor(sensors) {
    isMonitoring = false;
    setMonitoringButton();
    const command = 'stopMonitor';
    const data = [];
    for (const sensor of sensors) {
        data.push(sensor.desc);
    }
    socket.send(JSON.stringify({ command, data }));
}
let logTimer;
function log(sensorData) {
    for (const sensor of sensorData) {
        const log = document.getElementById(sensorId(sensor.desc) + '-value');
        if (log) {
            const date = new Date(sensor.samples[0].date);
            const value = sensor.samples[0].value;
            log.innerHTML = value + ' °C';
        }
        const desc = document.getElementById(sensorId(sensor.desc));
        if (desc) {
            const date = new Date(sensor.samples[0].date);
            const value = sensor.samples[0].value;
            desc.innerHTML = 'by ' + sensorName(sensor.desc) + ': ' +
                date.toLocaleDateString() + ', ' + date.toLocaleTimeString();
        }
        clearTimeout(logTimer);
        logTimer = setInterval(clearSensorValue, 3000);
    }
}
class HTMLSetting {
    constructor(setting) {
        this.name = setting.name;
        this.label = setting.label;
        this.value = setting.value;
        this.defaultValue = setting.defaultValue;
        this.text = setting.text;
        this.readonly = setting.readonly;
        this.input = document.getElementById(name + 'value');
        this.backstore = this.value.toString();
        this.editBtn = document.getElementById(name + 'edit');
        this.SaveBtn = document.getElementById(name + 'save');
    }
    static create(setting) {
        if (!HTMLSetting.has(setting.name)) {
            const newSetting = new HTMLSetting(setting);
            HTMLSetting.settings.push(newSetting);
            return newSetting;
        }
        else {
            console.error('HTMLSetting.create: setting exists ', setting.name);
            throw Error();
        }
    }
    static find(name) {
        for (const setting of HTMLSetting.settings) {
            if (setting.name === name) {
                return setting;
            }
        }
        console.error('Setting.find: setting "%s" not found', name);
        console.log('HTMLSetting.get: length=', HTMLSetting.settings.length);
        throw Error();
    }
    static has(name) {
        for (const setting of HTMLSetting.settings) {
            if (setting.name === name) {
                return true;
            }
        }
        return false;
    }
    editSetting() {
        this.backstore = this.input.value;
        this.input.readOnly = true;
        this.input.classList.remove('settingReadonly');
        this.input.classList.add('settingEdit');
        this.editBtn.innerHTML = 'Avbryt';
        this.editBtn.classList.remove('settingReadonly');
        this.editBtn.classList.add('settingEdit');
        this.SaveBtn.setAttribute('style', 'display:block');
    }
    readonlySetting() {
        this.input.value = this.backstore;
        this.input.readOnly = false;
        this.input.classList.remove('settingEdit');
        this.input.classList.add('settingReadonly');
        this.editBtn.innerHTML = 'Ändra';
        this.editBtn.classList.remove('settingEdit');
        this.editBtn.classList.add('settingReadonly');
        this.SaveBtn.setAttribute('style', 'display:none');
    }
    saveSetting() {
        if (this.backstore !== this.input.value) {
            this.backstore = this.input.value;
        }
        this.readonlySetting();
    }
}
HTMLSetting.settings = [];
function addSetting(setting, section) {
    console.log('addSetting: ' + setting.name);
    // Get the contents of the template
    const template = document.getElementById('template-setting');
    if (!template) {
        console.error('addSetting: template missing');
        return;
    }
    const templateHtml = template.innerHTML;
    // replace placeholder tags
    // with actual data, and generate final HTML
    const html = templateHtml.replace(/{{name}}/g, setting.name)
        .replace(/{{label}}/g, setting.label)
        .replace(/{{text}}/g, setting.text)
        .replace(/{{value}}/g, setting.value.toString());
    const article = document.createElement('article');
    article.innerHTML = html;
    section.appendChild(article);
    const editBtn = document.getElementById(setting.name + 'edit');
    const saveBtn = document.getElementById(setting.name + 'save');
    if (setting.readonly) {
        editBtn.style.display = 'none';
        saveBtn.style.display = 'none';
    }
    else {
        on('click', editBtn, () => {
            clickedEdit(setting.name);
        });
        on('click', saveBtn, () => {
            clickedSaved(setting.name);
        });
    }
    const settingDOM = HTMLSetting.create(setting);
}
function updateSetting(setting) {
    console.log('updateSetting: ' + setting.name);
    const input = document.getElementById(setting.name + 'value');
    const readonly = input.readOnly;
    input.readOnly = false;
    input.value = setting.value.toString();
    input.readOnly = readonly;
}
function editSetting(name) {
    const input = document.getElementById(name + 'value');
    const editBtn = document.getElementById(name + 'edit');
    const SaveBtn = document.getElementById(name + 'save');
    input.readOnly = false;
    input.classList.remove('settingReadonly');
    input.classList.add('settingEdit');
    editBtn.innerHTML = 'Cancel';
    SaveBtn.setAttribute('style', 'display:block');
}
function clickedEdit(name) {
    const setting = HTMLSetting.find(name);
    const input = document.getElementById(name + 'value');
    if (input.readOnly) {
        console.log('edit:', name);
        editSetting(name);
    }
    else {
        console.log('cancel:', name);
        readonlySetting(name);
    }
}
function clickedSaved(name) {
    console.log('clickedSaved:');
    const input = document.getElementById(name + 'value');
    const SaveBtn = document.getElementById(name + 'save');
    const setting = HTMLSetting.find(name);
    if (!input || !setting || !SaveBtn) {
        console.error('clickedSaved: could not find all HTML element');
        return;
    }
    setting.backstore = input.value;
    setting.value = input.value;
    SaveBtn.setAttribute('style', 'display:none');
    readonlySetting(name);
    socket.send(JSON.stringify({ command: 'saveSetting', data: setting }));
}
function readonlySetting(name) {
    const input = document.getElementById(name + 'value');
    const editBtn = document.getElementById(name + 'edit');
    const SaveBtn = document.getElementById(name + 'save');
    const setting = HTMLSetting.find(name);
    input.classList.remove('settingEdit');
    input.classList.add('settingReadonly');
    editBtn.innerHTML = 'Edit';
    editBtn.blur();
    input.value = setting.backstore;
    input.readOnly = true;
    SaveBtn.setAttribute('style', 'display:none');
}
function receiveSettings(allSettings) {
    const section = document.getElementById('settingsSection');
    for (const setting of allSettings) {
        if (HTMLSetting.has(setting.name)) {
            updateSetting(setting);
        }
        else {
            addSetting(setting, section);
        }
    }
}
function setConnectionStatus(connected) {
    const status = document.getElementById('connection');
    isMonitoring = connected && isMonitoring;
    setMonitoringButton();
    if (status && connected && isMonitoring) {
        status.innerHTML = ' (live)';
    }
    else if (status && connected) {
        status.innerHTML = ' (Connected)';
    }
    else if (status) {
        status.innerHTML = ' (Disconnected)';
    }
}
function monitor() {
    if (isMonitoring) {
        stopMonitor(sensors);
    }
    else {
        startMonitor(sensors);
    }
}
function clearSensorValue() {
    for (const sensor of sensors) {
        const sampleDate = sensor.samples[0].date;
        if (Date.now() - sampleDate > 60000) {
            const sensorValue = document.getElementById(sensorId(sensor.desc));
            if (sensorValue) {
                sensorValue.innerHTML = 'No sensor data received last 60 seconds';
            }
        }
    }
    setConnectionStatus(socket.readyState === socket.OPEN);
    if (socket.readyState === socket.CLOSED) {
        socket = new WebSocket(url);
    }
}
function round(value, precision) {
    //    precision || (precision = 1);
    const inverse = 1.0 / precision;
    return Math.round(value * inverse) / inverse;
}
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
