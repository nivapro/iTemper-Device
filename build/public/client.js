var sensors = [];
function setPage(name) {
    var page = document.getElementById('page');
    page.innerHTML = name;
}
setPage('Sensors');
function sensorName(descr) {
    return descr.SN + ', port ' + descr.port;
}
function sensorId(descr) {
    var sn = descr.SN.replace(' ', descr.SN);
    console.log(sn);
    var id = descr.SN.replace(' ', descr.SN) + '-' + descr.port;
    return id;
}
function listSensors(sensors) {
    for (var _i = 0, sensors_1 = sensors; _i < sensors_1.length; _i++) {
        var sensor = sensors_1[_i];
        var article = document.createElement('article');
        var heading = document.createElement('h3');
        heading.id = sensorId(sensor.descr) + '-value';
        article.appendChild(heading);
        var descr = document.createElement('p');
        descr.id = sensorId(sensor.descr);
        article.appendChild(descr);
        var section = document.getElementById('app');
        section.appendChild(article);
    }
    log(sensors);
}
var isMonitoring = false;
function setMonitoringButton() {
    var button = document.getElementById('monitor');
    if (isMonitoring) {
        button.innerHTML = 'Stop monitor';
    }
    else {
        button.innerHTML = 'Start Monitor';
    }
}
function startMonitor(sensors) {
    isMonitoring = true;
    setMonitoringButton();
    var descr = 'startMonitor';
    var data = [];
    for (var _i = 0, sensors_2 = sensors; _i < sensors_2.length; _i++) {
        var sensor = sensors_2[_i];
        data.push(sensor.descr);
    }
    socket.send(JSON.stringify({ descr: descr, data: data }));
}
function stopMonitor(sensors) {
    isMonitoring = false;
    setMonitoringButton();
    var descr = 'stopMonitor';
    var data = [];
    for (var _i = 0, sensors_3 = sensors; _i < sensors_3.length; _i++) {
        var sensor = sensors_3[_i];
        data.push(sensor.descr);
    }
    socket.send(JSON.stringify({ descr: descr, data: data }));
}
var logTimer;
function log(sensorData) {
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var sensor = sensorData_1[_i];
        var log_1 = document.getElementById(sensorId(sensor.descr) + '-value');
        if (log_1) {
            var date = new Date(sensor.samples[0].date);
            var value = sensor.samples[0].value;
            log_1.innerHTML = value + ' Â°C';
        }
        var descr = document.getElementById(sensorId(sensor.descr));
        if (descr) {
            var date = new Date(sensor.samples[0].date);
            var value = sensor.samples[0].value;
            descr.innerHTML = 'by ' + sensorName(sensor.descr) + ': ' +
                date.toLocaleDateString() + ', ' + date.toLocaleTimeString();
        }
        clearTimeout(logTimer);
        logTimer = setInterval(clearSensorValue, 5000);
    }
}
function settings(allSettings) {
    // TODO
}
function setConnectionStatus(connected) {
    var status = document.getElementById('connection');
    isMonitoring = connected && isMonitoring;
    setMonitoringButton();
    if (connected && isMonitoring) {
        status.innerHTML = ' (live)';
    }
    else if (connected) {
        status.innerHTML = ' (Connected)';
    }
    else {
        status.innerHTML = ' (Disconnected)';
    }
}
var url = 'ws://precision.vading.lan';
var socket = new WebSocket(url);
socket.onopen = function (e) {
    setConnectionStatus(true);
    socket.send(JSON.stringify({ descr: 'getSensors' }));
    socket.send(JSON.stringify({ descr: 'getSettings' }));
};
socket.onmessage = function (event) {
    setConnectionStatus(true);
    var msg = JSON.parse(event.data);
    switch (msg.descr) {
        case 'sensors':
            listSensors(msg.data);
            if (!isMonitoring) {
                startMonitor(sensors);
            }
            break;
        case 'settings':
            settings(msg.data);
            break;
        case 'log':
            log(msg.data);
            break;
    }
};
socket.onclose = function (event) {
    setConnectionStatus(false);
    clearTimeout(logTimer);
    logTimer = setInterval(clearSensorValue, 5000);
};
socket.onerror = function (error) {
    setConnectionStatus(false);
    clearTimeout(logTimer);
    logTimer = setInterval(clearSensorValue, 5000);
};
function monitor() {
    if (isMonitoring) {
        stopMonitor(sensors);
    }
    else {
        startMonitor(sensors);
    }
}
function clearSensorValue() {
    for (var _i = 0, sensors_4 = sensors; _i < sensors_4.length; _i++) {
        var sensor = sensors_4[_i];
        var sampleDate = sensor.samples[0].date;
        if (Date.now() - sampleDate > 60000) {
            var sensorValue = document.getElementById(sensorId(sensor));
            sensorValue.innerHTML = 'No sensor data received last 60 seconds';
        }
    }
    setConnectionStatus(socket.readyState === socket.OPEN);
    if (socket.readyState === socket.CLOSED) {
        socket = new WebSocket(url);
    }
}
function round(value, precision) {
    //    precision || (precision = 1);
    var inverse = 1.0 / precision;
    return Math.round(value * inverse) / inverse;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
