var flag = false;
var sensors = [{ descr: { SN: 'Temper 8', port: 0 } },
    { descr: { SN: 'Temper 8', port: 1 } },
    { descr: { SN: 'Temper Gold', port: 0 } }];
var sensorData = [{ descr: { SN: 'Temper 8', port: 0 }, samples: [{ value: 25.5, date: Date.now() }] },
    { descr: { SN: 'Temper 8', port: 1 }, samples: [{ value: 18.2, date: Date.now() + 5056 }] },
    { descr: { SN: 'Temper Gold', port: 0 }, samples: [{ value: 25.5, date: Date.now() + 4088 }] }];
var timer;
function message() {
    if (!flag) {
        flag = true;
        for (var sensor = 0; sensor < sensors.length; sensor++) {
            var article = document.createElement('article');
            var sensorName = sensors[sensor].descr.SN + ', port: ' + sensors[sensor].descr.port;
            var title = document.createElement('h2');
            title.innerHTML = sensorName;
            article.appendChild(title);
            var noSensorData = document.createElement('div');
            noSensorData.innerHTML = 'No sensor data';
            noSensorData.id = 'sensor-' + sensor;
            article.appendChild(noSensorData);
            var section = document.getElementById('sensors');
            section.appendChild(article);
        }
    }
    else {
        for (var sensor = 0; sensor < sensorData.length; sensor++) {
            var article = document.createElement('article');
            var sensorName = sensors[sensor].descr.SN + ', port: ' + sensors[sensor].descr.port;
            var title = document.createElement('h2');
            title.innerHTML = sensorName;
            article.appendChild(title);
            var sensorValue = document.getElementById('sensor-' + sensor);
            var date = new Date(Date.now() - Math.floor(Math.random() * 15000));
            var value = sensorData[sensor].samples[0].value + 5 * Math.random();
            sensorValue.innerHTML = value + ' Â°C, from: ' +
                date.toLocaleDateString() + ', ' + date.toLocaleTimeString();
        }
        clearTimeout(timer);
        timer = setInterval(clearSensorValue, 5000);
    }
}
function clearSensorValue() {
    for (var sensor = 0; sensor < sensorData.length; sensor++) {
        var sampleDate = sensorData[sensor].samples[0].date;
        if (Date.now() - sampleDate > 30000) {
            var sensorValue = document.getElementById('sensor-' + sensor);
            sensorValue.innerHTML = 'No sensor data received last 30 seconds';
        }
    }
}
function round(value, precision) {
    //    precision || (precision = 1);
    var inverse = 1.0 / precision;
    return Math.round(value * inverse) / inverse;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9icm93c2VyL2NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7QUFDakIsSUFBTSxPQUFPLEdBQUcsQ0FBSSxFQUFDLEtBQUssRUFBQyxFQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxFQUFDO0lBQ2hDLEVBQUMsS0FBSyxFQUFDLEVBQUMsRUFBRSxFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFDLEVBQUM7SUFDaEMsRUFBQyxLQUFLLEVBQUMsRUFBQyxFQUFFLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDLENBQUM7QUFDekQsSUFBSSxVQUFVLEdBQUcsQ0FBRyxFQUFDLEtBQUssRUFBQyxFQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxFQUFFLE9BQU8sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBQztJQUMzRSxFQUFDLEtBQUssRUFBQyxFQUFDLEVBQUUsRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxFQUFFLE9BQU8sRUFBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBQyxDQUFDLEVBQUM7SUFDakYsRUFBQyxLQUFLLEVBQUMsRUFBQyxFQUFFLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztBQUMxRyxJQUFJLEtBQUssQ0FBQztBQUNWO0lBQ0ks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SUFBSSxDQUFDO1FBQ3RELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFVBQVUsR0FBRyxLQUFLLEVBQUU7WUFDakMsSUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLENBQUM7WUFDaEUsV0FBVyxDQUFDLFNBQVMsR0FBRyx5Q0FBeUMsQ0FBQztTQUNyRTtLQUNKO0FBQ0wsQ0FBQztBQUVELGVBQWUsS0FBSyxFQUFFLFNBQVM7SUFDL0IsbUNBQW1DO0lBQy9CLElBQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUM7SUFDaEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7QUFDakQsQ0FBQyIsImZpbGUiOiJjbGllbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZmxhZyA9IGZhbHNlO1xyXG5jb25zdCBzZW5zb3JzID0gWyAgIHtkZXNjcjp7U046J1RlbXBlciA4JywgcG9ydDogMH19LFxyXG4gICAgICAgICAgICAgICAgICAgIHtkZXNjcjp7U046J1RlbXBlciA4JywgcG9ydDogMX19LFxyXG4gICAgICAgICAgICAgICAgICAgIHtkZXNjcjp7U046J1RlbXBlciBHb2xkJywgcG9ydDogMH19XTtcclxubGV0IHNlbnNvckRhdGEgPSBbICB7ZGVzY3I6e1NOOidUZW1wZXIgOCcsIHBvcnQ6IDB9LCBzYW1wbGVzOlt7dmFsdWU6IDI1LjUsIGRhdGU6RGF0ZS5ub3coKSB9XX0sXHJcbiAgICAgICAgICAgICAgICAgICAge2Rlc2NyOntTTjonVGVtcGVyIDgnLCBwb3J0OiAxfSwgc2FtcGxlczpbe3ZhbHVlOiAxOC4yLCBkYXRlOkRhdGUubm93KCkgKyA1MDU2fV19LFxyXG4gICAgICAgICAgICAgICAgICAgIHtkZXNjcjp7U046J1RlbXBlciBHb2xkJywgcG9ydDogMH0sIHNhbXBsZXM6W3t2YWx1ZTogMjUuNSwgZGF0ZTpEYXRlLm5vdygpICsgNDA4OH1dfV07XHJcbmxldCB0aW1lcjtcclxuZnVuY3Rpb24gbWVzc2FnZSgpIHtcclxuICAgIGlmICghZmxhZykge1xyXG4gICAgICAgIGZsYWcgPSB0cnVlO1xyXG4gICAgICAgIGZvciAobGV0IHNlbnNvciA9IDA7IHNlbnNvciA8IHNlbnNvcnMubGVuZ3RoOyBzZW5zb3IrKykge1xyXG4gICAgICAgICAgICBjb25zdCBhcnRpY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXJ0aWNsZScpO1xyXG4gICAgICAgICAgICBjb25zdCBzZW5zb3JOYW1lID0gc2Vuc29yc1tzZW5zb3JdLmRlc2NyLlNOICsgJywgcG9ydDogJyAgKyBzZW5zb3JzW3NlbnNvcl0uZGVzY3IucG9ydDtcclxuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgICAgICAgICB0aXRsZS5pbm5lckhUTUwgPSBzZW5zb3JOYW1lO1xyXG4gICAgICAgICAgICBhcnRpY2xlLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuICAgICAgICAgICAgY29uc3Qgbm9TZW5zb3JEYXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIG5vU2Vuc29yRGF0YS5pbm5lckhUTUwgPSAnTm8gc2Vuc29yIGRhdGEnO1xyXG4gICAgICAgICAgICBub1NlbnNvckRhdGEuaWQgPSAnc2Vuc29yLScgKyBzZW5zb3I7XHJcbiAgICAgICAgICAgIGFydGljbGUuYXBwZW5kQ2hpbGQobm9TZW5zb3JEYXRhKTtcclxuICAgICAgICAgICAgY29uc3Qgc2VjdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZW5zb3JzJyk7XHJcbiAgICAgICAgICAgIHNlY3Rpb24uYXBwZW5kQ2hpbGQoYXJ0aWNsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGxldCBzZW5zb3IgPSAwOyBzZW5zb3IgPCBzZW5zb3JEYXRhLmxlbmd0aDsgc2Vuc29yKyspIHtcclxuICAgICAgICAgICAgY29uc3QgYXJ0aWNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2FydGljbGUnKTtcclxuICAgICAgICAgICAgY29uc3Qgc2Vuc29yTmFtZSA9IHNlbnNvcnNbc2Vuc29yXS5kZXNjci5TTiArICcsIHBvcnQ6ICcgKyBzZW5zb3JzW3NlbnNvcl0uZGVzY3IucG9ydDtcclxuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMicpO1xyXG4gICAgICAgICAgICB0aXRsZS5pbm5lckhUTUwgPSBzZW5zb3JOYW1lO1xyXG4gICAgICAgICAgICBhcnRpY2xlLmFwcGVuZENoaWxkKHRpdGxlKTtcclxuICAgICAgICAgICAgY29uc3Qgc2Vuc29yVmFsdWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Vuc29yLScgKyBzZW5zb3IpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE1MDAwKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2Vuc29yRGF0YVtzZW5zb3JdLnNhbXBsZXNbMF0udmFsdWUgKyA1ICogTWF0aC5yYW5kb20oKTtcclxuICAgICAgICAgICAgc2Vuc29yVmFsdWUuaW5uZXJIVE1MID0gdmFsdWUgKyAnIMKwQywgZnJvbTogJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgKyAnLCAnICArIGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcbiAgICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChjbGVhclNlbnNvclZhbHVlLCA1MDAwKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2xlYXJTZW5zb3JWYWx1ZSgpIHtcclxuICAgIGZvciAobGV0IHNlbnNvciA9IDA7IHNlbnNvciA8IHNlbnNvckRhdGEubGVuZ3RoOyBzZW5zb3IrKykge1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZURhdGUgPSBzZW5zb3JEYXRhW3NlbnNvcl0uc2FtcGxlc1swXS5kYXRlO1xyXG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc2FtcGxlRGF0ZSA+IDMwMDAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbnNvclZhbHVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbnNvci0nICsgc2Vuc29yKTtcclxuICAgICAgICAgICAgc2Vuc29yVmFsdWUuaW5uZXJIVE1MID0gJ05vIHNlbnNvciBkYXRhIHJlY2VpdmVkIGxhc3QgMzAgc2Vjb25kcyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByb3VuZCh2YWx1ZSwgcHJlY2lzaW9uKSB7XHJcbi8vICAgIHByZWNpc2lvbiB8fCAocHJlY2lzaW9uID0gMSk7XHJcbiAgICBjb25zdCBpbnZlcnNlID0gMS4wIC8gcHJlY2lzaW9uO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiBpbnZlcnNlKSAvIGludmVyc2U7XHJcbn1cclxuIl19
