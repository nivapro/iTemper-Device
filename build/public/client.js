var sensors = [{ descr: { SN: 'Temper 8', port: 0 }, samples: [{ value: 25.5, date: Date.now() }] },
    { descr: { SN: 'Temper 8', port: 1 }, samples: [{ value: 18.2, date: Date.now() + 5056 }] },
    { descr: { SN: 'Temper Gold', port: 0 }, samples: [{ value: 25.5, date: Date.now() + 4088 }] }];
function setPage(name) {
    var page = document.getElementById('page');
    page.innerHTML = name;
}
setPage('Sensors');
function sensorName(descr) {
    return descr.SN + ', port: ' + descr.port;
}
function sensorId(descr) {
    var sn = descr.SN.replace(' ', descr.SN);
    console.log(sn);
    var id = descr.SN.replace(' ', descr.SN) + '-' + descr.port;
    return id;
}
function listSensors(sensors) {
    for (var _i = 0, sensors_1 = sensors; _i < sensors_1.length; _i++) {
        var sensor = sensors_1[_i];
        var article = document.createElement('article');
        var title = document.createElement('h3');
        title.innerHTML = sensorName(sensor.descr);
        article.appendChild(title);
        var sensorValue = document.createElement('div');
        sensorValue.innerHTML = 'No sensor data';
        sensorValue.id = sensorId(sensor.descr);
        article.appendChild(sensorValue);
        var section = document.getElementById('app');
        section.appendChild(article);
    }
    log(sensors);
}
var isMonitoring = false;
function setMonitoringButton() {
    var button = document.getElementById('monitor');
    if (isMonitoring) {
        button.innerHTML = 'Stop';
    }
    else {
        button.innerHTML = 'Monitor';
    }
}
function startMonitor(sensors) {
    var descr = 'startMonitor';
    var data = [];
    for (var _i = 0, sensors_2 = sensors; _i < sensors_2.length; _i++) {
        var sensor = sensors_2[_i];
        data.push(sensor.descr);
    }
    socket.send(JSON.stringify({ descr: descr, data: data }));
}
function stopMonitor(sensors) {
    isMonitoring = false;
    setMonitoringButton();
    var descr = 'stopMonitor';
    var data = [];
    for (var _i = 0, sensors_3 = sensors; _i < sensors_3.length; _i++) {
        var sensor = sensors_3[_i];
        data.push(sensor.descr);
    }
    socket.send(JSON.stringify({ descr: descr, data: data }));
}
var logTimer;
function log(sensorData) {
    isMonitoring = true;
    setMonitoringButton();
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var sensor = sensorData_1[_i];
        var log_1 = document.getElementById(sensorId(sensor.descr));
        if (log_1) {
            var date = new Date(sensor.samples[0].date);
            var value = sensor.samples[0].value;
            log_1.innerHTML = value + ' Â°C, from: ' +
                date.toLocaleDateString() + ', ' + date.toLocaleTimeString();
        }
    }
    clearTimeout(logTimer);
    logTimer = setInterval(clearSensorValue, 5000);
}
function settings(allSettings) {
    // TODO
}
function setConnectionStatus(connected) {
    if (connected) {
        var status_1 = document.getElementById('connection');
        status_1.innerHTML = ' (live)';
    }
    else {
        var status_2 = document.getElementById('connection');
        status_2.innerHTML = ' (Disconnected)';
    }
}
var url = 'ws://precision.vading.lan';
var socket = new WebSocket(url);
socket.onopen = function (e) {
    setConnectionStatus(true);
    socket.send(JSON.stringify({ descr: 'getSensors' }));
    socket.send(JSON.stringify({ descr: 'getSettings' }));
};
socket.onmessage = function (event) {
    setConnectionStatus(true);
    var msg = JSON.parse(event.data);
    switch (msg.descr) {
        case 'sensors':
            listSensors(msg.data);
            if (!isMonitoring) {
                startMonitor(sensors);
            }
            break;
        case 'settings':
            settings(msg.data);
            break;
        case 'log':
            log(msg.data);
            break;
    }
};
socket.onclose = function (event) {
    setConnectionStatus(false);
    if (event.wasClean) {
        alert("[close] Connection closed cleanly, code=" + event.code + " reason=" + event.reason);
    }
    else {
        // e.g. server process killed or network down
        // event.code is usually 1006 in this case
        alert('[close] Connection died');
    }
};
socket.onerror = function (error) {
    setConnectionStatus(false);
    // alert(`[error] ${error.message}`);
};
function simulateMonitoring(sensors) {
    for (var _i = 0, sensors_4 = sensors; _i < sensors_4.length; _i++) {
        var sensor = sensors_4[_i];
        // simulate timestamp
        var date = new Date(Date.now() - Math.floor(Math.random() * 15000));
        sensor.samples[0].date = date.getMilliseconds();
        // simulate new sensor reading
        var value = sensor.samples[0].value + 5 * Math.random();
        sensor.samples[0].value = value;
    }
}
function monitor() {
    if (isMonitoring) {
        stopMonitor(sensors);
    }
    else {
        startMonitor(sensors);
    }
}
function clearSensorValue() {
    for (var _i = 0, sensors_5 = sensors; _i < sensors_5.length; _i++) {
        var sensor = sensors_5[_i];
        var sampleDate = sensor.samples[0].date;
        if (Date.now() - sampleDate > 7 * 24 * 3600000) {
            var sensorValue = document.getElementById(sensorId(sensor));
            sensorValue.innerHTML = 'No sensor data received last 15 seconds';
        }
    }
    setConnectionStatus(socket.readyState === socket.OPEN);
    if (socket.readyState === socket.CLOSED) {
        socket = new WebSocket(url);
    }
}
function round(value, precision) {
    //    precision || (precision = 1);
    var inverse = 1.0 / precision;
    return Math.round(value * inverse) / inverse;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
