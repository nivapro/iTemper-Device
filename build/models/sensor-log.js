"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var logger_1 = require("./../logger");
var SensorLog = (function () {
    function SensorLog(attr, state) {
        this.timestamp = 0;
        this.logging = false;
        this.MAX_TIME_DIFF = 5 * 60000;
        logger_1.log.debug('--- SensorStateLogger:', JSON.stringify(state));
        this.timestamp = Date.now();
        this.logging = false;
        this.attr = attr;
        this.state = state;
        var dataFilter = {
            resolution: this.attr.resolution,
            maxTimeDiff: this.MAX_TIME_DIFF
        };
        this.state.addSensorDataListener(this.onSensorDataReceived.bind(this), dataFilter);
        this.axios = axios_1.default.create({
            baseURL: 'https://test.itemper.io/api/v1/sensors',
            headers: { 'Content-Type': 'application/json' },
        });
    }
    SensorLog.prototype.getAttr = function () {
        return this.attr;
    };
    SensorLog.prototype.getState = function () {
        return this.state;
    };
    SensorLog.prototype.startLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.startLogging');
        this.logging = true;
    };
    SensorLog.prototype.stopLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.stopLogging');
        this.logging = false;
    };
    SensorLog.prototype.onSensorDataReceived = function (data) {
        if (this.logging) {
            var descr = { SN: this.attr.SN, port: data.getPort() };
            var samples = [{ date: data.timestamp(), value: data.getValue() }];
            var sensorLog_1 = { descr: descr, samples: samples };
            var diff_1 = data.timestamp() - this.timestamp;
            this.timestamp = data.timestamp();
            var url_1 = '/' + descr.SN + '/' + descr.port;
            logger_1.log.debug('URL: ', url_1);
            this.axios.post(url_1, sensorLog_1)
                .then(function (res) {
                logger_1.log.info('SensorLogger axios.post ' + url_1 + ' ' + res.statusText +
                    ' value: ' + JSON.stringify(sensorLog_1), ' ms: ', diff_1);
            })
                .catch(function (e) {
                logger_1.log.error('catch error', e);
            });
        }
    };
    return SensorLog;
}());
exports.SensorLog = SensorLog;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvc2Vuc29yLWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUE2QztBQUs3QyxzQ0FBa0M7QUFFbEM7SUFTSSxtQkFBWSxJQUFzQixFQUFFLEtBQWtCO1FBUDlDLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFHdEIsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUN6QixrQkFBYSxHQUFHLENBQUMsR0FBQyxLQUFNLENBQUM7UUFJN0IsWUFBRyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBTSxVQUFVLEdBQUc7WUFDZixVQUFVLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQ2hDLFdBQVcsRUFBRSxJQUFJLENBQUMsYUFBYTtTQUFDLENBQUM7UUFFckMsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRW5GLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztZQUN0QixPQUFPLEVBQUUsd0NBQXdDO1lBQ2pELE9BQU8sRUFBRSxFQUFDLGNBQWMsRUFBRSxrQkFBa0IsRUFBQztTQUM5QyxDQUFDLENBQUM7SUFDVCxDQUFDO0lBRU0sMkJBQU8sR0FBZDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDTSw0QkFBUSxHQUFmO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNNLGdDQUFZLEdBQW5CO1FBQ0ksWUFBRyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFTSwrQkFBVyxHQUFsQjtRQUNJLFlBQUcsQ0FBQyxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN6QixDQUFDO0lBRU8sd0NBQW9CLEdBQTVCLFVBQTZCLElBQWdCO1FBQ3pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBTSxLQUFLLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBQyxDQUFDO1lBQ3hELElBQU0sT0FBTyxHQUFHLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxDQUFDO1lBQ25FLElBQU0sV0FBUyxHQUFHLEVBQUUsS0FBSyxPQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQztZQUNyQyxJQUFNLE1BQUksR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUMvQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUVsQyxJQUFNLEtBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUUsS0FBSyxDQUFDLElBQUksQ0FBQztZQUM3QyxZQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFHLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFHLEVBQUUsV0FBUyxDQUFDO2lCQUM5QixJQUFJLENBQUUsVUFBUyxHQUFHO2dCQUNmLFlBQUcsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEdBQUcsS0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVTtvQkFDNUQsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLE1BQUksQ0FBQyxDQUFDO1lBQy9ELENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsVUFBUyxDQUFDO2dCQUNiLFlBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztJQUNMLENBQUM7SUFDTCxnQkFBQztBQUFELENBaEVBLEFBZ0VDLElBQUE7QUFoRVksOEJBQVMiLCJmaWxlIjoibW9kZWxzL3NlbnNvci1sb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgU2Vuc29yQXR0cmlidXRlcyB9IGZyb20gJy4uL21vZGVscy9zZW5zb3ItYXR0cmlidXRlcyc7XHJcbmltcG9ydCB7IFNlbnNvckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvc2Vuc29yLWRhdGEnO1xyXG5pbXBvcnQgeyBTZW5zb3JTdGF0ZSB9IGZyb20gJy4uL21vZGVscy9zZW5zb3Itc3RhdGUnO1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi8uLi9sb2dnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbnNvckxvZyB7XHJcbiAgICBwcml2YXRlIGF0dHI6IFNlbnNvckF0dHJpYnV0ZXM7XHJcbiAgICBwcml2YXRlIHRpbWVzdGFtcDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgc3RhdGU6IFNlbnNvclN0YXRlO1xyXG5cclxuICAgIHByaXZhdGUgbG9nZ2luZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBNQVhfVElNRV9ESUZGID0gNSo2MF8wMDA7XHJcbiAgICBwcml2YXRlIGF4aW9zOiBBeGlvc0luc3RhbmNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGF0dHI6IFNlbnNvckF0dHJpYnV0ZXMsIHN0YXRlOiBTZW5zb3JTdGF0ZSkge1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIFNlbnNvclN0YXRlTG9nZ2VyOicsIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXR0ciA9IGF0dHI7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhRmlsdGVyID0ge1xyXG4gICAgICAgICAgICByZXNvbHV0aW9uOiB0aGlzLmF0dHIucmVzb2x1dGlvbixcclxuICAgICAgICAgICAgbWF4VGltZURpZmY6IHRoaXMuTUFYX1RJTUVfRElGRn07XHJcblxyXG4gICAgICAgIHRoaXMuc3RhdGUuYWRkU2Vuc29yRGF0YUxpc3RlbmVyKHRoaXMub25TZW5zb3JEYXRhUmVjZWl2ZWQuYmluZCh0aGlzKSwgZGF0YUZpbHRlcik7XHJcblxyXG4gICAgICAgIHRoaXMuYXhpb3MgPSBheGlvcy5jcmVhdGUoe1xyXG4gICAgICAgICAgICBiYXNlVVJMOiAnaHR0cHM6Ly90ZXN0Lml0ZW1wZXIuaW8vYXBpL3YxL3NlbnNvcnMnLFxyXG4gICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sXHJcbiAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QXR0cigpOiBTZW5zb3JBdHRyaWJ1dGVzIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hdHRyO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldFN0YXRlKCk6IFNlbnNvclN0YXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGFydExvZ2dpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gU2Vuc29yU3RhdGVMb2dnZXIuc3RhcnRMb2dnaW5nJyk7XHJcbiAgICAgICAgdGhpcy5sb2dnaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RvcExvZ2dpbmcoKTogdm9pZCB7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gU2Vuc29yU3RhdGVMb2dnZXIuc3RvcExvZ2dpbmcnKTtcclxuICAgICAgICB0aGlzLmxvZ2dpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU2Vuc29yRGF0YVJlY2VpdmVkKGRhdGE6IFNlbnNvckRhdGEpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5sb2dnaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyID0geyBTTjogdGhpcy5hdHRyLlNOLCBwb3J0OiBkYXRhLmdldFBvcnQoKX07XHJcbiAgICAgICAgICAgIGNvbnN0IHNhbXBsZXMgPSBbe2RhdGU6IGRhdGEudGltZXN0YW1wKCksIHZhbHVlOiBkYXRhLmdldFZhbHVlKCl9XTtcclxuICAgICAgICAgICAgY29uc3Qgc2Vuc29yTG9nID0geyBkZXNjciwgc2FtcGxlcyB9O1xyXG4gICAgICAgICAgICBjb25zdCBkaWZmID0gZGF0YS50aW1lc3RhbXAoKSAtIHRoaXMudGltZXN0YW1wO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IGRhdGEudGltZXN0YW1wKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1cmwgPSAnLycgKyBkZXNjci5TTiArICcvJysgZGVzY3IucG9ydDtcclxuICAgICAgICAgICAgbG9nLmRlYnVnKCdVUkw6ICcsIHVybCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXhpb3MucG9zdCh1cmwsIHNlbnNvckxvZylcclxuICAgICAgICAgICAgLnRoZW4gKGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAgICAgICAgICAgbG9nLmluZm8oJ1NlbnNvckxvZ2dlciBheGlvcy5wb3N0ICcgKyB1cmwgKyAnICcgKyByZXMuc3RhdHVzVGV4dCArXHJcbiAgICAgICAgICAgICAgICAgICAgJyB2YWx1ZTogJyArIEpTT04uc3RyaW5naWZ5KHNlbnNvckxvZyksICcgbXM6ICcsIGRpZmYpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdjYXRjaCBlcnJvcicsIGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19
