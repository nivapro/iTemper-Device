"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var logger_1 = require("./../logger");
var SensorLog = (function () {
    function SensorLog(attr, state) {
        this.timestamp = 0;
        this.logging = false;
        this.MAX_TIME_DIFF = 5 * 60000;
        logger_1.log.debug('--- SensorStateLogger:', state);
        this.timestamp = Date.now();
        this.logging = false;
        this.attr = attr;
        this.state = state;
        var dataFilter = {
            resolution: this.attr.resolution,
            maxTimeDiff: this.MAX_TIME_DIFF
        };
        this.state.addSensorDataListener(this.onSensorDataReceived.bind(this), dataFilter);
        this.axios = axios_1.default.create({
            baseURL: 'https://test.itemper.io/api/v1/sensors',
            headers: { 'Content-Type': 'application/json' },
        });
    }
    SensorLog.prototype.getAttr = function () {
        return this.attr;
    };
    SensorLog.prototype.getState = function () {
        return this.state;
    };
    SensorLog.prototype.startLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.startLogging');
        this.logging = true;
    };
    SensorLog.prototype.stopLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.stopLogging');
        this.logging = false;
    };
    SensorLog.prototype.onSensorDataReceived = function (data) {
        if (this.logging) {
            var descr = { SN: this.attr.SN, port: data.getPort() };
            var samples = [{ date: data.timestamp(), value: data.getValue() }];
            var sensorLog_1 = { descr: descr, samples: samples };
            var diff_1 = data.timestamp() - this.timestamp;
            this.timestamp = data.timestamp();
            var url_1 = '/' + descr.SN + '/' + descr.port;
            logger_1.log.debug('URL: ', url_1);
            this.axios.post(url_1, sensorLog_1)
                .then(function (res) {
                logger_1.log.info('SensorLogger axios.post ' + url_1 + ' ' + res.statusText +
                    ' res.data: ' + JSON.stringify(sensorLog_1) + ' ms: ' + diff_1 +
                    ' date: ' + new Date(data.timestamp()).toLocaleString());
            })
                .catch(function (e) {
                logger_1.log.error('catch error', e);
            });
        }
    };
    return SensorLog;
}());
exports.SensorLog = SensorLog;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvc2Vuc29yLWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUE2QztBQUs3QyxzQ0FBa0M7QUFFbEM7SUFTSSxtQkFBWSxJQUFzQixFQUFFLEtBQWtCO1FBUDlDLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFHdEIsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUN6QixrQkFBYSxHQUFHLENBQUMsR0FBQyxLQUFNLENBQUM7UUFJN0IsWUFBRyxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFNLFVBQVUsR0FBRztZQUNmLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7WUFDaEMsV0FBVyxFQUFFLElBQUksQ0FBQyxhQUFhO1NBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbkYsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSx3Q0FBd0M7WUFDakQsT0FBTyxFQUFFLEVBQUMsY0FBYyxFQUFFLGtCQUFrQixFQUFDO1NBQzlDLENBQUMsQ0FBQztJQUNULENBQUM7SUFFTSwyQkFBTyxHQUFkO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNNLDRCQUFRLEdBQWY7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBQ00sZ0NBQVksR0FBbkI7UUFDSSxZQUFHLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVNLCtCQUFXLEdBQWxCO1FBQ0ksWUFBRyxDQUFDLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLENBQUM7SUFFTyx3Q0FBb0IsR0FBNUIsVUFBNkIsSUFBZ0I7UUFDekMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDZixJQUFNLEtBQUssR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUM7WUFDeEQsSUFBTSxPQUFPLEdBQUcsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLENBQUM7WUFDbkUsSUFBTSxXQUFTLEdBQUcsRUFBRSxLQUFLLE9BQUEsRUFBRSxPQUFPLFNBQUEsRUFBRSxDQUFDO1lBQ3JDLElBQU0sTUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQy9DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRWxDLElBQU0sS0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRSxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQzdDLFlBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUcsQ0FBQyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUcsRUFBRSxXQUFTLENBQUM7aUJBQzlCLElBQUksQ0FBRSxVQUFTLEdBQUc7Z0JBQ2YsWUFBRyxDQUFDLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVO29CQUM1RCxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFTLENBQUMsR0FBRyxPQUFPLEdBQUcsTUFBSTtvQkFDMUQsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDakUsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxVQUFTLENBQUM7Z0JBQ2IsWUFBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUNMLGdCQUFDO0FBQUQsQ0FqRUEsQUFpRUMsSUFBQTtBQWpFWSw4QkFBUyIsImZpbGUiOiJtb2RlbHMvc2Vuc29yLWxvZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcywgeyBBeGlvc0luc3RhbmNlIH0gZnJvbSAnYXhpb3MnO1xyXG5pbXBvcnQgeyBTZW5zb3JBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vbW9kZWxzL3NlbnNvci1hdHRyaWJ1dGVzJztcclxuaW1wb3J0IHsgU2Vuc29yRGF0YSB9IGZyb20gJy4uL21vZGVscy9zZW5zb3ItZGF0YSc7XHJcbmltcG9ydCB7IFNlbnNvclN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL3NlbnNvci1zdGF0ZSc7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLy4uL2xvZ2dlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2Vuc29yTG9nIHtcclxuICAgIHByaXZhdGUgYXR0cjogU2Vuc29yQXR0cmlidXRlcztcclxuICAgIHByaXZhdGUgdGltZXN0YW1wOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBzdGF0ZTogU2Vuc29yU3RhdGU7XHJcblxyXG4gICAgcHJpdmF0ZSBsb2dnaW5nOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIE1BWF9USU1FX0RJRkYgPSA1KjYwXzAwMDtcclxuICAgIHByaXZhdGUgYXhpb3M6IEF4aW9zSW5zdGFuY2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYXR0cjogU2Vuc29yQXR0cmlidXRlcywgc3RhdGU6IFNlbnNvclN0YXRlKSB7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gU2Vuc29yU3RhdGVMb2dnZXI6Jywgc3RhdGUpO1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLmxvZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmF0dHIgPSBhdHRyO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YUZpbHRlciA9IHtcclxuICAgICAgICAgICAgcmVzb2x1dGlvbjogdGhpcy5hdHRyLnJlc29sdXRpb24sXHJcbiAgICAgICAgICAgIG1heFRpbWVEaWZmOiB0aGlzLk1BWF9USU1FX0RJRkZ9O1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlLmFkZFNlbnNvckRhdGFMaXN0ZW5lcih0aGlzLm9uU2Vuc29yRGF0YVJlY2VpdmVkLmJpbmQodGhpcyksIGRhdGFGaWx0ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmF4aW9zID0gYXhpb3MuY3JlYXRlKHtcclxuICAgICAgICAgICAgYmFzZVVSTDogJ2h0dHBzOi8vdGVzdC5pdGVtcGVyLmlvL2FwaS92MS9zZW5zb3JzJyxcclxuICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxyXG4gICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEF0dHIoKTogU2Vuc29yQXR0cmlidXRlcyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRTdGF0ZSgpOiBTZW5zb3JTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhcnRMb2dnaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIFNlbnNvclN0YXRlTG9nZ2VyLnN0YXJ0TG9nZ2luZycpO1xyXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0b3BMb2dnaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIFNlbnNvclN0YXRlTG9nZ2VyLnN0b3BMb2dnaW5nJyk7XHJcbiAgICAgICAgdGhpcy5sb2dnaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblNlbnNvckRhdGFSZWNlaXZlZChkYXRhOiBTZW5zb3JEYXRhKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykge1xyXG4gICAgICAgICAgICBjb25zdCBkZXNjciA9IHsgU046IHRoaXMuYXR0ci5TTiwgcG9ydDogZGF0YS5nZXRQb3J0KCl9O1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVzID0gW3tkYXRlOiBkYXRhLnRpbWVzdGFtcCgpLCB2YWx1ZTogZGF0YS5nZXRWYWx1ZSgpfV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbnNvckxvZyA9IHsgZGVzY3IsIHNhbXBsZXMgfTtcclxuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGRhdGEudGltZXN0YW1wKCkgLSB0aGlzLnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBkYXRhLnRpbWVzdGFtcCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXJsID0gJy8nICsgZGVzY3IuU04gKyAnLycrIGRlc2NyLnBvcnQ7XHJcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnVVJMOiAnLCB1cmwpO1xyXG4gICAgICAgICAgICB0aGlzLmF4aW9zLnBvc3QodXJsLCBzZW5zb3JMb2cpXHJcbiAgICAgICAgICAgIC50aGVuIChmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdTZW5zb3JMb2dnZXIgYXhpb3MucG9zdCAnICsgdXJsICsgJyAnICsgcmVzLnN0YXR1c1RleHQgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgcmVzLmRhdGE6ICcgKyBKU09OLnN0cmluZ2lmeShzZW5zb3JMb2cpICsgJyBtczogJyArIGRpZmYgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgZGF0ZTogJyArIG5ldyBEYXRlKGRhdGEudGltZXN0YW1wKCkpLnRvTG9jYWxlU3RyaW5nKCkpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCdjYXRjaCBlcnJvcicsIGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19
