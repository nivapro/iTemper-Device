"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var config_1 = require("./../config");
var logger_1 = require("./../logger");
var Websocket = require("isomorphic-ws");
var azure_iot_device_1 = require("azure-iot-device");
var azure_iot_device_mqtt_1 = require("azure-iot-device-mqtt");
var SensorLog = (function () {
    function SensorLog(state) {
        this.timestamp = 0;
        this.logging = false;
        this.MAX_TIME_DIFF = 5 * 60000;
        this.dataFilter = {
            resolution: 1,
            maxTimeDiff: this.MAX_TIME_DIFF
        };
        this.connectionString = '';
        logger_1.log.debug('--- SensorStateLogger, state:', JSON.stringify(state));
        this.timestamp = Date.now();
        this.logging = false;
        this.state = state;
        this.state.addSensorDataListener(this.onSensorDataReceived.bind(this), this.dataFilter);
        this.state.addSensorDataListener(this.onMonitor.bind(this));
        this.axios = axios_1.default.create({
            baseURL: config_1.ITEMPER_URL,
            headers: { 'Content-Type': 'application/json' },
        });
        this.socket = this.openSocket();
        this.connectionString = config_1.AZURE_CONNECTION_STRING + '';
        this.client = azure_iot_device_1.Client.fromConnectionString(this.connectionString, azure_iot_device_mqtt_1.Mqtt);
    }
    SensorLog.prototype.openSocket = function () {
        var wsTestUrl = config_1.WS_URL + '';
        var wsOrigin = config_1.WS_ORIGIN;
        var socket = new Websocket(wsTestUrl, { origin: wsOrigin });
        socket.on('open', function () {
            logger_1.log.info('--- socket.on(open): Device.SensorLog connected to backend!');
        });
        socket.on('message', function (data) {
            logger_1.log.info('--- socket.on(message): received from back-end' + JSON.stringify(data));
        });
        socket.on('error', function (ws, err) {
            logger_1.log.info('--- socket.on(error): ' + JSON.stringify(err) + 'socket status: ' + ws.readyState);
        });
        return socket;
    };
    SensorLog.prototype.getState = function () {
        return this.state;
    };
    SensorLog.prototype.getFilter = function () {
        return this.dataFilter;
    };
    SensorLog.prototype.islogging = function () {
        return this.logging;
    };
    SensorLog.prototype.startLogging = function (filter) {
        logger_1.log.debug('--- SensorStateLogger.startLogging');
        if (filter) {
            this.dataFilter = filter;
        }
        this.logging = true;
    };
    SensorLog.prototype.stopLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.stopLogging');
        this.logging = false;
    };
    SensorLog.prototype.printResultFor = function (op) {
        return function printResult(err, res) {
            if (err) {
                logger_1.log.error(op + ' AZURE IOT error: ' + err.toString());
            }
            if (res) {
                logger_1.log.info(op + ' AZURE IOT status: ' + res.constructor.name);
            }
        };
    };
    SensorLog.prototype.onSensorDataReceived = function (data) {
        if (this.logging) {
            var descr = { SN: this.state.getAttr().SN, port: data.getPort() };
            var samples = [{ date: data.timestamp(), value: data.getValue() }];
            var sensorLog_1 = { descr: descr, samples: samples };
            var diff_1 = data.timestamp() - this.timestamp;
            this.timestamp = data.timestamp();
            var url_1 = '/' + descr.SN + '/' + descr.port;
            logger_1.log.debug('URL: ' + url_1);
            this.axios.post(url_1, sensorLog_1)
                .then(function (res) {
                logger_1.log.info('SensorLogger axios.post ' + url_1 + ' ' + res.statusText +
                    ' res.data: ' + JSON.stringify(sensorLog_1) + ' ms: ' + diff_1 +
                    ' date: ' + new Date(data.timestamp()).toLocaleString());
            })
                .catch(function () {
                logger_1.log.info('onSensorDataReceived axios.post catch error');
            });
            var message = new azure_iot_device_1.Message(JSON.stringify(sensorLog_1));
            message.properties.add('Delta time', diff_1.toString());
            this.client.sendEvent(message, this.printResultFor('send'));
        }
    };
    SensorLog.prototype.onMonitor = function (data) {
        logger_1.log.debug('SensorLog.onMonitor');
        var descr = { SN: this.state.getAttr().SN, port: data.getPort() };
        var samples = [{ date: data.timestamp(), value: data.getValue() }];
        var sensorLog = { descr: descr, samples: samples };
        if (this.socket && this.socket.readyState === Websocket.OPEN) {
            logger_1.log.debug('onMonitor: sensor log: ' + JSON.stringify(sensorLog));
            this.socket.send(JSON.stringify(sensorLog));
            logger_1.log.debug('onMonitor: sensor log sent');
        }
        else if (!this.socket || this.socket.readyState === Websocket.CLOSED) {
            logger_1.log.debug('onMonitor: socket closed, re-open');
            this.socket = this.openSocket();
        }
        else {
            logger_1.log.debug('onMonitor: socket not open yet');
        }
    };
    return SensorLog;
}());
exports.SensorLog = SensorLog;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvc2Vuc29yLWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUE2QztBQUc3QyxzQ0FBc0Y7QUFDdEYsc0NBQWtDO0FBRWxDLHlDQUEyQztBQUkzQyxxREFBbUQ7QUFDbkQsK0RBQTZDO0FBTzdDO0lBdUNJLG1CQUFZLEtBQWtCO1FBcEN0QixjQUFTLEdBQVcsQ0FBQyxDQUFDO1FBQ3RCLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFDekIsa0JBQWEsR0FBRyxDQUFDLEdBQUMsS0FBTSxDQUFDO1FBQ3pCLGVBQVUsR0FBZ0I7WUFDOUIsVUFBVSxFQUFFLENBQUM7WUFDYixXQUFXLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FBQyxDQUFDO1FBUTdCLHFCQUFnQixHQUFXLEVBQUUsQ0FBQztRQXdCbEMsWUFBRyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4RixJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFNUQsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxvQkFBVztZQUNwQixPQUFPLEVBQUUsRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUM7U0FDOUMsQ0FBQyxD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LEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ25DO2FBQU07WUFDSCxZQUFHLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQTFJQSxBQTBJQyxJQUFBO0FBMUlZLDhCQUFTIiwiZmlsZSI6Im1vZGVscy9zZW5zb3ItbG9nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zLCB7IEF4aW9zSW5zdGFuY2UgfSBmcm9tICdheGlvcyc7XHJcbmltcG9ydCB7IFNlbnNvckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvc2Vuc29yLWRhdGEnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25maWcsIFNlbnNvclN0YXRlIH0gZnJvbSAnLi4vbW9kZWxzL3NlbnNvci1zdGF0ZSc7XHJcbmltcG9ydCB7IEFaVVJFX0NPTk5FQ1RJT05fU1RSSU5HLCBJVEVNUEVSX1VSTCwgV1NfT1JJR0lOLCBXU19VUkwgfSBmcm9tICcuLy4uL2NvbmZpZyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4vLi4vbG9nZ2VyJztcclxuXHJcbmltcG9ydCAqIGFzIFdlYnNvY2tldCBmcm9tICdpc29tb3JwaGljLXdzJztcclxuXHJcbi8vIEltcG9ydCBBenVyZVxyXG5cclxuaW1wb3J0IHsgQ2xpZW50LCBNZXNzYWdlIH0gZnJvbSAnYXp1cmUtaW90LWRldmljZSc7XHJcbmltcG9ydCB7IE1xdHQgfSBmcm9tICdhenVyZS1pb3QtZGV2aWNlLW1xdHQnO1xyXG5cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExvZ2dpbmdTZXJ2aWNlIHtcclxuXHJcbn1cclxuZXhwb3J0IGNsYXNzIFNlbnNvckxvZyB7XHJcbiAgICBwcml2YXRlIHN0YXRlOiBTZW5zb3JTdGF0ZTtcclxuXHJcbiAgICBwcml2YXRlIHRpbWVzdGFtcDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgbG9nZ2luZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBNQVhfVElNRV9ESUZGID0gNSo2MF8wMDA7XHJcbiAgICBwcml2YXRlIGRhdGFGaWx0ZXI6IEZpbHRlckNvbmZpZz0ge1xyXG4gICAgICAgIHJlc29sdXRpb246IDEsXHJcbiAgICAgICAgbWF4VGltZURpZmY6IHRoaXMuTUFYX1RJTUVfRElGRn07XHJcblxyXG4gICAgcHJpdmF0ZSBheGlvczogQXhpb3NJbnN0YW5jZTtcclxuXHJcbiAgICBwcml2YXRlIHNvY2tldDogV2Vic29ja2V0O1xyXG5cclxuICAgIC8vIEF6dXJlIElPVFxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG4gICAgcHJpdmF0ZSBjb25uZWN0aW9uU3RyaW5nOiBzdHJpbmcgPSAnJztcclxuICAgIHByaXZhdGUgY2xpZW50OiBDbGllbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBvcGVuU29ja2V0KCk6IFdlYnNvY2tldCB7XHJcbiAgICAgICAgLy8gY29uc3Qgd3NUZXN0VXJsID0gJ3dzczovL3Rlc3QuaXRlbXBlci5pby93cyc7XHJcbiAgICAgICAgY29uc3Qgd3NUZXN0VXJsID0gV1NfVVJMICsgJyc7XHJcbiAgICAgICAgY29uc3Qgd3NPcmlnaW4gPSBXU19PUklHSU47XHJcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gbmV3IFdlYnNvY2tldCAod3NUZXN0VXJsLCB7IG9yaWdpbjogd3NPcmlnaW59KTtcclxuXHJcbiAgICAgICAgc29ja2V0Lm9uKCdvcGVuJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBsb2cuaW5mbygnLS0tIHNvY2tldC5vbihvcGVuKTogRGV2aWNlLlNlbnNvckxvZyBjb25uZWN0ZWQgdG8gYmFja2VuZCEnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCAoZGF0YTogV2Vic29ja2V0LkRhdGEpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgbG9nLmluZm8oJy0tLSBzb2NrZXQub24obWVzc2FnZSk6IHJlY2VpdmVkIGZyb20gYmFjay1lbmQnICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzb2NrZXQub24oJ2Vycm9yJywgKHdzOiBXZWJTb2NrZXQsIGVycjogRXJyb3IpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgbG9nLmluZm8oJy0tLSBzb2NrZXQub24oZXJyb3IpOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSArICdzb2NrZXQgc3RhdHVzOiAnICsgd3MucmVhZHlTdGF0ZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzb2NrZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc3RhdGU6IFNlbnNvclN0YXRlKSB7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gU2Vuc29yU3RhdGVMb2dnZXIsIHN0YXRlOicsIEpTT04uc3RyaW5naWZ5KHN0YXRlKSk7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hZGRTZW5zb3JEYXRhTGlzdGVuZXIodGhpcy5vblNlbnNvckRhdGFSZWNlaXZlZC5iaW5kKHRoaXMpLCB0aGlzLmRhdGFGaWx0ZXIpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWRkU2Vuc29yRGF0YUxpc3RlbmVyKHRoaXMub25Nb25pdG9yLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLmF4aW9zID0gYXhpb3MuY3JlYXRlKHtcclxuICAgICAgICAgICAgYmFzZVVSTDogSVRFTVBFUl9VUkwsXHJcbiAgICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnNvY2tldCA9IHRoaXMub3BlblNvY2tldCgpO1xyXG5cclxuICAgICAgICAvLyBBWlVSRSBJT1RcclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25TdHJpbmcgPSBBWlVSRV9DT05ORUNUSU9OX1NUUklORyArICcnO1xyXG4gICAgICAgIHRoaXMuY2xpZW50ID0gQ2xpZW50LmZyb21Db25uZWN0aW9uU3RyaW5nKHRoaXMuY29ubmVjdGlvblN0cmluZywgTXF0dCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFN0YXRlKCk6IFNlbnNvclN0YXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmlsdGVyKCk6IEZpbHRlckNvbmZpZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUZpbHRlcjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBpc2xvZ2dpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9nZ2luZztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGFydExvZ2dpbmcoZmlsdGVyPzogRmlsdGVyQ29uZmlnKTogdm9pZCB7XHJcbiAgICAgICAgbG9nLmRlYnVnKCctLS0gU2Vuc29yU3RhdGVMb2dnZXIuc3RhcnRMb2dnaW5nJyk7XHJcbiAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXIgPSBmaWx0ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxvZ2dpbmcgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wTG9nZ2luZygpOiB2b2lkIHtcclxuICAgICAgICBsb2cuZGVidWcoJy0tLSBTZW5zb3JTdGF0ZUxvZ2dlci5zdG9wTG9nZ2luZycpO1xyXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByaW50IEFaVVJFIElPVCByZXN1bHRzLlxyXG4gICAgcHJpdmF0ZSBwcmludFJlc3VsdEZvcihvcDogc3RyaW5nKTogYW55IHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcHJpbnRSZXN1bHQoZXJyOiBhbnksIHJlczogYW55KSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICBsb2cuZXJyb3Iob3AgKyAnIEFaVVJFIElPVCBlcnJvcjogJyArIGVyci50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlcykge1xyXG4gICAgICAgICAgICBsb2cuaW5mbyhvcCArICcgQVpVUkUgSU9UIHN0YXR1czogJyArIHJlcy5jb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgICBwcml2YXRlIG9uU2Vuc29yRGF0YVJlY2VpdmVkKGRhdGE6IFNlbnNvckRhdGEpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5sb2dnaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyID0geyBTTjogdGhpcy5zdGF0ZS5nZXRBdHRyKCkuU04sIHBvcnQ6IGRhdGEuZ2V0UG9ydCgpfTtcclxuICAgICAgICAgICAgY29uc3Qgc2FtcGxlcyA9IFt7ZGF0ZTogZGF0YS50aW1lc3RhbXAoKSwgdmFsdWU6IGRhdGEuZ2V0VmFsdWUoKX1dO1xyXG4gICAgICAgICAgICBjb25zdCBzZW5zb3JMb2cgPSB7IGRlc2NyLCBzYW1wbGVzIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBkYXRhLnRpbWVzdGFtcCgpIC0gdGhpcy50aW1lc3RhbXA7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXN0YW1wID0gZGF0YS50aW1lc3RhbXAoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHVybCA9ICcvJyArIGRlc2NyLlNOICsgJy8nKyBkZXNjci5wb3J0O1xyXG4gICAgICAgICAgICBsb2cuZGVidWcoJ1VSTDogJyArIHVybCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXhpb3MucG9zdCh1cmwsIHNlbnNvckxvZylcclxuICAgICAgICAgICAgLnRoZW4gKGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAgICAgICAgICAgbG9nLmluZm8oJ1NlbnNvckxvZ2dlciBheGlvcy5wb3N0ICcgKyB1cmwgKyAnICcgKyByZXMuc3RhdHVzVGV4dCArXHJcbiAgICAgICAgICAgICAgICAgICAgJyByZXMuZGF0YTogJyArIEpTT04uc3RyaW5naWZ5KHNlbnNvckxvZykgKyAnIG1zOiAnICsgZGlmZiArXHJcbiAgICAgICAgICAgICAgICAgICAgJyBkYXRlOiAnICsgbmV3IERhdGUoZGF0YS50aW1lc3RhbXAoKSkudG9Mb2NhbGVTdHJpbmcoKSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdvblNlbnNvckRhdGFSZWNlaXZlZCBheGlvcy5wb3N0IGNhdGNoIGVycm9yJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBBWlVSRSBJT1RcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKEpTT04uc3RyaW5naWZ5KHNlbnNvckxvZykpO1xyXG4gICAgICAgICAgICBtZXNzYWdlLnByb3BlcnRpZXMuYWRkKCdEZWx0YSB0aW1lJywgZGlmZi50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgdGhpcy5jbGllbnQuc2VuZEV2ZW50KG1lc3NhZ2UsIHRoaXMucHJpbnRSZXN1bHRGb3IoJ3NlbmQnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25Nb25pdG9yKGRhdGE6IFNlbnNvckRhdGEpOiB2b2lkIHtcclxuICAgICAgICBsb2cuZGVidWcoJ1NlbnNvckxvZy5vbk1vbml0b3InKTtcclxuICAgICAgICBjb25zdCBkZXNjciA9IHsgU046IHRoaXMuc3RhdGUuZ2V0QXR0cigpLlNOLCBwb3J0OiBkYXRhLmdldFBvcnQoKX07XHJcbiAgICAgICAgY29uc3Qgc2FtcGxlcyA9IFt7ZGF0ZTogZGF0YS50aW1lc3RhbXAoKSwgdmFsdWU6IGRhdGEuZ2V0VmFsdWUoKX1dO1xyXG4gICAgICAgIGNvbnN0IHNlbnNvckxvZyA9IHsgZGVzY3IsIHNhbXBsZXMgfTtcclxuICAgICAgICBpZiAodGhpcy5zb2NrZXQgJiYgdGhpcy5zb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2Vic29ja2V0Lk9QRU4pIHtcclxuICAgICAgICAgICAgbG9nLmRlYnVnKCdvbk1vbml0b3I6IHNlbnNvciBsb2c6ICcgKyBKU09OLnN0cmluZ2lmeShzZW5zb3JMb2cpKTtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShzZW5zb3JMb2cpKTtcclxuICAgICAgICAgICAgbG9nLmRlYnVnKCdvbk1vbml0b3I6IHNlbnNvciBsb2cgc2VudCcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuc29ja2V0IHx8IHRoaXMuc29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYnNvY2tldC5DTE9TRUQpIHtcclxuICAgICAgICAgICAgbG9nLmRlYnVnKCdvbk1vbml0b3I6IHNvY2tldCBjbG9zZWQsIHJlLW9wZW4nKTtcclxuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSB0aGlzLm9wZW5Tb2NrZXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2cuZGVidWcoJ29uTW9uaXRvcjogc29ja2V0IG5vdCBvcGVuIHlldCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=
