"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var os = require("os");
var USBController = (function () {
    function USBController(hid, parser) {
        this.POLL_INTERVAL = 5000;
        this.deviceInitialized = false;
        this.hid = hid;
        this.reportParser = parser;
        this.initializeDevice();
        this.pollSensors();
    }
    USBController.prototype.initializeDevice = function () {
        if (!this.deviceInitialized) {
            this.hid.on('data', this.parseInput.bind(this));
            this.hid.on('error', this.parseError.bind(this));
            this.setPollingInterval(this.POLL_INTERVAL);
            this.deviceInitialized = true;
            console.log('+++ USBController.initializeDevice');
        }
    };
    USBController.prototype.close = function () {
        this.deviceInitialized = false;
        try {
            this.hid.pause();
            this.hid.close();
        }
        catch (e) {
            return;
        }
    };
    USBController.prototype.setPollingInterval = function (ms) {
        this.POLL_INTERVAL = ms;
        clearInterval(this.interval);
        this.interval = setInterval(this.pollSensors.bind(this), this.POLL_INTERVAL);
    };
    USBController.prototype.pollSensors = function () {
        if (!this.deviceInitialized) {
            this.initializeDevice();
        }
        else {
            console.log('+++ USBController.pollSensors');
            var initCommands = this.reportParser.initReport();
            for (var _i = 0, initCommands_1 = initCommands; _i < initCommands_1.length; _i++) {
                var command = initCommands_1[_i];
                this.writeReport(command);
            }
        }
    };
    USBController.prototype.parseInput = function (data) {
        try {
            console.log('+++ USBController.parseInput', JSON.stringify(data));
            var response = this.reportParser.parseInput(data);
            if (response.length > 0) {
                this.writeReport(response);
            }
        }
        catch (e) {
            return;
        }
    };
    USBController.prototype.parseError = function (_error) {
        return;
    };
    USBController.prototype.writeReport = function (data) {
        if (os.platform() === 'win32') {
            data.unshift(0);
        }
        for (var i = 0; i < 1; i++) {
            try {
                this.hid.write(data);
                console.log('+++ USBController.writeReport', JSON.stringify(data));
            }
            catch (e) {
                console.log('*** USBController.writeReport hid.write catch:&d', JSON.stringify(data));
                this.close();
            }
        }
    };
    return USBController;
}());
exports.USBController = USBController;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdXNiLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSx1QkFBMEI7QUFVMUI7SUFXSSx1QkFBWSxHQUFZLEVBQUUsTUFBb0I7UUFOdEMsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFFckIsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBSzlCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSx3Q0FBZ0IsR0FBdkI7UUFDSSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1lBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUN0RCxDQUFDO0lBQ0wsQ0FBQztJQUVNLDZCQUFLLEdBQVo7UUFDSSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQztZQUNELElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FB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IjpbIlxyXG5pbXBvcnQgSElEID0gcmVxdWlyZSgnbm9kZS1oaWQnKTtcclxuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcclxuaW1wb3J0IHsgU2Vuc29yRGF0YSB9IGZyb20gJy4vc2Vuc29yLWRhdGEnO1xyXG5cclxuLy8gUmVwb3J0UGFyc2VyIGFsbG93IFNlbnNvckRldmljZSB0byBiZSBpbmRlcGVuZGVudCBvbiB0aGUgc3BlY2lmaWNcclxuLy8gVGVtcGVyIGRldmljZSBjb25uZWN0ZWQuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVwb3J0UGFyc2VyIHtcclxuICAgIGluaXRSZXBvcnQoKTogbnVtYmVyW11bXTtcclxuICAgIHBhcnNlSW5wdXQoZGF0YTogbnVtYmVyW10pOiBudW1iZXJbXTtcclxufVxyXG4vLyBIYW5kbGUgYSBzZW5zb3IgZGV2aWNlIG9uIHRoZSBVU0IgaHViLlxyXG5leHBvcnQgY2xhc3MgVVNCQ29udHJvbGxlciB7XHJcbiAgICBwcml2YXRlICBoaWQ6IEhJRC5ISUQ7XHJcblxyXG4gICAgcHJpdmF0ZSByZXBvcnRQYXJzZXI6IFJlcG9ydFBhcnNlcjtcclxuXHJcbiAgICBwcml2YXRlIFBPTExfSU5URVJWQUwgPSA1MDAwO1xyXG5cclxuICAgIHByaXZhdGUgZGV2aWNlSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGludGVydmFsOiBOb2RlSlMuVGltZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaGlkOiBISUQuSElELCBwYXJzZXI6IFJlcG9ydFBhcnNlcikge1xyXG4gICAgICAgIHRoaXMuaGlkID0gaGlkO1xyXG4gICAgICAgIHRoaXMucmVwb3J0UGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZURldmljZSgpO1xyXG4gICAgICAgIHRoaXMucG9sbFNlbnNvcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZURldmljZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGV2aWNlSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWQub24oJ2RhdGEnLCB0aGlzLnBhcnNlSW5wdXQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkLm9uKCdlcnJvcicsIHRoaXMucGFyc2VFcnJvci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRQb2xsaW5nSW50ZXJ2YWwodGhpcy5QT0xMX0lOVEVSVkFMKTtcclxuICAgICAgICAgICAgdGhpcy5kZXZpY2VJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgVVNCQ29udHJvbGxlci5pbml0aWFsaXplRGV2aWNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9zZSgpIHtcclxuICAgICAgICB0aGlzLmRldmljZUluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5oaWQucGF1c2UoKTtcclxuICAgICAgICAgICAgdGhpcy5oaWQuY2xvc2UoKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFBvbGxpbmdJbnRlcnZhbChtczogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5QT0xMX0lOVEVSVkFMID0gbXM7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcclxuICAgICAgICB0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5wb2xsU2Vuc29ycy5iaW5kKHRoaXMpLCB0aGlzLlBPTExfSU5URVJWQUwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoaXMgaXMgd2VyZSBhbGwgc3RhcnRzIHdoZW4gc2V0IGludGVydmFsIHRpbWUgZXhwaXJlc1xyXG5cclxuICAgIHByaXZhdGUgcG9sbFNlbnNvcnMoKSB7XHJcbiAgICAgICAgaWYgKCEgdGhpcy5kZXZpY2VJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEZXZpY2UoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnKysrIFVTQkNvbnRyb2xsZXIucG9sbFNlbnNvcnMnKTtcclxuICAgICAgICAgICAgY29uc3QgaW5pdENvbW1hbmRzID0gdGhpcy5yZXBvcnRQYXJzZXIuaW5pdFJlcG9ydCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgaW5pdENvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlUmVwb3J0KGNvbW1hbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2FsbGVkIGZyb20gSElELCBQYXJzZXMgaW5wdXQgZnJvbSBISUQgYW5kIHdyaXRlcyBhbnkgcmVzcG9uc2UgbWVzc2FnZXNcclxuICAgIC8vIGJhY2sgdG8gdGhlIGRldmljZVxyXG4gICAgcHJpdmF0ZSBwYXJzZUlucHV0KGRhdGE6IG51bWJlcltdKTogdm9pZCAge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgVVNCQ29udHJvbGxlci5wYXJzZUlucHV0JywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMucmVwb3J0UGFyc2VyLnBhcnNlSW5wdXQoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlUmVwb3J0KHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy8gVE9ETyBlcnJvciBoYW5kbGluZyBpZiBwYXJzZSBpbnB1dCBlcnJvclxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBwYXJzZUVycm9yKF9lcnJvcjogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgdG8gd3JpdGUgcmVwb3J0cyB0byB0aGUgZGV2aWNlXHJcbiAgICBwcml2YXRlIHdyaXRlUmVwb3J0KGRhdGE6IG51bWJlcltdKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmIChvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInKSB7XHJcbiAgICAgICAgICAgIGRhdGEudW5zaGlmdCgwKTsgIC8vIHByZXBlbmQgYSB0aHJvd2F3YXkgYnl0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT3V0cHV0IHJlcG9ydFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZC53cml0ZShkYXRhKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgVVNCQ29udHJvbGxlci53cml0ZVJlcG9ydCcsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJyoqKiBVU0JDb250cm9sbGVyLndyaXRlUmVwb3J0IGhpZC53cml0ZSBjYXRjaDomZCcsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19
