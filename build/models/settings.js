"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../config");
var logger_1 = require("./../logger");
var Settings = (function () {
    function Settings() {
    }
    Settings.initializeSettings = function () {
        Settings.add('AZURE_CONNECTION_STRING', config_1.AZURE_CONNECTION_STRING, '', 'Connection string to AZURE IOT HUB');
        Settings.add('CONSOLE_LEVEL', config_1.CONSOLE_LEVEL, 'info', 'Event level logged on console: error | info | debug');
        Settings.add('ERROR_LEVEL', config_1.ERROR_LEVEL, 'error', 'Event level logged on file: error | info | debug');
        Settings.add('ERROR_LOG_FILE', config_1.ERROR_LOG_FILE, 'itemper-error.log', 'Name of the log file. You find it in the application root directory');
        Settings.add('HOSTNAME', config_1.HOSTNAME, '', 'This device \'s hostname');
        Settings.add('ITEMPER_URL', config_1.ITEMPER_URL, 'https://itemper.io', 'The device use\'s this URL when connecting to iTemper');
        Settings.add('POLL_INTERVAL', config_1.POLL_INTERVAL, 5000, 'Interval (ms) between polling the sensors');
        Settings.add('WS_ORIGIN', config_1.WS_ORIGIN, 'https://itemper.io', 'Origon used when connecting to iTemper with WebSockets');
        Settings.add('WS_URL', config_1.WS_URL, 'wss://itemper.io', 'WebSocket URL to iTemper');
    };
    Settings.all = function () {
        var allSettings = [];
        Settings.forEach(function (setting) { return allSettings.push(setting); });
        return allSettings;
    };
    Settings.add = function (name, value, defaultValue, text) {
        var setting = Settings.create(name, value, defaultValue, text);
        Settings.set(setting);
    };
    Settings.create = function (name, value, defaultValue, text) {
        if (value) {
            return { name: name, value: value, defaultValue: defaultValue, text: text };
        }
        else {
            return { name: name, value: defaultValue, defaultValue: defaultValue, text: text };
            logger_1.log.info('Settings.create: setting' + name + ' value undefined, uses default:' + defaultValue);
        }
    };
    Settings.get = function (name) {
        return Settings.map.get(name);
    };
    Settings.value = function (setting) {
        return Number(setting.value);
    };
    Settings.has = function (name) {
        return Settings.map.has(name);
    };
    Settings.set = function (setting) {
        Settings.map.set(setting.name, setting);
        logger_1.log.info('Settings.set: ' + JSON.stringify(setting));
    };
    Settings.forEach = function (callbackfn) {
        Settings.map.forEach(callbackfn);
    };
    Settings.map = new Map();
    return Settings;
}());
exports.Settings = Settings;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ2EsWUFBRyxHQUFqQixVQUFrQixPQUFnQjtRQUM5QixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLFlBQUcsQ0FBQyxJQUFJLENBQUUsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFYSxnQkFBTyxHQUFyQixVQUFzQixVQUFzQztRQUN4RCxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBOURjLFlBQUcsR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztJQStEcEQsZUFBQztDQWhFRCxBQWdFQyxJQUFBO0FBaEVZLDRCQUFRIiwiZmlsZSI6Im1vZGVscy9zZXR0aW5ncy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFaVVJFX0NPTk5FQ1RJT05fU1RSSU5HLCBDT05TT0xFX0xFVkVMLCBFUlJPUl9MRVZFTCwgRVJST1JfTE9HX0ZJTEUsXHJcbiAgICBIT1NUTkFNRSwgSVRFTVBFUl9VUkwsIFBPTExfSU5URVJWQUwsIFdTX09SSUdJTiwgV1NfVVJMXHJcbiAgICB9IGZyb20gJy4uL2NvbmZpZyc7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLy4uL2xvZ2dlcic7XHJcblxyXG50eXBlIFNldHRpbmdWYWx1ZSA9IHN0cmluZyB8IG51bWJlcjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZyB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB2YWx1ZTogU2V0dGluZ1ZhbHVlO1xyXG4gICAgZGVmYXVsdFZhbHVlOiBTZXR0aW5nVmFsdWU7XHJcbiAgICB0ZXh0OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5ncyB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBtYXAgPSBuZXcgTWFwPHN0cmluZywgU2V0dGluZz4oKTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGluaXRpYWxpemVTZXR0aW5ncygpIHtcclxuICAgICAgICBTZXR0aW5ncy5hZGQoJ0FaVVJFX0NPTk5FQ1RJT05fU1RSSU5HJywgQVpVUkVfQ09OTkVDVElPTl9TVFJJTkcsICcnLFxyXG4gICAgICAgICAgICAnQ29ubmVjdGlvbiBzdHJpbmcgdG8gQVpVUkUgSU9UIEhVQicpO1xyXG4gICAgICAgIFNldHRpbmdzLmFkZCgnQ09OU09MRV9MRVZFTCcsIENPTlNPTEVfTEVWRUwsICdpbmZvJyxcclxuICAgICAgICAgICAgJ0V2ZW50IGxldmVsIGxvZ2dlZCBvbiBjb25zb2xlOiBlcnJvciB8IGluZm8gfCBkZWJ1ZycpO1xyXG4gICAgICAgIFNldHRpbmdzLmFkZCgnRVJST1JfTEVWRUwnLCBFUlJPUl9MRVZFTCwgJ2Vycm9yJyxcclxuICAgICAgICAgICAgJ0V2ZW50IGxldmVsIGxvZ2dlZCBvbiBmaWxlOiBlcnJvciB8IGluZm8gfCBkZWJ1ZycpO1xyXG4gICAgICAgIFNldHRpbmdzLmFkZCgnRVJST1JfTE9HX0ZJTEUnLCBFUlJPUl9MT0dfRklMRSwgJ2l0ZW1wZXItZXJyb3IubG9nJyxcclxuICAgICAgICAgICAgJ05hbWUgb2YgdGhlIGxvZyBmaWxlLiBZb3UgZmluZCBpdCBpbiB0aGUgYXBwbGljYXRpb24gcm9vdCBkaXJlY3RvcnknKTtcclxuICAgICAgICBTZXR0aW5ncy5hZGQoJ0hPU1ROQU1FJywgSE9TVE5BTUUsICcnLFxyXG4gICAgICAgICAgICAnVGhpcyBkZXZpY2UgXFwncyBob3N0bmFtZScpO1xyXG4gICAgICAgIFNldHRpbmdzLmFkZCgnSVRFTVBFUl9VUkwnLCBJVEVNUEVSX1VSTCwgJ2h0dHBzOi8vaXRlbXBlci5pbycsXHJcbiAgICAgICAgICAgICdUaGUgZGV2aWNlIHVzZVxcJ3MgdGhpcyBVUkwgd2hlbiBjb25uZWN0aW5nIHRvIGlUZW1wZXInKTtcclxuICAgICAgICBTZXR0aW5ncy5hZGQoJ1BPTExfSU5URVJWQUwnLCBQT0xMX0lOVEVSVkFMLCA1XzAwMCxcclxuICAgICAgICAgICAgJ0ludGVydmFsIChtcykgYmV0d2VlbiBwb2xsaW5nIHRoZSBzZW5zb3JzJyk7XHJcbiAgICAgICAgU2V0dGluZ3MuYWRkKCdXU19PUklHSU4nLCBXU19PUklHSU4sICdodHRwczovL2l0ZW1wZXIuaW8nLFxyXG4gICAgICAgICAgICAnT3JpZ29uIHVzZWQgd2hlbiBjb25uZWN0aW5nIHRvIGlUZW1wZXIgd2l0aCBXZWJTb2NrZXRzJyk7XHJcbiAgICAgICAgU2V0dGluZ3MuYWRkKCdXU19VUkwnLCBXU19VUkwsICd3c3M6Ly9pdGVtcGVyLmlvJyxcclxuICAgICAgICAgICAgJ1dlYlNvY2tldCBVUkwgdG8gaVRlbXBlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYWxsKCk6IFNldHRpbmdbXSB7XHJcbiAgICAgICAgY29uc3QgYWxsU2V0dGluZ3M6IFNldHRpbmdbXSA9IFtdO1xyXG4gICAgICAgIFNldHRpbmdzLmZvckVhY2goc2V0dGluZz0+IGFsbFNldHRpbmdzLnB1c2goc2V0dGluZykpO1xyXG4gICAgICAgIHJldHVybiBhbGxTZXR0aW5ncztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgYWRkKG5hbWU6IHN0cmluZywgdmFsdWU6IFNldHRpbmdWYWx1ZSB8IHVuZGVmaW5lZCwgZGVmYXVsdFZhbHVlOiBTZXR0aW5nVmFsdWUsIHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmcgPSBTZXR0aW5ncy5jcmVhdGUobmFtZSwgdmFsdWUsIGRlZmF1bHRWYWx1ZSwgdGV4dCk7XHJcbiAgICAgICAgU2V0dGluZ3Muc2V0KHNldHRpbmcpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoICAgbmFtZTogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFNldHRpbmdWYWx1ZSB8IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2V0dGluZ1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogc3RyaW5nKTogU2V0dGluZyB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAge25hbWUsIHZhbHVlLCBkZWZhdWx0VmFsdWUsIHRleHR9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7bmFtZSwgdmFsdWU6IGRlZmF1bHRWYWx1ZSwgZGVmYXVsdFZhbHVlLCB0ZXh0fTtcclxuICAgICAgICAgICAgbG9nLmluZm8oJ1NldHRpbmdzLmNyZWF0ZTogc2V0dGluZycgKyBuYW1lICsgJyB2YWx1ZSB1bmRlZmluZWQsIHVzZXMgZGVmYXVsdDonICsgZGVmYXVsdFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBnZXQobmFtZTogc3RyaW5nKTogU2V0dGluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIFNldHRpbmdzLm1hcC5nZXQobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB2YWx1ZShzZXR0aW5nOiBTZXR0aW5nKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTnVtYmVyKHNldHRpbmcudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaGFzKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBTZXR0aW5ncy5tYXAuaGFzKG5hbWUpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBzZXQoc2V0dGluZzogU2V0dGluZykge1xyXG4gICAgICAgIFNldHRpbmdzLm1hcC5zZXQoc2V0dGluZy5uYW1lLCBzZXR0aW5nKTtcclxuICAgICAgICBsb2cuaW5mbyAoJ1NldHRpbmdzLnNldDogJyArIEpTT04uc3RyaW5naWZ5KHNldHRpbmcpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZvckVhY2goY2FsbGJhY2tmbjogKHNldHRpbmc6IFNldHRpbmcpID0+IHZvaWQpIHtcclxuICAgICAgICBTZXR0aW5ncy5tYXAuZm9yRWFjaChjYWxsYmFja2ZuKTtcclxuICAgIH1cclxufVxyXG5cclxuIl19
