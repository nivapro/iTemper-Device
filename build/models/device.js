"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var device_checks_1 = require("./device-checks");
var device_log_1 = require("./device-log");
var logger_1 = require("../logger");
var Device = (function () {
    function Device() {
    }
    Device.getLoggers = function () {
        return Device.loggers;
    };
    Device.initialize = function () {
        logger_1.log.info('Device.initialize: start time=' + new Date().toISOString());
        var deviceChecks = new device_checks_1.DeviceChecks();
        Device.checks.push(deviceChecks);
        Device.createDeviceLog(deviceChecks);
        logger_1.log.debug('Device.initialize POLLING INTERVAL=' + Device.POLL_INTERVAL);
        Device.deviceInitialized = true;
        Device.startPolling();
        logger_1.log.info('Device.initialize done');
    };
    Device.createDeviceLog = function (DeviceState) {
        var deviceLog = new device_log_1.DeviceLog(DeviceState);
        Device.loggers.push(deviceLog);
        deviceLog.startLogging();
    };
    Device.startPolling = function () {
        clearInterval(Device.timer);
        Device.timer = setInterval(Device.poll, Device.POLL_INTERVAL);
        logger_1.log.info('Device.startPolling: ' + Device.POLL_INTERVAL + ' ms');
    };
    Device.poll = function () {
        if (!Device.deviceInitialized) {
            Device.initialize();
        }
        else {
            logger_1.log.debug('Device.poll');
            for (var _i = 0, _a = Device.checks; _i < _a.length; _i++) {
                var check = _a[_i];
                check.check();
            }
        }
    };
    Device.loggers = [];
    Device.checks = [];
    Device.POLL_INTERVAL = 60000;
    Device.deviceInitialized = false;
    return Device;
}());
exports.Device = Device;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvZGV2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQTZDO0FBRTdDLDJDQUF5QztBQUV6QyxvQ0FBZ0M7QUFFaEM7SUFBQTtJQWdEQSxDQUFDO0lBckNpQixpQkFBVSxHQUF4QjtRQUNJLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRWEsaUJBQVUsR0FBeEI7UUFDSSxZQUFHLENBQUMsSUFBSSxDQUFFLGdDQUFnQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztRQUV2RSxJQUFNLFlBQVksR0FBRyxJQUFJLDRCQUFZLEVBQUUsQ0FBQztRQUN4QyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJDLFlBQUcsQ0FBQyxLQUFLLENBQUMscUNBQXFDLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDaEMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RCLFlBQUcsQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRWMsc0JBQWUsR0FBOUIsVUFBK0IsV0FBeUI7UUFDcEQsSUFBTSxTQUFTLEdBQUcsSUFBSSxzQkFBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9CLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBQ2EsbUJBQVksR0FBMUI7UUFDSSxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlELFlBQUcsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsTUFBTSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBQ2MsV0FBSSxHQUFuQjtRQUNJLElBQUksQ0FBRSxNQUFNLENBQUMsaUJBQWlCLEVBQUU7WUFDNUIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxZQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3pCLEtBQW9CLFVBQWEsRUFBYixLQUFBLE1BQU0sQ0FBQyxNQUFNLEVBQWIsY0FBYSxFQUFiLElBQWEsRUFBRTtnQkFBOUIsSUFBTSxLQUFLLFNBQUE7Z0JBQ1osS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2pCO1NBQ0o7SUFDTCxDQUFDO0lBOUNjLGNBQU8sR0FBZ0IsRUFBRSxDQUFDO0lBQzFCLGFBQU0sR0FBbUIsRUFBRSxDQUFDO0lBQzVCLG9CQUFhLEdBQVcsS0FBSyxDQUFDO0lBSTlCLHdCQUFpQixHQUFHLEtBQUssQ0FBQztJQXlDN0MsYUFBQztDQWhERCxBQWdEQyxJQUFBO0FBaERZLHdCQUFNIiwiZmlsZSI6Im1vZGVscy9kZXZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RldmljZUNoZWNrc30gZnJvbSAnLi9kZXZpY2UtY2hlY2tzJztcclxuXHJcbmltcG9ydCB7IERldmljZUxvZyB9IGZyb20gJy4vZGV2aWNlLWxvZyc7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIERldmljZSB7XHJcbiAgICBwcml2YXRlIHN0YXRpYyBsb2dnZXJzOiBEZXZpY2VMb2dbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgY2hlY2tzOiBEZXZpY2VDaGVja3NbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgUE9MTF9JTlRFUlZBTDogbnVtYmVyID0gNjAwMDA7XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBQT0xMX0lOVEVSVkFMOiBudW1iZXIgPSBTZXR0aW5ncy5nZXQoJ1BPTExfSU5URVJWQUwnKS52YWx1ZSB8IDUwMDA7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZGV2aWNlSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyB0aW1lcjogTm9kZUpTLlRpbWVyO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0TG9nZ2VycygpOiBEZXZpY2VMb2dbXSB7XHJcbiAgICAgICAgcmV0dXJuIERldmljZS5sb2dnZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcclxuICAgICAgICBsb2cuaW5mbyAoJ0RldmljZS5pbml0aWFsaXplOiBzdGFydCB0aW1lPScgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpO1xyXG5cclxuICAgICAgICBjb25zdCBkZXZpY2VDaGVja3MgPSBuZXcgRGV2aWNlQ2hlY2tzKCk7XHJcbiAgICAgICAgRGV2aWNlLmNoZWNrcy5wdXNoKGRldmljZUNoZWNrcyk7XHJcbiAgICAgICAgRGV2aWNlLmNyZWF0ZURldmljZUxvZyhkZXZpY2VDaGVja3MpO1xyXG5cclxuICAgICAgICBsb2cuZGVidWcoJ0RldmljZS5pbml0aWFsaXplIFBPTExJTkcgSU5URVJWQUw9JyArIERldmljZS5QT0xMX0lOVEVSVkFMKTtcclxuICAgICAgICBEZXZpY2UuZGV2aWNlSW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIERldmljZS5zdGFydFBvbGxpbmcoKTtcclxuICAgICAgICBsb2cuaW5mbygnRGV2aWNlLmluaXRpYWxpemUgZG9uZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGNyZWF0ZURldmljZUxvZyhEZXZpY2VTdGF0ZTogRGV2aWNlQ2hlY2tzKSB7XHJcbiAgICAgICAgY29uc3QgZGV2aWNlTG9nID0gbmV3IERldmljZUxvZyhEZXZpY2VTdGF0ZSk7XHJcbiAgICAgICAgRGV2aWNlLmxvZ2dlcnMucHVzaChkZXZpY2VMb2cpO1xyXG4gICAgICAgIGRldmljZUxvZy5zdGFydExvZ2dpbmcoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgc3RhcnRQb2xsaW5nKCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwoRGV2aWNlLnRpbWVyKTtcclxuICAgICAgICBEZXZpY2UudGltZXIgPSBzZXRJbnRlcnZhbChEZXZpY2UucG9sbCwgRGV2aWNlLlBPTExfSU5URVJWQUwpO1xyXG4gICAgICAgIGxvZy5pbmZvKCdEZXZpY2Uuc3RhcnRQb2xsaW5nOiAnICsgRGV2aWNlLlBPTExfSU5URVJWQUwgKyAnIG1zJyk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRpYyBwb2xsKCkge1xyXG4gICAgICAgIGlmICghIERldmljZS5kZXZpY2VJbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICBEZXZpY2UuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnRGV2aWNlLnBvbGwnKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBjaGVjayBvZiBEZXZpY2UuY2hlY2tzKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjay5jaGVjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==
