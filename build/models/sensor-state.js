"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sensor_data_1 = require("./sensor-data");
var SensorState = (function () {
    function SensorState() {
        this.sensors = [];
        this.sensorDataListeners = [];
    }
    SensorState.prototype.getSensorData = function () {
        return this.sensors.slice();
    };
    SensorState.prototype.addSensorDataListener = function (onSensorDataReceived) {
        this.sensorDataListeners.push(onSensorDataReceived);
    };
    SensorState.prototype.updateSensorDataListeners = function (sensorData) {
        for (var _i = 0, _a = this.sensorDataListeners; _i < _a.length; _i++) {
            var publish = _a[_i];
            publish(sensorData);
        }
    };
    SensorState.prototype.updateSensor = function (port, temperature) {
        if (this.sensors != null) {
            var sensor = this.sensors.find(function (s) { return s.getPort() === port; });
            if (sensor) {
                sensor.setValue(temperature);
                this.updateSensorDataListeners([sensor]);
                console.log('+++ SensorState.updateSensor, port: %d, temperature %d', port, temperature);
            }
            else {
                console.error('--- SensorState.updateSensor, undefined, port: %d, temperature %d', port, temperature);
            }
        }
        else {
            console.error('--- SensorState.updateSensor, no sensors, port: %d, temperature %d', port, temperature);
        }
    };
    SensorState.prototype.connectSensors = function (total, used) {
        console.log('+++ connectSensors, total:%d', total);
        if (this.sensors.length === 0) {
            this.sensors = Array(total);
            var bits = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
            var sensor = 0;
            for (var port = 0; port < bits.length; port++) {
                if ((used & bits[port]) === bits[port]) {
                    this.sensors[sensor] = new sensor_data_1.SensorData(port);
                    console.log('+++ connectSensors, port: %d', port);
                    sensor += 1;
                }
            }
            if (sensor !== total) {
                console.log('--- connectSensors, #sensors: %d !== total: %d', sensor, total);
                return;
            }
        }
    };
    return SensorState;
}());
exports.SensorState = SensorState;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvc2Vuc29yLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQTJDO0FBRTNDO0lBQUE7UUFHYyxZQUFPLEdBQWdCLEVBQUUsQ0FBQztRQUUxQix3QkFBbUIsR0FBd0MsRUFBRSxDQUFDO0lBdUQ1RSxDQUFDO0lBcERVLG1DQUFhLEdBQXBCO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUNNLDJDQUFxQixHQUE1QixVQUE2QixvQkFBb0Q7UUFDN0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFUywrQ0FBeUIsR0FBbkMsVUFBb0MsVUFBd0I7UUFDeEQsR0FBRyxDQUFDLENBQWtCLFVBQXdCLEVBQXhCLEtBQUEsSUFBSSxDQUFDLG1CQUFtQixFQUF4QixjQUF3QixFQUF4QixJQUF3QjtZQUF6QyxJQUFNLE9BQU8sU0FBQTtZQUNkLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFDUyxrQ0FBWSxHQUF0QixVQUF1QixJQUFZLEVBQUUsV0FBbUI7UUFDcEQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLElBQU0sTUFBTSxHQUEyQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLEVBQXBCLENBQW9CLENBQUMsQ0FBQztZQUNwRixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNULE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzdCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0RBQXdELEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzdGLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixPQUFPLENBQUMsS0FBSyxDQUFDLG1FQUFtRSxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztZQUMxRyxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osT0FBTyxDQUFDLEtBQUssQ0FBQyxvRUFBb0UsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0csQ0FBQztJQUNMLENBQUM7SUFDUyxvQ0FBYyxHQUF4QixVQUF5QixLQUFhLEVBQUUsSUFBWTtRQUNoRCxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25ELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQWEsS0FBSyxDQUFDLENBQUM7WUFDeEMsSUFBTSxJQUFJLEdBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEUsSUFBSSxNQUFNLEdBQVcsQ0FBQyxDQUFDO1lBR3ZCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDO2dCQUU1QyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksd0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDbEQsTUFBTSxJQUFJLENBQUMsQ0FBQztnQkFDaEIsQ0FBQztZQUNMLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFFbkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnREFBZ0QsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzdFLE1BQU0sQ0FBQztZQUNYLENBQUM7UUFDTCxDQUFDO0lBRUwsQ0FBQztJQUNMLGtCQUFDO0FBQUQsQ0E1REEsQUE0REMsSUFBQTtBQTVEWSxrQ0FBVyIsImZpbGUiOiJtb2RlbHMvc2Vuc29yLXN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2Vuc29yRGF0YSB9IGZyb20gJy4vc2Vuc29yLWRhdGEnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbnNvclN0YXRlIHtcclxuICAgIC8vIERldmljZSBoYXMgOCBwb3J0cywgZWFjaCBvZiB3aGljaCBjYW4gaG9sZCBhIDEtd2lyZSB0ZW1wZXJhdHVyZSBzZW5zb3JcclxuICAgIC8vIG9yIGEgaHVtaWRpdHkgc2Vuc29yLCBidXQgdGhlIGxhdHRlciBpcyBvdXQgb2Ygc2NvcGUuXHJcbiAgICBwcm90ZWN0ZWQgc2Vuc29yczogU2Vuc29yRGF0YVtdPSBbXTtcclxuICAgIC8vIHByaXZhdGUgIHVzZWRQb3J0czogbnVtYmVyW107XHJcbiAgICBwcm90ZWN0ZWQgc2Vuc29yRGF0YUxpc3RlbmVyczogQXJyYXk8KHNlbnNvcjogU2Vuc29yRGF0YVtdKT0+dm9pZD4gPSBbXTtcclxuXHJcblxyXG4gICAgcHVibGljIGdldFNlbnNvckRhdGEoKTogU2Vuc29yRGF0YVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZW5zb3JzLnNsaWNlKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkU2Vuc29yRGF0YUxpc3RlbmVyKG9uU2Vuc29yRGF0YVJlY2VpdmVkOiAoc2Vuc29yOiBTZW5zb3JEYXRhW10pID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbnNvckRhdGFMaXN0ZW5lcnMucHVzaCAob25TZW5zb3JEYXRhUmVjZWl2ZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCB1cGRhdGVTZW5zb3JEYXRhTGlzdGVuZXJzKHNlbnNvckRhdGE6IFNlbnNvckRhdGFbXSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcHVibGlzaCBvZiB0aGlzLnNlbnNvckRhdGFMaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgcHVibGlzaChzZW5zb3JEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlU2Vuc29yKHBvcnQ6IG51bWJlciwgdGVtcGVyYXR1cmU6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbnNvcnMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBzZW5zb3I6IFNlbnNvckRhdGEgfCB1bmRlZmluZWQgPSB0aGlzLnNlbnNvcnMuZmluZChzID0+IHMuZ2V0UG9ydCgpID09PSBwb3J0KTtcclxuICAgICAgICAgICAgaWYgKHNlbnNvcikge1xyXG4gICAgICAgICAgICAgICAgc2Vuc29yLnNldFZhbHVlKHRlbXBlcmF0dXJlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU2Vuc29yRGF0YUxpc3RlbmVycyhbc2Vuc29yXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnKysrIFNlbnNvclN0YXRlLnVwZGF0ZVNlbnNvciwgcG9ydDogJWQsIHRlbXBlcmF0dXJlICVkJywgcG9ydCwgdGVtcGVyYXR1cmUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignLS0tIFNlbnNvclN0YXRlLnVwZGF0ZVNlbnNvciwgdW5kZWZpbmVkLCBwb3J0OiAlZCwgdGVtcGVyYXR1cmUgJWQnLCBwb3J0LCB0ZW1wZXJhdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCctLS0gU2Vuc29yU3RhdGUudXBkYXRlU2Vuc29yLCBubyBzZW5zb3JzLCBwb3J0OiAlZCwgdGVtcGVyYXR1cmUgJWQnLCBwb3J0LCB0ZW1wZXJhdHVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIGNvbm5lY3RTZW5zb3JzKHRvdGFsOiBudW1iZXIsIHVzZWQ6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCcrKysgY29ubmVjdFNlbnNvcnMsIHRvdGFsOiVkJywgdG90YWwpO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbnNvcnMubGVuZ3RoID09PSAwKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbnNvcnMgPSBBcnJheTxTZW5zb3JEYXRhPih0b3RhbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJpdHM6IG51bWJlcltdID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODBdO1xyXG4gICAgICAgICAgICBsZXQgc2Vuc29yOiBudW1iZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGJpdCBhcnJheSBmb3IgdXNlZCBwb3J0cywgb25lIGJpdCBhdCBhIHRpbWVcclxuICAgICAgICAgICAgZm9yIChsZXQgcG9ydCA9IDA7IHBvcnQgPCBiaXRzLmxlbmd0aDsgcG9ydCsrKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCh1c2VkICYgYml0c1twb3J0XSkgPT09IGJpdHNbcG9ydF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbnNvcnNbc2Vuc29yXSA9IG5ldyBTZW5zb3JEYXRhKHBvcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgY29ubmVjdFNlbnNvcnMsIHBvcnQ6ICVkJywgcG9ydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vuc29yICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzZW5zb3IgIT09IHRvdGFsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBFcnJvciBoYW5kbGluZ1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLSBjb25uZWN0U2Vuc29ycywgI3NlbnNvcnM6ICVkICE9PSB0b3RhbDogJWQnLCBzZW5zb3IsIHRvdGFsKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbn1cclxuIl19
