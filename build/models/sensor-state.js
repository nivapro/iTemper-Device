"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("./../logger");
var sensor_data_1 = require("./sensor-data");
var Sensor = (function () {
    function Sensor() {
    }
    return Sensor;
}());
exports.Sensor = Sensor;
var SensorState = (function () {
    function SensorState() {
        this.sensors = [];
        this.sensorDataListeners = [];
    }
    SensorState.prototype.getSensorData = function () {
        var sensorData = [];
        for (var _i = 0, _a = this.sensors; _i < _a.length; _i++) {
            var sensor = _a[_i];
            sensorData.push(sensor.s);
        }
        return sensorData.slice();
    };
    SensorState.prototype.addSensorDataListener = function (onSensorDataReceived, filter) {
        this.sensorDataListeners.push({ listener: onSensorDataReceived, filter: filter });
    };
    SensorState.prototype.round = function (data, resolution) {
        var multiplier = Math.pow(10, resolution || 0);
        return Math.round(data.getValue() * multiplier) / multiplier;
    };
    SensorState.prototype.valueDiff = function (sensorData, previousData, resolution) {
        var valueDiff = Math.abs(this.round(sensorData, resolution) - this.round(previousData, resolution));
        logger_1.log.debug('value diff', valueDiff);
        return valueDiff > 0;
    };
    SensorState.prototype.timeDiff = function (sensorData, previousData, maxTimeDiff) {
        var timeDiff = sensorData.timestamp() - previousData.timestamp();
        logger_1.log.debug('Time diff: ', timeDiff);
        return timeDiff > maxTimeDiff;
    };
    SensorState.prototype.updateSensorDataListeners = function (sensorData, previousData) {
        logger_1.log.debug('updateSensorDataListeners');
        for (var _i = 0, _a = this.sensorDataListeners; _i < _a.length; _i++) {
            var publish = _a[_i];
            logger_1.log.debug('updateSensorDataListeners, filter:', publish.filter);
            if (!publish.filter) {
                logger_1.log.debug('updateSensorDataListeners, no filter found');
                publish.listener(sensorData);
                Object.assign(previousData, sensorData);
            }
            else if (publish.filter.resolution &&
                this.valueDiff(sensorData, previousData, publish.filter.resolution) && sensorData.valid()) {
                logger_1.log.debug('updateSensorDataListeners, publish.filter.resolution');
                publish.listener(sensorData);
                Object.assign(previousData, sensorData);
            }
            else if (publish.filter.maxTimeDiff && sensorData.valid() &&
                this.timeDiff(sensorData, previousData, publish.filter.maxTimeDiff)) {
                logger_1.log.debug('updateSensorDataListeners, publish.filter.maxTimeDiff');
                publish.listener(sensorData);
                Object.assign(previousData, sensorData);
            }
        }
    };
    SensorState.prototype.updateSensor = function (port, temperature) {
        if (this.sensors !== null) {
            var sensor = this.sensors.find(function (s) { return s.s.getPort() === port; });
            if (sensor) {
                sensor.s.setValue(temperature);
                this.updateSensorDataListeners(sensor.s, sensor.p);
                logger_1.log.debug('SensorState.updateSensor, port: %d, temperature %d', port, temperature);
            }
            else {
                logger_1.log.error('*** SensorState.updateSensor, undefined, port: %d, temperature %d', port, temperature);
            }
        }
        else {
            logger_1.log.error('*** SensorState.updateSensor, no sensors, port: %d, temperature %d', port, temperature);
        }
    };
    SensorState.prototype.connectSensors = function (total, used) {
        logger_1.log.debug('--- connectSensors, total:%d', total);
        if (this.sensors.length === 0) {
            this.sensors = new Array(total);
            logger_1.log.debug('connectSensors, this.sensors.length: ', this.sensors.length);
            var bits = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
            var sensorIndex = 0;
            for (var bit = 0; bit < bits.length; bit++) {
                if ((used & bits[bit]) === bits[bit]) {
                    var port = bit;
                    logger_1.log.debug('--- connectSensors, port: ', port);
                    this.sensors[sensorIndex] = { p: new sensor_data_1.SensorData(port), s: new sensor_data_1.SensorData(port) };
                    logger_1.log.debug('+++ connectSensors, port: %d', port);
                    sensorIndex += 1;
                }
            }
            if (sensorIndex !== total) {
                logger_1.log.error('*** connectSensors, #sensors: %d !== total: %d', sensorIndex, total);
                return;
            }
        }
    };
    return SensorState;
}());
exports.SensorState = SensorState;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
