"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sensor_state_1 = require("./sensor-state");
var TemperGold = (function (_super) {
    __extends(TemperGold, _super);
    function TemperGold() {
        var _this = _super.call(this) || this;
        _this.connectSensors(1, 1);
        return _this;
    }
    TemperGold.prototype.initReport = function () {
        return [this.temperatureRequest()];
    };
    TemperGold.prototype.parseInput = function (data) {
        try {
            console.log('+++ TemperGold.parseInput:', JSON.stringify(data));
            if (!this.matchTemperature(data)) {
                console.warn('--- no match: ', JSON.stringify(data));
            }
        }
        catch (e) {
            console.log(e);
        }
        return [];
    };
    TemperGold.prototype.temperatureRequest = function () {
        return [0x01, 0x80, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00];
    };
    TemperGold.prototype.matchTemperature = function (data) {
        if (data.length === 8
            && data[0] === 0x80
            && data[1] === 0x02) {
            console.log('+++ TemperGold.matchTemperature:', JSON.stringify(data));
            var port = 0;
            var msb = data[2];
            var lsb = data[3];
            var temperatureCelsius = this.GetTemperature(msb, lsb);
            this.updateSensor(port, temperatureCelsius);
            return true;
        }
        else {
            return false;
        }
    };
    TemperGold.prototype.GetTemperature = function (msb, lsb) {
        var temperature = 0.0;
        var reading = (lsb & 0xFF) + (msb << 8);
        var result = 1;
        if ((reading & 0x8000) > 0) {
            reading = (reading ^ 0xffff) + 1;
            result = -1;
        }
        temperature = result * reading / 256.0;
        return temperature;
    };
    return TemperGold;
}(sensor_state_1.SensorState));
exports.TemperGold = TemperGold;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdGVtcGVyLWdvbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsK0NBQTZDO0FBTzdDO0lBQWdDLDhCQUFXO0lBR3ZDO1FBQUEsWUFDSSxpQkFBTyxTQUVWO1FBREcsS0FBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0lBQzlCLENBQUM7SUFDTSwrQkFBVSxHQUFqQjtRQUNJLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVNLCtCQUFVLEdBQWpCLFVBQWtCLElBQWM7UUFDNUIsSUFBSSxDQUFDO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN6RCxDQUFDO1FBQ0wsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLENBQUM7UUFDRCxNQUFNLENBQUMsRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUtPLHVDQUFrQixHQUExQjtRQUNJLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBR1EscUNBQWdCLEdBQXpCLFVBQTBCLElBQWM7UUFLcEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO2VBQ2QsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUk7ZUFDaEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDdEUsSUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBTSxHQUFHLEdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQU0sR0FBRyxHQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFNLGtCQUFrQixHQUFXLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRWpFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUM7SUFDTCxDQUFDO0lBQ1EsbUNBQWMsR0FBdkIsVUFBd0IsR0FBVyxFQUFFLEdBQVc7UUFDNUMsSUFBSSxXQUFXLEdBQVcsR0FBRyxDQUFDO1FBRTlCLElBQUksT0FBTyxHQUFXLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBR2hELElBQUksTUFBTSxHQUFXLENBQUMsQ0FBQztRQUV2QixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBR3pCLE9BQU8sR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFHakMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLENBQUM7UUFLRCxXQUFXLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFFdkMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBQ0wsaUJBQUM7QUFBRCxDQTNFQSxBQTJFQyxDQTNFK0IsMEJBQVcsR0EyRTFDO0FBM0VZLGdDQUFVIiwiZmlsZSI6Im1vZGVscy90ZW1wZXItZ29sZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBTZW5zb3JTdGF0ZSB9IGZyb20gJy4vc2Vuc29yLXN0YXRlJztcclxuaW1wb3J0IHsgUmVwb3J0UGFyc2VyIH0gZnJvbSAnLi91c2ItY29udHJvbGxlcic7XHJcblxyXG5cclxuLy8gVGVtcGVyIEdvbGQgcGFyc2VyIHVuZGVyc3RhbmRzIEhJRCByZXBvcnRzIGZyb20gVGVtcGVyOCBkZXZpY2VzXHJcbi8vIEluZGVwZW5kZW50IG9mIFVTQiBsaWIgdXNlZC5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wZXJHb2xkIGV4dGVuZHMgU2Vuc29yU3RhdGUgaW1wbGVtZW50cyBSZXBvcnRQYXJzZXIge1xyXG4gICAgLy8gSW50ZXJmYWNlIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuY29ubmVjdFNlbnNvcnMoMSwgMSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaW5pdFJlcG9ydCgpOiBudW1iZXJbXVtdIHtcclxuICAgICAgICByZXR1cm4gW3RoaXMudGVtcGVyYXR1cmVSZXF1ZXN0KCldO1xyXG4gICAgfVxyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwYXJzZXMgYWxsIGlucHV0IHJlcG9ydHMgYW5kIGNoZWNrIHdoYXQgdG8gZG9cclxuICAgIHB1YmxpYyBwYXJzZUlucHV0KGRhdGE6IG51bWJlcltdKTogbnVtYmVyW10ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgVGVtcGVyR29sZC5wYXJzZUlucHV0OicsIEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm1hdGNoVGVtcGVyYXR1cmUoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignLS0tIG5vIG1hdGNoOiAnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUG9sbCB0ZW1wZXJhdHVyZSBhbmQgdXBkYXRlIHNlbnNvciBkYXRhXHJcblxyXG4gICAgLy8gYnl0ZSBzdHJpbmcgZm9yIHJlcXVlc3RpbmcgdGhlIHRlbXBlcmF0dXJlIGZyb20gVGVtcGVyIEdvbGRcclxuICAgIHByaXZhdGUgdGVtcGVyYXR1cmVSZXF1ZXN0KCk6IG51bWJlcltdIHtcclxuICAgICAgICByZXR1cm4gWzB4MDEsIDB4ODAsIDB4MzMsIDB4MDEsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoaXMgbWV0aG9kcyB1cGRhdGUgc2Vuc29yIHN0YXRlIGlmICBkYXRhIGNvbnRhaW5zIHRoZSB0ZW1wZXJhdHVyZSBieXRlIHN0cmluZ1xyXG4gICAgcHJpdmF0ZSAgbWF0Y2hUZW1wZXJhdHVyZShkYXRhOiBudW1iZXJbXSkge1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGlucHV0IHJlcG9ydCBpcyBhIHRlbXBlcmF0dXJlIHJlcG9ydCxcclxuICAgICAgICAvLyBUaGVzZSBoZXggdmFsdWVzIHdlcmUgZm91bmQgYnkgYW5hbHl6aW5nIFVTQiB1c2luZyBVU0JseXplci5cclxuICAgICAgICAvLyBJLmUuIHRoZXkgbWlnaHQgYmUgZGlmZmVyZW50IG9uIHlvdXIgRGV2aWNlIGRldmljZVxyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gOFxyXG4gICAgICAgICAgICAmJiBkYXRhWzBdID09PSAweDgwXHJcbiAgICAgICAgICAgICYmIGRhdGFbMV0gPT09IDB4MDIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJysrKyBUZW1wZXJHb2xkLm1hdGNoVGVtcGVyYXR1cmU6JywgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG4gICAgICAgICAgICBjb25zdCBwb3J0ID0gMDtcclxuICAgICAgICAgICAgY29uc3QgbXNiOiBudW1iZXIgPSBkYXRhWzJdO1xyXG4gICAgICAgICAgICBjb25zdCBsc2I6IG51bWJlciA9IGRhdGFbM107XHJcbiAgICAgICAgICAgIGNvbnN0IHRlbXBlcmF0dXJlQ2Vsc2l1czogbnVtYmVyID0gdGhpcy5HZXRUZW1wZXJhdHVyZShtc2IsIGxzYik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlbnNvcihwb3J0LCB0ZW1wZXJhdHVyZUNlbHNpdXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSAgR2V0VGVtcGVyYXR1cmUobXNiOiBudW1iZXIsIGxzYjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgdGVtcGVyYXR1cmU6IG51bWJlciA9IDAuMDtcclxuXHJcbiAgICAgICAgbGV0IHJlYWRpbmc6IG51bWJlciA9IChsc2IgJiAweEZGKSArIChtc2IgPDwgOCk7XHJcblxyXG4gICAgICAgIC8vIEFzc3VtZSBwb3NpdGl2ZSB0ZW1wZXJhdHVyZSB2YWx1ZVxyXG4gICAgICAgIGxldCByZXN1bHQ6IG51bWJlciA9IDE7XHJcblxyXG4gICAgICAgIGlmICgocmVhZGluZyAmIDB4ODAwMCkgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIEJlbG93IHplcm9cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBhYnNvbHV0ZSB2YWx1ZSBieSBjb252ZXJ0aW5nIHR3bydzIGNvbXBsZW1lbnRcclxuICAgICAgICAgICAgcmVhZGluZyA9IChyZWFkaW5nIF4gMHhmZmZmKSArIDE7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1lbWJlciBhIG5lZ2F0aXZlIHJlc3VsdFxyXG4gICAgICAgICAgICByZXN1bHQgPSAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZSBlYXN0IHNpZ25pZmljYW50IGJpdCBpcyAyXi04IHNvIHdlIG5lZWQgdG8gZGl2aWRlIGJ5IDI1NiB0byBnZXQgYWJzb2x1dGUgdGVtcGVyYXR1cmUgaW4gQ2Vsc2l1c1xyXG4gICAgICAgIC8vIFRoZW4gd2UgbXVsdGlwbHkgaW4gdGhlIHJlc3VsdCB0byBnZXQgd2hldGhlciB0aGUgdGVtcGVyYXR1cmUgaXMgYmVsb3cgemVybyBkZWdyZWVzIGFuZCBjb252ZXJ0IHRvXHJcbiAgICAgICAgLy8gZmxvYXRpbmcgcG9pbnRcclxuICAgICAgICB0ZW1wZXJhdHVyZSA9IHJlc3VsdCAqIHJlYWRpbmcgLyAyNTYuMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBlcmF0dXJlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==
