"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sensor_attributes_1 = require("./sensor-attributes");
var sensor_state_1 = require("./sensor-state");
var logger_1 = require("../logger");
var Temper8 = (function (_super) {
    __extends(Temper8, _super);
    function Temper8() {
        var _this = _super.call(this, new sensor_attributes_1.SensorAttributes('Temper8', 'Tempe', sensor_attributes_1.SensorCategory.Temperature, 0.5, 1, 0.2)) || this;
        _this.nextSensor = 0;
        return _this;
    }
    Temper8.prototype.initWriteReport = function () {
        this.nextSensor = 0;
        return [this.usedPortsRequest(), this.temperatureRequest(this.nextSensor)];
    };
    Temper8.prototype.readReport = function (data) {
        try {
            if (this.matchUsedPorts(data)) {
                logger_1.log.debug('+++ Temper8.matchUsedPorts:', data);
                var response = this.temperatureRequest(this.sensors[this.nextSensor].s.getPort());
                this.nextSensor += 1;
                return response;
            }
            else if (this.matchTemperature(data)) {
                logger_1.log.debug('+++ Temper8.matchTemperature:', data);
                if (this.nextSensor < this.sensors.length) {
                    var response = this.temperatureRequest(this.sensors[this.nextSensor].s.getPort());
                    this.nextSensor += 1;
                    return response;
                }
                else {
                    this.nextSensor = 0;
                    return this.check03Request();
                }
            }
            else if (this.matchCheck03(data)) {
                return this.check05Request();
            }
            else if (this.matchCheck05(data)) {
                return this.check0DRequest();
            }
            else if (this.matchCheck0D(data)) {
                return [];
            }
            else if (this.matchCheckFF(data)) {
                logger_1.log.error('*** Temper8.matchCheckFF: restart?');
                throw Error('*** Temper8.matchCheckFF');
            }
        }
        catch (e) {
            logger_1.log.error(e);
        }
        return [];
    };
    Temper8.prototype.usedPortsRequest = function () {
        return [0x01, 0x8A, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.getUsedPorts = function (total, used) {
        var usedPorts = new Array(total);
        var bits = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
        var portIndex = 0;
        for (var bit = 0; bit < bits.length; bit++) {
            if ((used & bits[bit]) === bits[bit]) {
                var port = bit;
                usedPorts[portIndex] = port;
                logger_1.log.debug('+++ Temper8: Sensor connected to port: ' + port);
                portIndex += 1;
            }
        }
        return usedPorts;
    };
    Temper8.prototype.matchUsedPorts = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x01) {
            this.connectSensors(this.getUsedPorts(data[4], data[5]));
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.temperatureRequest = function (port) {
        return [0x01, 0x80, 0x01, 0x00, 0x00, port, 0x00, 0x00];
    };
    Temper8.prototype.matchTemperature = function (data) {
        if (data.length === 8
            && data[0] === 0x80
            && data[1] === 0x08
            && data[2] === 0x01) {
            logger_1.log.debug('+++ matchTemperature, data: %d', data);
            var port = data[4];
            var msb = data[5];
            var lsb = data[6];
            var temperatureCelsius = this.GetTemperature(msb, lsb);
            this.updateSensor(port, temperatureCelsius);
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.GetTemperature = function (msb, lsb) {
        var temperature = 0.0;
        var reading = (lsb & 0xFF) + (msb << 8);
        var result = 1;
        if ((reading & 0x8000) > 0) {
            reading = (reading ^ 0xffff) + 1;
            result = -1;
        }
        temperature = result * reading / 16.0;
        return temperature;
    };
    Temper8.prototype.check03Request = function () {
        return [0x01, 0x8A, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck03 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x03) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check05Request = function () {
        return [0x01, 0x8A, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck05 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x05) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check0DRequest = function () {
        return [0x01, 0x8A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck0D = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x0D) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.matchCheckFF = function (data) {
        if (data.length === 8
            && data[0] === 0xFF
            && data[1] === 0xFF
            && data[2] === 0xFF
            && data[3] === 0xFF) {
            return true;
        }
        else {
            return false;
        }
    };
    return Temper8;
}(sensor_state_1.SensorState));
exports.Temper8 = Temper8;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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aEI7SUFDTCxDQUFDO0lBRUwsY0FBQztBQUFELENBMU5BLEFBME5DLENBMU40QiwwQkFBVyxHQTBOdkM7QUExTlksMEJBQU8iLCJmaWxlIjoibW9kZWxzL3RlbXBlci04LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IFNlbnNvckF0dHJpYnV0ZXMsIFNlbnNvckNhdGVnb3J5IH0gZnJvbSAnLi9zZW5zb3ItYXR0cmlidXRlcyc7XHJcbmltcG9ydCB7IFNlbnNvclN0YXRlIH0gZnJvbSAnLi9zZW5zb3Itc3RhdGUnO1xyXG5pbXBvcnQgeyBVU0JSZXBvcnRlciB9IGZyb20gJy4vdXNiLWRldmljZSc7XHJcblxyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5cclxuXHJcbi8vIFRlbXBlcjggcGFyc2VyIHVuZGVyc3RhbmRzIEhJRCByZXBvcnRzIGZyb20gVGVtcGVyOCBkZXZpY2VzXHJcbi8vIEluZGVwZW5kZW50IG9mIFVTQiBsaWIgdXNlZC5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZW1wZXI4IGV4dGVuZHMgU2Vuc29yU3RhdGUgaW1wbGVtZW50cyBVU0JSZXBvcnRlciB7XHJcbiAgICAvLyBEZXZpY2UgaGFzIDggcG9ydHMsIGVhY2ggb2Ygd2hpY2ggY2FuIGhvbGQgYSAxLXdpcmUgdGVtcGVyYXR1cmUgc2Vuc29yXHJcbiAgICAvLyBUaGUgc2Vuc29ycyBhcmUgcG9sbGVkIGluIHNlcXVlbmNlLCBzdGFydGluZyBmcm9tIHBvcnQgMCB0byBwb3J0IDcuXHJcbiAgICAvLyBXZSBkbyBub3Qga25vdyBob3cgbWFueSBzZW5zb3JzIGFyZSBjb25uZWN0ZWQgdW50aWwgd2UgcmVjZWl2ZWQgdGhlIGNvbmZpZ1xyXG4gICAgLy8gaW4gYSBVU0IgSElEIHJlcG9ydFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKG5ldyBTZW5zb3JBdHRyaWJ1dGVzIChcclxuICAgICAgICAgICAgJ1RlbXBlcjgnLFxyXG4gICAgICAgICAgICAnVGVtcGUnLFxyXG4gICAgICAgICAgICBTZW5zb3JDYXRlZ29yeS5UZW1wZXJhdHVyZSxcclxuICAgICAgICAgICAgMC41LCAxLCAwLjIpKTtcclxuXHJcbiAgICB9XHJcbiAgICAvLyBUcmFjayB3aGF0IHNlbnNvciB3ZSBzaG91bGQgcmVxdWVzdCB2YWx1ZSBmcm9tIG5leHQgdGltZVxyXG4gICAgcHJvdGVjdGVkIG5leHRTZW5zb3I6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLy8gSW50ZXJmYWNlIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cclxuXHJcbiAgICBwdWJsaWMgaW5pdFdyaXRlUmVwb3J0KCk6IG51bWJlcltdW10ge1xyXG4gICAgLy8gVGhpcyBzdGFydHMgdGhlIHBvbGxpbmcuIEZpcnN0IHdlIGFzayB0aGUgZGV2aWNlIGFib3V0IHNlbnNvcnMgYXR0YWNoZWQgY29uZmlndXJhdGlvblxyXG4gICAgLy8gV2UgYWxzbyByZXF1ZXN0IHRlbXBlcmF0dXJlIGZyb20gcG9ydCB6ZXJvIChmb3IgdGhlIHNha2Ugb2YgaXQsIHVuY2xlYXIgcmVhc29uKVxyXG4gICAgICAgIHRoaXMubmV4dFNlbnNvciA9IDA7XHJcbiAgICAgICAgcmV0dXJuIFt0aGlzLnVzZWRQb3J0c1JlcXVlc3QoKSwgdGhpcy50ZW1wZXJhdHVyZVJlcXVlc3QodGhpcy5uZXh0U2Vuc29yKV07XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBwYXJzZXMgYWxsIGlucHV0IHJlcG9ydHMgYW5kIGNoZWNrIHdoYXQgdG8gZG9cclxuICAgIC8vIFdlIGFyZSBpbnRlcmVzdGVkIGluIHR3byB0eXBlcyBvZiBkYXRhIGZyb20gdGhlIGRldmljZTogd2hpY2ggcG9ydHMgYXJlIHVzZWQgYW5kXHJcbiAgICAvLyB0aGUgdGVtcGVyYXR1cmUgb2YgdGhlIHNlbnNvcnMgY29ubmVjdGVkLlxyXG4gICAgcHVibGljIHJlYWRSZXBvcnQoZGF0YTogbnVtYmVyW10pOiBudW1iZXJbXSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubWF0Y2hVc2VkUG9ydHMoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZygnKysrIFRlbXBlcjgubWF0Y2hVc2VkUG9ydHM6JywgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHRoaXMudGVtcGVyYXR1cmVSZXF1ZXN0KHRoaXMuc2Vuc29yc1t0aGlzLm5leHRTZW5zb3JdLnMuZ2V0UG9ydCgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dFNlbnNvciArPSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoVGVtcGVyYXR1cmUoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5kZWJ1ZygnKysrIFRlbXBlcjgubWF0Y2hUZW1wZXJhdHVyZTonLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRTZW5zb3IgPCB0aGlzLnNlbnNvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLnRlbXBlcmF0dXJlUmVxdWVzdCh0aGlzLnNlbnNvcnNbdGhpcy5uZXh0U2Vuc29yXS5zLiBnZXRQb3J0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFNlbnNvciArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFNlbnNvciA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2swM1JlcXVlc3QoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoQ2hlY2swMyhkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2swNVJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaENoZWNrMDUoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrMERSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tYXRjaENoZWNrMEQoZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1hdGNoQ2hlY2tGRihkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKCcqKiogVGVtcGVyOC5tYXRjaENoZWNrRkY6IHJlc3RhcnQ/Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGluZGljYXRlcyBmYXVsdCBkZXZpY2VcclxuICAgICAgICAgICAgICAgIC8vIERvbid0IGtub3cgd2hldGhlciB0aGVyZSBpcyBhIHdheSB0byByZWNvdmVyXHJcbiAgICAgICAgICAgICAgICAvLyBNYXliZSByZXN0YXJ0aW5nIHRoZSBkZXZpY2UgaXMgbmVjZXNzYXJ5LlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJyoqKiBUZW1wZXI4Lm1hdGNoQ2hlY2tGRicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBsb2cuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUZW1wZXIgOCBzcGVjaWZpYyBtZXRob2RzXHJcbiAgICAvLyBQb2xsIHVzZWQgcG9ydHNcclxuICAgIHByaXZhdGUgdXNlZFBvcnRzUmVxdWVzdCgpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFsweDAxLCAweDhBLCAweDAxLCAweDAxLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFVzZWRQb3J0cyh0b3RhbDogbnVtYmVyLCB1c2VkOiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgY29uc3QgdXNlZFBvcnRzID0gbmV3IEFycmF5PG51bWJlcj4odG90YWwpO1xyXG4gICAgICAgIGNvbnN0IGJpdHM6IG51bWJlcltdID0gWzB4MDEsIDB4MDIsIDB4MDQsIDB4MDgsIDB4MTAsIDB4MjAsIDB4NDAsIDB4ODBdO1xyXG5cclxuICAgICAgICBsZXQgcG9ydEluZGV4ID0gMDtcclxuICAgICAgICAvLyBDaGVjayB0aGUgYml0IGFycmF5IGZvciB1c2VkIHBvcnRzLCBvbmUgYml0IGF0IGEgdGltZVxyXG4gICAgICAgIGZvciAobGV0IGJpdCA9IDA7IGJpdCA8IGJpdHMubGVuZ3RoOyBiaXQrKykge1xyXG4gICAgICAgICAgICBpZiAoKHVzZWQgJiBiaXRzW2JpdF0pID09PSBiaXRzW2JpdF0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcnQgPSBiaXQ7XHJcbiAgICAgICAgICAgICAgICB1c2VkUG9ydHNbcG9ydEluZGV4XSA9IHBvcnQ7XHJcbiAgICAgICAgICAgICAgICBsb2cuZGVidWcoJysrKyBUZW1wZXI4OiBTZW5zb3IgY29ubmVjdGVkIHRvIHBvcnQ6ICcgKyBwb3J0KTtcclxuICAgICAgICAgICAgICAgIHBvcnRJbmRleCArPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdXNlZFBvcnRzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBtYXRjaFVzZWRQb3J0cyhkYXRhOiBudW1iZXJbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgcmVwb3J0IHN0YXRlcyBzZW5zb3JzXHJcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSB0aGlzLiBUaGVzZSBoZXggdmFsdWVzIHdlcmUgZm91bmQgYnkgdXNpbmcgdXNpbmcgVVNCbHl6ZXJcclxuICAgICAgICAvLyBJLmUuIHRoZXkgbWlnaHQgYmUgZGlmZmVyZW50IG9uIHlvdXIgRGV2aWNlIGRldmljZVxyXG5cclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDhcclxuICAgICAgICAgICAgJiYgZGF0YVswXSA9PT0gMHg4QVxyXG4gICAgICAgICAgICAmJiBkYXRhWzFdID09PSAweDA4XHJcbiAgICAgICAgICAgICYmIGRhdGFbMl0gPT09IDB4MDFcclxuICAgICAgICAgICAgJiYgZGF0YVszXSA9PT0gMHgwMSkge1xyXG5cclxuICAgICAgICAgICAgLy8gQnl0ZSA0IGNvbnRhaW5zIG5vIG9mIHNlbnNvcnMgY29ubmVjdGVkIHRvIFRlbXBlcjggYW5kXHJcbiAgICAgICAgICAgIC8vIEJ5dGUgNSBjb250YWlucyBhIGJpdCBhcnJheSBvZiBwb3J0cyB1c2VkIGJ5IHRoZSBzZW5zb3JzXHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdFNlbnNvcnModGhpcy5nZXRVc2VkUG9ydHMoZGF0YVs0XSwgZGF0YVs1XSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gUG9sbCB0ZW1wZXJhdHVyZSBhbmQgdXBkYXRlIHNlbnNvciBkYXRhXHJcbiAgICBwcml2YXRlIHRlbXBlcmF0dXJlUmVxdWVzdChwb3J0OiBudW1iZXIpOiBudW1iZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFsweDAxLCAweDgwLCAweDAxLCAweDAwLCAweDAwLCBwb3J0LCAweDAwLCAweDAwXTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgIG1hdGNoVGVtcGVyYXR1cmUoZGF0YTogbnVtYmVyW10pIHtcclxuICAgICAgICAvLyBnZXQgdGhlIHRlbXBlcmF0dXJlIGFuZCB1cGRhdGUgc2Vuc29yIHZhbHVlXHJcblxyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgSElEIGlucHV0IHJlcG9ydCBpcyBhIHRlbXBlcmF0dXJlIHJlcG9ydCxcclxuICAgICAgICAvLyBUaGVzZSBoZXggdmFsdWVzIHdlcmUgZm91bmQgYnkgYW5hbHl6aW5nIFVTQiB1c2luZyBVU0JseXplci5cclxuICAgICAgICAvLyBJLmUuIHRoZXkgbWlnaHQgYmUgZGlmZmVyZW50IG9uIHlvdXIgRGV2aWNlIGRldmljZVxyXG4gICAgICAgIC8vIGJ5dGUgNCBjb250YWlucyB0aGUgcG9ydCBudW1iZXIuXHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSA4XHJcbiAgICAgICAgICAgICYmIGRhdGFbMF0gPT09IDB4ODBcclxuICAgICAgICAgICAgJiYgZGF0YVsxXSA9PT0gMHgwOFxyXG4gICAgICAgICAgICAmJiBkYXRhWzJdID09PSAweDAxKSB7XHJcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnKysrIG1hdGNoVGVtcGVyYXR1cmUsIGRhdGE6ICVkJywgZGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcnQ6IG51bWJlciA9IGRhdGFbNF07XHJcbiAgICAgICAgICAgIGNvbnN0IG1zYjogbnVtYmVyID0gZGF0YVs1XTtcclxuICAgICAgICAgICAgY29uc3QgbHNiOiBudW1iZXIgPSBkYXRhWzZdO1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wZXJhdHVyZUNlbHNpdXM6IG51bWJlciA9IHRoaXMuR2V0VGVtcGVyYXR1cmUobXNiLCBsc2IpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZW5zb3IocG9ydCwgdGVtcGVyYXR1cmVDZWxzaXVzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgIEdldFRlbXBlcmF0dXJlKG1zYjogbnVtYmVyLCBsc2I6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHRlbXBlcmF0dXJlOiBudW1iZXIgPSAwLjA7XHJcblxyXG4gICAgICAgIGxldCByZWFkaW5nOiBudW1iZXIgPSAobHNiICYgMHhGRikgKyAobXNiIDw8IDgpO1xyXG5cclxuICAgICAgICAvLyBBc3N1bWUgcG9zaXRpdmUgdGVtcGVyYXR1cmUgdmFsdWVcclxuICAgICAgICBsZXQgcmVzdWx0OiBudW1iZXIgPSAxO1xyXG5cclxuICAgICAgICBpZiAoKHJlYWRpbmcgJiAweDgwMDApID4gMCkge1xyXG4gICAgICAgICAgICAvLyBCZWxvdyB6ZXJvXHJcbiAgICAgICAgICAgIC8vIGdldCB0aGUgYWJzb2x1dGUgdmFsdWUgYnkgY29udmVydGluZyB0d28ncyBjb21wbGVtZW50XHJcbiAgICAgICAgICAgIHJlYWRpbmcgPSAocmVhZGluZyBeIDB4ZmZmZikgKyAxO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVtZW1iZXIgYSBuZWdhdGl2ZSByZXN1bHRcclxuICAgICAgICAgICAgcmVzdWx0ID0gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUaGUgZWFzdCBzaWduaWZpY2FudCBiaXQgaXMgMl4tNCBzbyB3ZSBuZWVkIHRvIGRpdmlkZSBieSAxNiB0byBnZXQgYWJzb2x1dGUgdGVtcGVyYXR1cmUgaW4gQ2Vsc2l1c1xyXG4gICAgICAgIC8vIE11bHRpcGx5IGluIHRoZSByZXN1bHQgdG8gZ2V0IHdoZXRoZXIgdGhlIHRlbXBlcmF0dXJlIGlzIGJlbG93IHplcm8gZGVncmVlcyBhbmQgY29udmVydCB0b1xyXG4gICAgICAgIC8vIGZsb2F0aW5nIHBvaW50XHJcbiAgICAgICAgdGVtcGVyYXR1cmUgPSByZXN1bHQgKiByZWFkaW5nIC8gMTYuMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRlbXBlcmF0dXJlO1xyXG4gICAgfVxyXG4gICAgLy8gUG9sbCBjaGVja3NcclxuICAgIHByaXZhdGUgIGNoZWNrMDNSZXF1ZXN0KCkge1xyXG4gICAgICAgIHJldHVybiBbMHgwMSwgMHg4QSwgMHgwMSwgMHgwMywgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XHJcbiAgICB9XHJcbiAgICBwcml2YXRlICBtYXRjaENoZWNrMDMoZGF0YTogbnVtYmVyW10pIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDhcclxuICAgICAgICAgICAgJiYgZGF0YVswXSA9PT0gMHg4QVxyXG4gICAgICAgICAgICAmJiBkYXRhWzFdID09PSAweDA4XHJcbiAgICAgICAgICAgICYmIGRhdGFbMl0gPT09IDB4MDFcclxuICAgICAgICAgICAgJiYgZGF0YVszXSA9PT0gMHgwMykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjaGVjazA1UmVxdWVzdCgpIHtcclxuICAgICAgICByZXR1cm4gWzB4MDEsIDB4OEEsIDB4MDEsIDB4MDUsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSAgbWF0Y2hDaGVjazA1KGRhdGE6IG51bWJlcltdKSB7XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSA4XHJcbiAgICAgICAgICAgICYmIGRhdGFbMF0gPT09IDB4OEFcclxuICAgICAgICAgICAgJiYgZGF0YVsxXSA9PT0gMHgwOFxyXG4gICAgICAgICAgICAmJiBkYXRhWzJdID09PSAweDAxXHJcbiAgICAgICAgICAgICYmIGRhdGFbM10gPT09IDB4MDUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgIGNoZWNrMERSZXF1ZXN0KCkge1xyXG4gICAgICAgIHJldHVybiBbMHgwMSwgMHg4QSwgMHgwMSwgMHgwRCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XHJcbiAgICB9XHJcbiAgICBwcml2YXRlICBtYXRjaENoZWNrMEQoZGF0YTogbnVtYmVyW10pIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDhcclxuICAgICAgICAgICAgJiYgZGF0YVswXSA9PT0gMHg4QVxyXG4gICAgICAgICAgICAmJiBkYXRhWzFdID09PSAweDA4XHJcbiAgICAgICAgICAgICYmIGRhdGFbMl0gPT09IDB4MDFcclxuICAgICAgICAgICAgJiYgZGF0YVszXSA9PT0gMHgwRCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gcHJpdmF0ZSAgY2hlY2tGRlJlcXVlc3QoKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIFsweEZGLCAweEZGLCAweEZGLCAweEZGLCAweEZGLCAweEZGLCAweEZGLCAweEZGXTtcclxuICAgIC8vIH1cclxuICAgIHByaXZhdGUgIG1hdGNoQ2hlY2tGRihkYXRhOiBudW1iZXJbXSkge1xyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gOFxyXG4gICAgICAgICAgICAmJiBkYXRhWzBdID09PSAweEZGXHJcbiAgICAgICAgICAgICYmIGRhdGFbMV0gPT09IDB4RkZcclxuICAgICAgICAgICAgJiYgZGF0YVsyXSA9PT0gMHhGRlxyXG4gICAgICAgICAgICAmJiBkYXRhWzNdID09PSAweEZGKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==
