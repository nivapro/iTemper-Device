"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var sensor_state_1 = require("./sensor-state");
var Temper8 = (function (_super) {
    __extends(Temper8, _super);
    function Temper8() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nextSensor = 0;
        return _this;
    }
    Temper8.prototype.initReport = function () {
        this.nextSensor = 0;
        return [this.usedPortsRequest(), this.temperatureRequest(this.nextSensor)];
    };
    Temper8.prototype.parseInput = function (data) {
        try {
            console.log('+++ Temper8.parseInput:', JSON.stringify(data));
            if (this.matchUsedPorts(data)) {
                var response = this.temperatureRequest(this.sensors[this.nextSensor].getPort());
                this.nextSensor += 1;
                return response;
            }
            else if (this.matchTemperature(data)) {
                console.log('+++ Temper8.matchTemperature:', JSON.stringify(data));
                if (this.nextSensor < this.sensors.length) {
                    var response = this.temperatureRequest(this.sensors[this.nextSensor].getPort());
                    this.nextSensor += 1;
                    return response;
                }
                else {
                    this.nextSensor = 0;
                    return this.check03Request();
                }
            }
            else if (this.matchCheck03(data)) {
                return this.check05Request();
            }
            else if (this.matchCheck05(data)) {
                return this.check0DRequest();
            }
            else if (this.matchCheck0D(data)) {
                return [];
            }
            else if (this.matchCheckFF(data)) {
                console.error('--- Temper8.matchCheckFF: restart?');
                throw Error('--- Temper8.matchCheckFF');
            }
        }
        catch (e) {
            console.log(e);
        }
        return [];
    };
    Temper8.prototype.usedPortsRequest = function () {
        return [0x01, 0x8A, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchUsedPorts = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x01) {
            this.connectSensors(data[4], data[5]);
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.temperatureRequest = function (port) {
        return [0x01, 0x80, 0x01, 0x00, 0x00, port, 0x00, 0x00];
    };
    Temper8.prototype.matchTemperature = function (data) {
        if (data.length === 8
            && data[0] === 0x80
            && data[1] === 0x08
            && data[2] === 0x01) {
            console.log('+matchTemperature, data: %d', JSON.stringify(data));
            var port = data[4];
            var msb = data[5];
            var lsb = data[6];
            var temperatureCelsius = this.GetTemperature(msb, lsb);
            this.updateSensor(port, temperatureCelsius);
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.GetTemperature = function (msb, lsb) {
        var temperature = 0.0;
        var reading = (lsb & 0xFF) + (msb << 8);
        var result = 1;
        if ((reading & 0x8000) > 0) {
            reading = (reading ^ 0xffff) + 1;
            result = -1;
        }
        temperature = result * reading / 16.0;
        return temperature;
    };
    Temper8.prototype.check03Request = function () {
        return [0x01, 0x8A, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck03 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x03) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check05Request = function () {
        return [0x01, 0x8A, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck05 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x05) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check0DRequest = function () {
        return [0x01, 0x8A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck0D = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x0D) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.matchCheckFF = function (data) {
        if (data.length === 8
            && data[0] === 0xFF
            && data[1] === 0xFF
            && data[2] === 0xFF
            && data[3] === 0xFF) {
            return true;
        }
        else {
            return false;
        }
    };
    return Temper8;
}(sensor_state_1.SensorState));
exports.Temper8 = Temper8;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
