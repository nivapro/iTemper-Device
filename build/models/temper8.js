"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sensor_1 = require("./sensor");
var Temper8 = (function () {
    function Temper8() {
        this.sensors = [];
        this.nextSensor = 0;
        this.unrecoverableError = false;
    }
    Temper8.prototype.initReport = function () {
        return [this.usedPortsRequest(), this.temperatureRequest(0)];
    };
    Temper8.prototype.parseInput = function (data) {
        try {
            if (this.matchUsedPorts(data)) {
                var response = this.temperatureRequest(this.sensors[this.nextSensor].port());
                this.nextSensor += 1;
                return response;
            }
            else if (this.matchTemperature(data)) {
                if (this.nextSensor < this.sensors.length) {
                    var response = this.temperatureRequest(this.sensors[this.nextSensor].port());
                    this.nextSensor += 1;
                    return response;
                }
                else {
                    this.nextSensor = 0;
                    return this.check03Request();
                }
            }
            else if (this.matchCheck03(data)) {
                return this.check05Request();
            }
            else if (this.matchCheck05(data)) {
                return this.check0DRequest();
            }
            else if (this.matchCheck0D(data)) {
                return [];
            }
            else if (this.matchCheckFF(data)) {
                console.log('--matchCheckFF: restart');
                this.updateOnErrorListeners();
                return [];
            }
        }
        catch (e) {
            console.log(e);
        }
        return [];
    };
    Temper8.prototype.getSensorData = function () {
        return this.sensors.slice();
    };
    Temper8.prototype.addSensorDataListener = function (onSensorDataReceived) {
        this.sensorDataListeners.push(onSensorDataReceived);
    };
    Temper8.prototype.addUnrecoverableErrorListener = function (onError) {
        this.errorListeners.push(onError);
    };
    Temper8.prototype.updateSensorDataListeners = function (sensorData) {
        for (var _i = 0, _a = this.sensorDataListeners; _i < _a.length; _i++) {
            var publish = _a[_i];
            publish(sensorData);
        }
    };
    Temper8.prototype.updateOnErrorListeners = function () {
        if (!this.unrecoverableError) {
            this.unrecoverableError = true;
            for (var _i = 0, _a = this.errorListeners; _i < _a.length; _i++) {
                var publish = _a[_i];
                publish();
            }
        }
    };
    Temper8.prototype.updateSensor = function (port, temperature) {
        if (this.sensors != null) {
            var sensor = this.sensors.find(function (s) { return s.port() === port; });
            if (sensor) {
                sensor.setValue(temperature);
                this.updateSensorDataListeners([sensor]);
                console.log('+updateSensor, port: %d, temperature %d', port, temperature);
            }
            else {
                console.error('-updateSensor - sensor undefined, port: %d, temperature %d', port, temperature);
            }
        }
        else {
            console.error('-updateSensor - no sensors, port: %d, temperature %d', port, temperature);
        }
    };
    Temper8.prototype.connectSensors = function (total, used) {
        console.log('connectSensors, total:%d', total);
        if (this.sensors.length === 0) {
            this.sensors = Array(total);
            var bits = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
            var sensor = 0;
            for (var port = 0; port < bits.length; port++) {
                if ((used & bits[port]) === bits[port]) {
                    this.sensors[sensor] = new sensor_1.Sensor(port);
                    console.log('connectSensors, port:%d', port);
                    sensor += 1;
                }
            }
            if (sensor !== total) {
                return;
            }
        }
    };
    Temper8.prototype.usedPortsRequest = function () {
        return [0x01, 0x8A, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchUsedPorts = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x01) {
            this.unrecoverableError = false;
            this.connectSensors(data[4], data[5]);
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.temperatureRequest = function (port) {
        return [0x01, 0x80, 0x01, 0x00, 0x00, port, 0x00, 0x00];
    };
    Temper8.prototype.matchTemperature = function (data) {
        if (data.length === 8
            && data[0] === 0x80
            && data[1] === 0x08
            && data[2] === 0x01) {
            console.log('+matchTemperature, data: %d', JSON.stringify(data));
            var port = data[4];
            var msb = data[5];
            var lsb = data[6];
            var temperatureCelsius = this.GetTemperature(msb, lsb);
            this.updateSensor(port, temperatureCelsius);
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.GetTemperature = function (msb, lsb) {
        var temperature = 0.0;
        var reading = (lsb & 0xFF) + (msb << 8);
        var result = 1;
        if ((reading & 0x8000) > 0) {
            reading = (reading ^ 0xffff) + 1;
            result = -1;
        }
        temperature = result * reading / 16.0;
        return temperature;
    };
    Temper8.prototype.check03Request = function () {
        return [0x01, 0x8A, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck03 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x03) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check05Request = function () {
        return [0x01, 0x8A, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck05 = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x05) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.check0DRequest = function () {
        return [0x01, 0x8A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00];
    };
    Temper8.prototype.matchCheck0D = function (data) {
        if (data.length === 8
            && data[0] === 0x8A
            && data[1] === 0x08
            && data[2] === 0x01
            && data[3] === 0x0D) {
            return true;
        }
        else {
            return false;
        }
    };
    Temper8.prototype.checkFFRequest = function () {
        return [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF];
    };
    Temper8.prototype.matchCheckFF = function (data) {
        if (data.length === 8
            && data[0] === 0xFF
            && data[1] === 0xFF
            && data[2] === 0xFF
            && data[3] === 0xFF) {
            return true;
        }
        else {
            return false;
        }
    };
    return Temper8;
}());
exports.Temper8 = Temper8;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
