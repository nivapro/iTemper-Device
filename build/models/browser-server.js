"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./../config");
var usb_controller_1 = require("./usb-controller");
function description(attr, sensorData) {
    return { SN: attr.SN, port: sensorData.getPort() };
}
function sensorSample(data) {
    return { value: data.getValue(), date: data.timestamp() };
}
function sensorLog(state) {
    var attr = state.getAttr();
    var sensorData = state.getSensorData();
    var samples = [];
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var data = sensorData_1[_i];
        samples.push(sensorSample(data));
    }
    return { descr: description(attr, sensorData[0]), samples: samples };
}
function getSensors(ws) {
    var loggers = usb_controller_1.USBController.getLoggers();
    var sensorLogs = [];
    for (var _i = 0, loggers_1 = loggers; _i < loggers_1.length; _i++) {
        var logger = loggers_1[_i];
        var state = logger.getState();
        sensorLogs.push(sensorLog(state));
    }
    var message = { descr: 'sensors', data: sensorLogs };
    ws.send(JSON.stringify(message));
}
exports.getSensors = getSensors;
function getSettings(ws) {
    var message = { descr: 'settings', data: [{ setting: 'hostname', value: config_1.HOSTNAME }] };
    ws.send(JSON.stringify(message));
}
exports.getSettings = getSettings;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvYnJvd3Nlci1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBdUM7QUFJdkMsbURBQWlEO0FBZWpELHFCQUFxQixJQUFzQixFQUFFLFVBQXNCO0lBQy9ELE9BQU8sRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUM7QUFDckQsQ0FBQztBQUVELHNCQUFzQixJQUFnQjtJQUNsQyxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELG1CQUFtQixLQUFrQjtJQUVqQyxJQUFNLElBQUksR0FBcUIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9DLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QyxJQUFNLE9BQU8sR0FBbUIsRUFBRSxDQUFDO0lBQ25DLEtBQW1CLFVBQVUsRUFBVix5QkFBVSxFQUFWLHdCQUFVLEVBQVYsSUFBVSxFQUFFO1FBQTFCLElBQU0sSUFBSSxtQkFBQTtRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDcEM7SUFDRCxPQUFPLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUUvRCxDQUFDO0FBQ0Qsb0JBQTJCLEVBQWE7SUFDcEMsSUFBTSxPQUFPLEdBQUcsOEJBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMzQyxJQUFNLFVBQVUsR0FBZ0IsRUFBRSxDQUFDO0lBQ25DLEtBQXFCLFVBQU8sRUFBUCxtQkFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTyxFQUFFO1FBQXpCLElBQU0sTUFBTSxnQkFBQTtRQUNiLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNoQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ3JDO0lBQ0QsSUFBTSxPQUFPLEdBQUcsRUFBQyxLQUFLLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUMsQ0FBQztJQUNwRCxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBVEQsZ0NBU0M7QUFFRCxxQkFBNEIsRUFBYTtJQUNyQyxJQUFNLE9BQU8sR0FBRyxFQUFDLEtBQUssRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxpQkFBUSxFQUFDLENBQUMsRUFBQyxDQUFDO0lBQ25GLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFIRCxrQ0FHQyIsImZpbGUiOiJtb2RlbHMvYnJvd3Nlci1zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIT1NUTkFNRSB9IGZyb20gJy4vLi4vY29uZmlnJztcclxuaW1wb3J0IHsgU2Vuc29yQXR0cmlidXRlcyB9IGZyb20gJy4vc2Vuc29yLWF0dHJpYnV0ZXMnO1xyXG5pbXBvcnQgeyBTZW5zb3JEYXRhIH0gZnJvbSAnLi9zZW5zb3ItZGF0YSc7XHJcbmltcG9ydCB7IFNlbnNvclN0YXRlIH0gZnJvbSAnLi9zZW5zb3Itc3RhdGUnO1xyXG5pbXBvcnQgeyBVU0JDb250cm9sbGVyIH0gZnJvbSAnLi91c2ItY29udHJvbGxlcic7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZW5zb3JEZXNjcmlwdGlvbiB7XHJcbiAgICBTTjogc3RyaW5nO1xyXG4gICAgcG9ydDogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU2Vuc29yU2FtcGxlIHtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICBkYXRlOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTZW5zb3JMb2cge1xyXG4gICAgZGVzY3I6IFNlbnNvckRlc2NyaXB0aW9uO1xyXG4gICAgc2FtcGxlczogU2Vuc29yU2FtcGxlW107XHJcbn1cclxuZnVuY3Rpb24gZGVzY3JpcHRpb24oYXR0cjogU2Vuc29yQXR0cmlidXRlcywgc2Vuc29yRGF0YTogU2Vuc29yRGF0YSk6IFNlbnNvckRlc2NyaXB0aW9uIHtcclxuICAgIHJldHVybiB7U046IGF0dHIuU04sIHBvcnQ6IHNlbnNvckRhdGEuZ2V0UG9ydCgpfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2Vuc29yU2FtcGxlKGRhdGE6IFNlbnNvckRhdGEpOiBTZW5zb3JTYW1wbGUge1xyXG4gICAgcmV0dXJuIHt2YWx1ZTogZGF0YS5nZXRWYWx1ZSgpLCBkYXRlOiBkYXRhLnRpbWVzdGFtcCgpfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2Vuc29yTG9nKHN0YXRlOiBTZW5zb3JTdGF0ZSk6IFNlbnNvckxvZyB7XHJcblxyXG4gICAgY29uc3QgYXR0cjogU2Vuc29yQXR0cmlidXRlcyA9IHN0YXRlLmdldEF0dHIoKTtcclxuICAgIGNvbnN0IHNlbnNvckRhdGEgPSBzdGF0ZS5nZXRTZW5zb3JEYXRhKCk7XHJcbiAgICBjb25zdCBzYW1wbGVzOiBTZW5zb3JTYW1wbGVbXSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBkYXRhIG9mIHNlbnNvckRhdGEpIHtcclxuICAgICAgICBzYW1wbGVzLnB1c2goc2Vuc29yU2FtcGxlKGRhdGEpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGRlc2NyOiBkZXNjcmlwdGlvbihhdHRyLCBzZW5zb3JEYXRhWzBdKSwgc2FtcGxlc307XHJcblxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZW5zb3JzKHdzOiBXZWJTb2NrZXQpIHtcclxuICAgIGNvbnN0IGxvZ2dlcnMgPSBVU0JDb250cm9sbGVyLmdldExvZ2dlcnMoKTtcclxuICAgIGNvbnN0IHNlbnNvckxvZ3M6IFNlbnNvckxvZ1tdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGxvZ2dlciBvZiBsb2dnZXJzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBsb2dnZXIuZ2V0U3RhdGUoKTtcclxuICAgICAgICBzZW5zb3JMb2dzLnB1c2goc2Vuc29yTG9nKHN0YXRlKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtZXNzYWdlID0ge2Rlc2NyOidzZW5zb3JzJywgZGF0YTogc2Vuc29yTG9nc307XHJcbiAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmdzKHdzOiBXZWJTb2NrZXQpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSB7ZGVzY3I6J3NldHRpbmdzJywgZGF0YTogW3tzZXR0aW5nOiAnaG9zdG5hbWUnLCB2YWx1ZTogSE9TVE5BTUV9XX07XHJcbiAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcclxufVxyXG5cclxuIl19
