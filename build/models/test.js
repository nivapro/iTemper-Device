"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var Test = (function () {
    function Test() {
        this.O = new rxjs_1.Observable();
        this.L = new rxjs_1.Subject();
        this.R = this.O.multicast(this.L).refCount();
        this.B = new rxjs_1.BehaviorSubject({ value: -85, date: 1234556 });
        console.log('B.getValue(): ', this.B.getValue());
        this.init();
    }
    Test.prototype.init = function () {
        var s = this.B.asObservable();
        s.subscribe(function (v) { return console.log('observer l: ', v); });
        this.B.next({ value: 1, date: 1 });
        console.log('---');
        this.B.next({ value: 0, date: 1 });
    };
    return Test;
}());
exports.Test = Test;
var T = new Test();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2RDtBQVE3RDtJQXVCSTtRQXRCUSxNQUFDLEdBQWtCLElBQUksaUJBQVUsRUFBTSxDQUFDO1FBQ3hDLE1BQUMsR0FBRyxJQUFJLGNBQU8sRUFBSyxDQUFDO1FBQ3JCLE1BQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFxQjVDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxzQkFBZSxDQUFJLEVBQUMsS0FBSyxFQUFDLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1FBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU8sbUJBQUksR0FBWjtRQUVJLElBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLENBQUksSUFBSyxPQUFBLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUE5QixDQUE4QixDQUFDLENBQUM7UUFLdEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBNkJyQyxDQUFDO0lBQ0wsV0FBQztBQUFELENBckVBLEFBcUVDLElBQUE7QUFyRVksb0JBQUk7QUFzRWpCLElBQU0sQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMiLCJmaWxlIjoibW9kZWxzL3Rlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIFN1YmplY3QgIH0gZnJvbSAncnhqcyc7XHJcbi8vIGltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gJ3J4anMvU2NoZWR1bGVyJztcclxuaW50ZXJmYWNlIFQge1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIGRhdGU6IG51bWJlcjtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXN0IHtcclxuICAgIHByaXZhdGUgTzogT2JzZXJ2YWJsZTxUPiA9IG5ldyBPYnNlcnZhYmxlPFQ+ICgpO1xyXG4gICAgcHJpdmF0ZSBMID0gbmV3IFN1YmplY3Q8VD4oKTtcclxuICAgIHByaXZhdGUgUiA9IHRoaXMuTy5tdWx0aWNhc3QodGhpcy5MKS5yZWZDb3VudCgpO1xyXG5cclxuICAgIHByaXZhdGUgQjogQmVoYXZpb3JTdWJqZWN0PFQ+O1xyXG4gICAgLy8gcHJpdmF0ZSBzdGF0aWMgc291cmNlID0gT2JzZXJ2YWJsZS5pbnRlcnZhbCgxMDAwKS5tYXAoICh4KSA9PiB7XHJcbiAgICAvLyAgICAgICAgIGlmICh4IDwgMTApIHtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB4LCBkYXRlOiAxMTExIH07XHJcbiAgICAvLyAgICAgICAgIH0gZWxzZSBpZiAoeCA8IDIwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogMTAsIGRhdGU6IDIyMjIgfTtcclxuICAgIC8vICAgICAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB4LCBkYXRlOiAzMzMzIH07XHJcbiAgICAvLyAgICAgICAgIH1cclxuICAgIC8vIH0pO1xyXG5cclxuICAgIC8vIHByaXZhdGUgc3RhdGljIHUgPSBPYnNlcnZhYmxlLmNyZWF0ZSgoKT0+IHsgY29uc29sZS5sb2coJ2NyZWF0ZWQnKTt9ICk7XHJcbiAgICAvLyBwcml2YXRlIHN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgLy8gcHJpdmF0ZSByZWZDb3VudGVkID0gVGVzdC51Lm11bHRpY2FzdCh0aGlzLnN1YmplY3QpLnJlZkNvdW50KCk7XHJcbiAgICAvLyBzdWJzY3JpcHRpb24xOiBTdWJzY3JpcHRpb247XHJcbiAgICAvLyBzdWJzY3JpcHRpb24yOiBTdWJzY3JpcHRpb247XHJcbiAgICAvLyBzdWJzY3JpcHRpb25Db25uZWN0OiBTdWJzY3JpcHRpb247XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5CID0gbmV3IEJlaGF2aW9yU3ViamVjdDxUPih7dmFsdWU6LTg1LCBkYXRlOiAxMjM0NTU2fSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0IuZ2V0VmFsdWUoKTogJywgdGhpcy5CLmdldFZhbHVlKCkpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgY29uc3QgcyA9IHRoaXMuQi5hc09ic2VydmFibGUoKTtcclxuICAgICAgICBzLnN1YnNjcmliZSgodjogVCkgPT4gY29uc29sZS5sb2coJ29ic2VydmVyIGw6ICcsIHYpKTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0w6ICcsIHRoaXMuTCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1I6ICcsIHRoaXMuUik7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2w6ICcsIHRoaXMubCk7XHJcbiAgICAgICAgdGhpcy5CLm5leHQoe3ZhbHVlOiAxLCBkYXRlOiAxfSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJy0tLScpO1xyXG4gICAgICAgIHRoaXMuQi5uZXh0KHt2YWx1ZTogMCwgZGF0ZTogMX0pO1xyXG5cclxuICAgICAgICAvLyBjb25zdCBkYXRhID0geyB2YWx1ZTogMjAsIGRhdGU6IDMzMzMgfTtcclxuXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29ic2VydmVyQSBzdWJzY3JpYmVkJyk7XHJcbiAgICAgICAgLy8gdGhpcy5zdWJzY3JpcHRpb24xID0gdGhpcy5yZWZDb3VudGVkLmRpc3RpbmN0VW50aWxDaGFuZ2VkKChwOiBULCBxOiBUKSA9PiBwLnZhbHVlID09PSBxLnZhbHVlKS5zdWJzY3JpYmUoe1xyXG4gICAgICAgIC8vIG5leHQ6ICh2OiBUKSA9PiBjb25zb2xlLmxvZygnb2JzZXJ2ZXJBOiAnLCBKU09OLnN0cmluZ2lmeSh2KSksXHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdvYnNlcnZlckIgc3Vic2NyaWJlZCcpO1xyXG4gICAgICAgIC8vIHRoaXMuc3Vic2NyaXB0aW9uMiA9IHRoaXMucmVmQ291bnRlZC5zdWJzY3JpYmUoe1xyXG4gICAgICAgIC8vICAgICBuZXh0OiAodjogVCkgPT4gY29uc29sZS5sb2coJ29ic2VydmVyQjogJywgSlNPTi5zdHJpbmdpZnkodikpLFxyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgICAgIC8vIH0sIDUwMDApO1xyXG5cclxuICAgICAgICAvLyB0aGlzLnN1YmplY3QubmV4dChkYXRhKTtcclxuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb2JzZXJ2ZXJBIHVuc3Vic2NyaWJlZCcpO1xyXG4gICAgICAgIC8vIHN1YnNjcmlwdGlvbjEudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAvLyB9LCAxMjAwKTtcclxuXHJcbiAgICAgICAgLy8gLy8gVGhpcyBpcyB3aGVuIHRoZSBzaGFyZWQgT2JzZXJ2YWJsZSBleGVjdXRpb24gd2lsbCBzdG9wLCBiZWNhdXNlXHJcbiAgICAgICAgLy8gLy8gYHJlZkNvdW50ZWRgIHdvdWxkIGhhdmUgbm8gbW9yZSBzdWJzY3JpYmVycyBhZnRlciB0aGlzXHJcbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29ic2VydmVyQiB1bnN1YnNjcmliZWQnKTtcclxuICAgICAgICAvLyB0aGlzLnN1YnNjcmlwdGlvbjIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAvLyB9LCAyMDAwKTtcclxuXHJcbiAgICB9XHJcbn1cclxuY29uc3QgVCA9IG5ldyBUZXN0KCk7XHJcbiJdfQ==
