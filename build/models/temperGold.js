"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HID = require("node-hid");
var os = require("os");
var sensor_1 = require("./sensor");
var Device = (function () {
    function Device() {
        Device.initialize();
    }
    Device.initialize = function () {
        if (!Device._deviceInitialized) {
            var _devices = HID.devices();
            var deviceInfo = _devices.find(function (d) {
                var VID = 0x0C45;
                var PID = 0x7401;
                var TEMPER_GOLD = 'TEMPerV1.4';
                var INTERFACE = 1;
                Device._temperGold = d.product !== undefined && d.product === TEMPER_GOLD;
                var isTemper = d.vendorId === VID && d.productId === PID;
                return isTemper && Device._temperGold && d.interface === INTERFACE;
            });
            if ((deviceInfo !== undefined) && (deviceInfo.path !== undefined)) {
                Device._hid1 = new HID.HID(deviceInfo.path);
                Device._hid1.on('data', Device.parseInput);
                Device._hid1.on('error', Device.parseError);
                Device._interval = setInterval(Device.pollSensors, Device.POLL_INTERVALL);
                Device._deviceInitialized = true;
                Device.connectSensors(1, 1);
                Device.WriteTemperatureRequest(0);
                console.log('+initialized');
            }
        }
    };
    Device.close = function () {
        Device._nextSensor = 0;
        Device._deviceInitialized = false;
        try {
            Device._hid1.pause();
            Device._hid1.close();
        }
        catch (e) {
            return;
        }
    };
    Device.pollSensors = function () {
        if (!Device._deviceInitialized) {
            Device.initialize();
        }
        else {
            Device.WriteTemperatureRequest(0);
        }
    };
    Device.getSensorData = function () {
        return Device._sensors.slice();
    };
    Device.parseError = function (_error) {
        return;
    };
    Device.parseInput = function (data) {
        try {
            if (Device.matchTemperature(data)) {
                Device._lastInputTime = Date.now();
            }
            else {
                console.warn('--no match: ', JSON.stringify(data));
            }
        }
        catch (e) {
            console.log(e);
        }
    };
    Device.writeRequest = function (data) {
        if (os.platform() === 'win32') {
            data.unshift(0);
        }
        for (var i = 0; i < 1; i++) {
            try {
                Device._hid1.write(data);
            }
            catch (e) {
                console.log('-_hid1.write catch:&d', JSON.stringify(data));
                Device.close();
            }
        }
    };
    Device.connectSensors = function (total, used) {
        console.log('connectSensors, total:%d', total);
        if (Device._sensors.length === 0) {
            Device._sensors = Array(total);
            var bits = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80];
            var sensor = 0;
            for (var port = 0; port < bits.length; port++) {
                if ((used & bits[port]) === bits[port]) {
                    Device._sensors[sensor] = new sensor_1.Sensor(port);
                    console.log('connectSensors, port:%d', port);
                    sensor += 1;
                }
            }
            if (sensor !== total) {
                return;
            }
        }
    };
    Device.WriteTemperatureRequest = function (port) {
        var data = [0x01, 0x80, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00];
        Device.writeRequest(data);
    };
    Device.matchTemperature = function (data) {
        if (data.length === 8
            && data[0] === 0x80
            && data[1] === 0x02) {
            console.log('+matchTemperature, data: %d', JSON.stringify(data));
            var port = 0;
            var msb = data[2];
            var lsb = data[3];
            var temperatureCelsius = this.GetTemperature(msb, lsb);
            Device.updateSensor(port, temperatureCelsius);
            return true;
        }
        else {
            return false;
        }
    };
    Device.GetTemperature = function (msb, lsb) {
        var temperature = 0.0;
        var reading = (lsb & 0xFF) + (msb << 8);
        var result = 1;
        if ((reading & 0x8000) > 0) {
            reading = (reading ^ 0xffff) + 1;
            result = -1;
        }
        temperature = result * reading / 256.0;
        return temperature;
    };
    Device.updateSensor = function (port, temperature) {
        if (Device._sensors != null) {
            var sensor = Device._sensors.find(function (s) { return s.port() === port; });
            if (sensor) {
                sensor.setValue(temperature);
                console.log('+updateSensor, port: %d, temperature %d', port, temperature);
            }
            else {
                console.error('-updateSensor - sensor undefined, port: %d, temperature %d', port, temperature);
            }
        }
        else {
            console.error('-updateSensor - no sensors, port: %d, temperature %d', port, temperature);
        }
    };
    Device.POLL_INTERVALL = 5000;
    Device._sensors = [];
    Device._deviceInitialized = false;
    Device._nextSensor = 0;
    Device._lastInputTime = Date.now();
    Device._temperGold = false;
    return Device;
}());
exports.Device = Device;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
