"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HID = require("node-hid");
var os = require("os");
var USBSensor = (function () {
    function USBSensor(devicePath, parser) {
        this.POLL_INTERVAL = 5000;
        this.deviceInitialized = false;
        this.lastInputTime = Date.now();
        this.hid = new HID.HID(devicePath);
        this.reportParser = parser;
        this.initializeDevice();
        this.pollSensors();
    }
    USBSensor.prototype.initializeDevice = function () {
        if (!this.deviceInitialized) {
            this.hid.on('data', this.parseInput);
            this.hid.on('error', this.parseError);
            this.setPollingInterval(this.POLL_INTERVAL);
            this.deviceInitialized = true;
        }
    };
    USBSensor.prototype.close = function () {
        this.deviceInitialized = false;
        try {
            this.hid.pause();
            this.hid.close();
        }
        catch (e) {
            return;
        }
    };
    USBSensor.prototype.getSensorData = function () {
        return this.reportParser.getSensorData();
    };
    USBSensor.prototype.setPollingInterval = function (ms) {
        this.POLL_INTERVAL = ms;
        clearInterval(this.interval);
        this.interval = setInterval(this.pollSensors, this.POLL_INTERVAL);
    };
    USBSensor.prototype.pollSensors = function () {
        if (!this.deviceInitialized) {
            this.initializeDevice();
        }
        else {
            var initCommands = this.reportParser.initReport();
            for (var _i = 0, initCommands_1 = initCommands; _i < initCommands_1.length; _i++) {
                var command = initCommands_1[_i];
                this.writeReport(command);
            }
        }
    };
    USBSensor.prototype.parseInput = function (data) {
        var response = this.reportParser.parseInput(data);
        if (response) {
            this.writeReport(response);
        }
    };
    USBSensor.prototype.parseError = function (_error) {
        return;
    };
    USBSensor.prototype.writeReport = function (data) {
        if (os.platform() === 'win32') {
            data.unshift(0);
        }
        for (var i = 0; i < 1; i++) {
            try {
                this.hid.write(data);
            }
            catch (e) {
                console.log('-hid.write catch:&d', JSON.stringify(data));
                this.close();
            }
        }
    };
    return USBSensor;
}());
exports.USBSensor = USBSensor;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdXNiLXNlbnNvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDhCQUFpQztBQUNqQyx1QkFBMEI7QUFjMUI7SUFZSSxtQkFBWSxVQUFrQixFQUFFLE1BQW9CO1FBUjVDLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBRXJCLHNCQUFpQixHQUFHLEtBQUssQ0FBQztRQUcxQixrQkFBYSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUkvQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVNLG9DQUFnQixHQUF2QjtRQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLENBQUM7SUFDTCxDQUFDO0lBRU0seUJBQUssR0FBWjtRQUNJLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDO1lBQ0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1QsTUFBTSxDQUFDO1FBQ1gsQ0FBQztJQUNMLENBQUM7SUFDTSxpQ0FBYSxHQUFwQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFTSxzQ0FBa0IsR0FBekIsVUFBMEIsRUFBVTtRQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN4QixhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFHTywrQkFBVyxHQUFuQjtRQUNJLEVBQUUsQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BELEdBQUcsQ0FBQyxDQUFrQixVQUFZLEVBQVosNkJBQVksRUFBWiwwQkFBWSxFQUFaLElBQVk7Z0JBQTdCLElBQU0sT0FBTyxxQkFBQTtnQkFDZCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFFTyw4QkFBVSxHQUFsQixVQUFtQixJQUFjO1FBQzdCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDWCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQy9CLENBQUM7SUFDTCxDQUFDO0lBQ08sOEJBQVUsR0FBbEIsVUFBbUIsTUFBVztRQUMxQixNQUFNLENBQUM7SUFDWCxDQUFDO0lBR08sK0JBQVcsR0FBbkIsVUFBb0IsSUFBYztRQUU5QixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUM7UUFHRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQztnQkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLENBQUM7UUFFTCxDQUFDO0lBQ0wsQ0FBQztJQUlMLGdCQUFDO0FBQUQsQ0ExRkEsQUEwRkMsSUFBQTtBQTFGWSw4QkFBUyIsImZpbGUiOiJtb2RlbHMvdXNiLXNlbnNvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgSElEID0gcmVxdWlyZSgnbm9kZS1oaWQnKTtcclxuaW1wb3J0IG9zID0gcmVxdWlyZSgnb3MnKTtcclxuaW1wb3J0IHsgU2Vuc29yIH0gZnJvbSAnLi9zZW5zb3InO1xyXG5cclxuLy8gUmVwb3J0UGFyc2VyIGFsbG93IFNlbnNvckRldmljZSB0byBiZSBpbmRlcGVuZGVudCBvbiB0aGUgc3BlY2ZpY1xyXG4vLyBUZW1wZXIgZGV2aWNlIGNvbm5lY3RlZC5cclxuZXhwb3J0IGludGVyZmFjZSBSZXBvcnRQYXJzZXIge1xyXG4gICAgaW5pdFJlcG9ydCgpOiBudW1iZXJbXVtdO1xyXG4gICAgcGFyc2VJbnB1dChkYXRhOiBudW1iZXJbXSk6IG51bWJlcltdO1xyXG4gICAgZ2V0U2Vuc29yRGF0YSgpOiBTZW5zb3JbXTtcclxuICAgIGFkZFNlbnNvckRhdGFMaXN0ZW5lcihvblNlbnNvckRhdGFSZWNlaXZlZDogKHNlbnNvcjogU2Vuc29yW10pID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgYWRkVW5yZWNvdmVyYWJsZUVycm9yTGlzdGVuZXIob25FcnJvcjogKCk9PiB2b2lkKTogdm9pZDtcclxufVxyXG5cclxuLy8gSGFuZGxlIGEgc2Vuc29yIGRldmljZSBvbiB0aGUgVVNCIGh1Yi5cclxuZXhwb3J0IGNsYXNzIFVTQlNlbnNvciB7XHJcbiAgICBwcml2YXRlICBoaWQ6IEhJRC5ISUQ7XHJcbiAgICBwcml2YXRlIHJlcG9ydFBhcnNlcjogUmVwb3J0UGFyc2VyO1xyXG5cclxuICAgIHByaXZhdGUgUE9MTF9JTlRFUlZBTCA9IDUwMDA7XHJcblxyXG4gICAgcHJpdmF0ZSBkZXZpY2VJbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaW50ZXJ2YWw6IE5vZGVKUy5UaW1lcjtcclxuICAgIHByaXZhdGUgbGFzdElucHV0VGltZSA9IERhdGUubm93KCk7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRldmljZVBhdGg6IHN0cmluZywgcGFyc2VyOiBSZXBvcnRQYXJzZXIpIHtcclxuICAgICAgICB0aGlzLmhpZCA9IG5ldyBISUQuSElEKGRldmljZVBhdGgpO1xyXG4gICAgICAgIHRoaXMucmVwb3J0UGFyc2VyID0gcGFyc2VyO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZURldmljZSgpO1xyXG4gICAgICAgIHRoaXMucG9sbFNlbnNvcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5pdGlhbGl6ZURldmljZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGV2aWNlSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWQub24oJ2RhdGEnLCB0aGlzLnBhcnNlSW5wdXQpO1xyXG4gICAgICAgICAgICB0aGlzLmhpZC5vbignZXJyb3InLCB0aGlzLnBhcnNlRXJyb3IpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFBvbGxpbmdJbnRlcnZhbCh0aGlzLlBPTExfSU5URVJWQUwpO1xyXG4gICAgICAgICAgICB0aGlzLmRldmljZUluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb3NlKCkge1xyXG4gICAgICAgIHRoaXMuZGV2aWNlSW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmhpZC5wYXVzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmhpZC5jbG9zZSgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRTZW5zb3JEYXRhKCk6IFNlbnNvcltdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRQYXJzZXIuZ2V0U2Vuc29yRGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRQb2xsaW5nSW50ZXJ2YWwobXM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuUE9MTF9JTlRFUlZBTCA9IG1zO1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCk7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMucG9sbFNlbnNvcnMsIHRoaXMuUE9MTF9JTlRFUlZBTCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhpcyBpcyB3ZXJlIGFsbCBzdGFydHMgd2hlbiBzZXQgaW50ZXJ2YWwgdGltZSBleHBpcmVzXHJcbiAgICBwcml2YXRlIHBvbGxTZW5zb3JzKCkge1xyXG4gICAgICAgIGlmICghIHRoaXMuZGV2aWNlSW5pdGlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplRGV2aWNlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW5pdENvbW1hbmRzID0gdGhpcy5yZXBvcnRQYXJzZXIuaW5pdFJlcG9ydCgpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbW1hbmQgb2YgaW5pdENvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlUmVwb3J0KGNvbW1hbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gSW5wdXQgZnJvbSBISUQsIHBhcnNlIGRhdGEgYW5kIHdyaXRlIGFueSByZXNwb25zZVxyXG4gICAgcHJpdmF0ZSBwYXJzZUlucHV0KGRhdGE6IG51bWJlcltdKTogdm9pZCAge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gdGhpcy5yZXBvcnRQYXJzZXIucGFyc2VJbnB1dChkYXRhKTtcclxuICAgICAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVJlcG9ydChyZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBwYXJzZUVycm9yKF9lcnJvcjogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhlbHBlciBmdW5jdGlvbnMgdG8gd3JpdGUgcmVwb3J0cyB0byB0aGUgZGV2aWNlXHJcbiAgICBwcml2YXRlIHdyaXRlUmVwb3J0KGRhdGE6IG51bWJlcltdKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmIChvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInKSB7XHJcbiAgICAgICAgICAgIGRhdGEudW5zaGlmdCgwKTsgIC8vIHByZXBlbmQgYSB0aHJvd2F3YXkgYnl0ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT3V0cHV0IHJlcG9ydFxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZC53cml0ZShkYXRhKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy1oaWQud3JpdGUgY2F0Y2g6JmQnLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG59XHJcbiJdfQ==
