"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HID = require("node-hid");
var temper8_1 = require("./temper8");
var usb_sensor_1 = require("./usb-sensor");
var DeviceConfig = (function () {
    function DeviceConfig() {
    }
    return DeviceConfig;
}());
exports.DeviceConfig = DeviceConfig;
var VID = 0x0C45;
var PID = 0x7401;
var TEMPER_GOLD = 'TEMPerV1.4';
var TEMPER_8 = 'TEMPerV1.5';
var INTERFACE = 1;
function isTemperGold(device) {
    return (device.vendorId === VID &&
        device.productId === PID &&
        device.product === TEMPER_GOLD &&
        device.interface === INTERFACE);
}
exports.isTemperGold = isTemperGold;
function isTemper8(device) {
    return (device.vendorId === VID &&
        device.productId === PID &&
        device.product === TEMPER_8 &&
        device.interface === INTERFACE);
}
exports.isTemper8 = isTemper8;
var USBSensorManager = (function () {
    function USBSensorManager() {
    }
    USBSensorManager.factory = function () {
        var devices = [];
        HID.devices().find(function (device) {
            if (isTemperGold(device) && device.path !== undefined) {
            }
            else if (isTemper8(device) && device.path !== undefined) {
                var temper8 = new usb_sensor_1.USBSensor(device.path, new temper8_1.Temper8());
                devices.push(temper8);
            }
            return false;
        });
        return devices;
    };
    return USBSensorManager;
}());
exports.USBSensorManager = USBSensorManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdXNiLXNlbnNvci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOEJBQWlDO0FBRWpDLHFDQUFvQztBQUNwQywyQ0FBeUM7QUFHekM7SUFBQTtJQUtJLENBQUM7SUFBRCxtQkFBQztBQUFELENBTEosQUFLSyxJQUFBO0FBTFEsb0NBQVk7QUFPekIsSUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBQ25CLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUNuQixJQUFNLFdBQVcsR0FBRyxZQUFZLENBQUM7QUFDakMsSUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDO0FBQzlCLElBQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUdwQixzQkFBNkIsTUFBa0I7SUFDM0MsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxHQUFHO1FBQzNCLE1BQU0sQ0FBQyxTQUFTLEtBQUssR0FBRztRQUN4QixNQUFNLENBQUMsT0FBTyxLQUFLLFdBQVc7UUFDOUIsTUFBTSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBTEQsb0NBS0M7QUFFRCxtQkFBMEIsTUFBa0I7SUFDeEMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxHQUFHO1FBQzNCLE1BQU0sQ0FBQyxTQUFTLEtBQUssR0FBRztRQUN4QixNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVE7UUFDM0IsTUFBTSxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBTEQsOEJBS0M7QUFDRDtJQUFBO0lBaUJBLENBQUM7SUFoQmlCLHdCQUFPLEdBQXJCO1FBQ0ksSUFBTSxPQUFPLEdBQWdCLEVBQUUsQ0FBQztRQUVoQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUEsTUFBTTtZQUNyQixFQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBR3hELENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDeEQsSUFBTSxPQUFPLEdBQUcsSUFBSSxzQkFBUyxDQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxpQkFBTyxFQUFFLENBQUMsQ0FBQztnQkFDM0QsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxQixDQUFDO1lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVMLHVCQUFDO0FBQUQsQ0FqQkEsQUFpQkMsSUFBQTtBQWpCWSw0Q0FBZ0IiLCJmaWxlIjoibW9kZWxzL3VzYi1zZW5zb3ItbWFuYWdlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBISUQgPSByZXF1aXJlKCdub2RlLWhpZCcpO1xyXG5cclxuaW1wb3J0IHsgVGVtcGVyOCB9IGZyb20gJy4vdGVtcGVyOCc7XHJcbmltcG9ydCB7IFVTQlNlbnNvciB9IGZyb20gJy4vdXNiLXNlbnNvcic7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIERldmljZUNvbmZpZyB7XHJcbiAgICAgICAgdmVuZG9ySWQ6IG51bWJlcjtcclxuICAgICAgICBwcm9kdWN0SWQ6IG51bWJlcjtcclxuICAgICAgICBwcm9kdWN0OiBzdHJpbmc7XHJcbiAgICAgICAgaW50ZXJmYWNlOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG5jb25zdCBWSUQgPSAweDBDNDU7XHJcbmNvbnN0IFBJRCA9IDB4NzQwMTtcclxuY29uc3QgVEVNUEVSX0dPTEQgPSAnVEVNUGVyVjEuNCc7XHJcbmNvbnN0IFRFTVBFUl84ID0gJ1RFTVBlclYxLjUnO1xyXG5jb25zdCBJTlRFUkZBQ0UgPSAxO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RlbXBlckdvbGQoZGV2aWNlOiBISUQuRGV2aWNlKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGRldmljZS52ZW5kb3JJZCA9PT0gVklEICYmXHJcbiAgICAgICAgZGV2aWNlLnByb2R1Y3RJZCA9PT0gUElEICYmXHJcbiAgICAgICAgZGV2aWNlLnByb2R1Y3QgPT09IFRFTVBFUl9HT0xEICYmXHJcbiAgICAgICAgZGV2aWNlLmludGVyZmFjZSA9PT0gSU5URVJGQUNFKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcGVyOChkZXZpY2U6IEhJRC5EZXZpY2UpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGV2aWNlLnZlbmRvcklkID09PSBWSUQgJiZcclxuICAgICAgICBkZXZpY2UucHJvZHVjdElkID09PSBQSUQgJiZcclxuICAgICAgICBkZXZpY2UucHJvZHVjdCA9PT0gVEVNUEVSXzggJiZcclxuICAgICAgICBkZXZpY2UuaW50ZXJmYWNlID09PSBJTlRFUkZBQ0UpO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBVU0JTZW5zb3JNYW5hZ2VyIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZmFjdG9yeSgpOiBVU0JTZW5zb3JbXSB7XHJcbiAgICAgICAgY29uc3QgZGV2aWNlczogVVNCU2Vuc29yW10gPSBbXTtcclxuXHJcbiAgICAgICAgSElELmRldmljZXMoKS5maW5kKGRldmljZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1RlbXBlckdvbGQoZGV2aWNlKSAmJiBkZXZpY2UucGF0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0ZW1wZXJEZXZpY2VzLnB1c2gobmV3IFRlbXBlckdvbGQobmV3IEhJRC5ISUQoZGV2aWNlLnBhdGgpKSk7IC8vIFRPRE86IG5ldyAgVGVtcGVyR29sZFxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RlbXBlcjgoZGV2aWNlKSAmJiBkZXZpY2UucGF0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wZXI4ID0gbmV3IFVTQlNlbnNvciAoZGV2aWNlLnBhdGgsIG5ldyBUZW1wZXI4KCkpO1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlcy5wdXNoKHRlbXBlcjgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGV2aWNlcztcclxuICAgIH1cclxuXHJcbn1cclxuIl19
