"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var HID = require("node-hid");
var temper_8_1 = require("./temper-8");
var temper_gold_1 = require("./temper-gold");
var usb_controller_1 = require("./usb-controller");
var DeviceConfig = (function () {
    function DeviceConfig() {
    }
    return DeviceConfig;
}());
exports.DeviceConfig = DeviceConfig;
var VID = 0x0C45;
var PID = 0x7401;
var TEMPER_GOLD = 'TEMPerV1.4';
var TEMPER_8 = 'TEMPer8_V1.5';
var INTERFACE = 1;
function isTemperGold(device) {
    return (device.vendorId === VID &&
        device.productId === PID &&
        device.product === TEMPER_GOLD &&
        device.interface === INTERFACE);
}
exports.isTemperGold = isTemperGold;
function isTemper8(device) {
    return (device.vendorId === VID &&
        device.productId === PID &&
        device.product === TEMPER_8 &&
        device.interface === INTERFACE);
}
exports.isTemper8 = isTemper8;
var USBSensorManager = (function () {
    function USBSensorManager() {
    }
    USBSensorManager.getSensorStates = function () {
        return USBSensorManager.sensorStates;
    };
    USBSensorManager.factory = function () {
        HID.devices().find(function (device) {
            if (isTemperGold(device) && device.path !== undefined) {
                console.log('+++ USBSensorManager.factory, isTemperGold');
                var hid = new HID.HID(device.path);
                var temperGold = new temper_gold_1.TemperGold();
                USBSensorManager.sensorStates.push(temperGold);
                var temperGoldDevice = new usb_controller_1.USBController(hid, temperGold);
                USBSensorManager.devices.push(temperGoldDevice);
                return true;
            }
            else if (isTemper8(device) && device.path !== undefined) {
                console.log('+++ USBSensorManager.factory, isTemper8');
                var hid = new HID.HID(device.path);
                var temper8 = new temper_8_1.Temper8();
                USBSensorManager.sensorStates.push(temper8);
                var temper8Device = new usb_controller_1.USBController(hid, temper8);
                USBSensorManager.devices.push(temper8Device);
                return true;
            }
            return false;
        });
    };
    USBSensorManager.devices = [];
    USBSensorManager.sensorStates = [];
    return USBSensorManager;
}());
exports.USBSensorManager = USBSensorManager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvdXNiLXNlbnNvci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOEJBQWlDO0FBRWpDLHVDQUFxQztBQUNyQyw2Q0FBMkM7QUFDM0MsbURBQWlEO0FBR2pEO0lBQUE7SUFLSSxDQUFDO0lBQUQsbUJBQUM7QUFBRCxDQUxKLEFBS0ssSUFBQTtBQUxRLG9DQUFZO0FBT3pCLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQztBQUNuQixJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUM7QUFDbkIsSUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQ2pDLElBQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQztBQUNoQyxJQUFNLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFHcEIsc0JBQTZCLE1BQWtCO0lBQzNDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssR0FBRztRQUMzQixNQUFNLENBQUMsU0FBUyxLQUFLLEdBQUc7UUFDeEIsTUFBTSxDQUFDLE9BQU8sS0FBSyxXQUFXO1FBQzlCLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUxELG9DQUtDO0FBRUQsbUJBQTBCLE1BQWtCO0lBQ3hDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssR0FBRztRQUMzQixNQUFNLENBQUMsU0FBUyxLQUFLLEdBQUc7UUFDeEIsTUFBTSxDQUFDLE9BQU8sS0FBSyxRQUFRO1FBQzNCLE1BQU0sQ0FBQyxTQUFTLEtBQUssU0FBUyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUxELDhCQUtDO0FBQ0Q7SUFBQTtJQWdDQSxDQUFDO0lBM0JpQixnQ0FBZSxHQUE3QjtRQUNJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQztJQUVhLHdCQUFPLEdBQXJCO1FBQ0ksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDckIsRUFBRSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO2dCQUMxRCxJQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyQyxJQUFNLFVBQVUsR0FBRyxJQUFJLHdCQUFVLEVBQUUsQ0FBQztnQkFDcEMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDL0MsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLDhCQUFhLENBQUUsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO2dCQUM3RCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxPQUFPLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7Z0JBQ3ZELElBQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3JDLElBQU0sT0FBTyxHQUFHLElBQUksa0JBQU8sRUFBRSxDQUFDO2dCQUM5QixnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1QyxJQUFNLGFBQWEsR0FBRyxJQUFJLDhCQUFhLENBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLENBQUM7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQTdCYyx3QkFBTyxHQUFvQixFQUFFLENBQUM7SUFDOUIsNkJBQVksR0FBa0IsRUFBRSxDQUFDO0lBOEJwRCx1QkFBQztDQWhDRCxBQWdDQyxJQUFBO0FBaENZLDRDQUFnQiIsImZpbGUiOiJtb2RlbHMvdXNiLXNlbnNvci1tYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEhJRCA9IHJlcXVpcmUoJ25vZGUtaGlkJyk7XHJcbmltcG9ydCB7IFNlbnNvclN0YXRlIH0gZnJvbSAnLi9zZW5zb3Itc3RhdGUnO1xyXG5pbXBvcnQgeyBUZW1wZXI4IH0gZnJvbSAnLi90ZW1wZXItOCc7XHJcbmltcG9ydCB7IFRlbXBlckdvbGQgfSBmcm9tICcuL3RlbXBlci1nb2xkJztcclxuaW1wb3J0IHsgVVNCQ29udHJvbGxlciB9IGZyb20gJy4vdXNiLWNvbnRyb2xsZXInO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VDb25maWcge1xyXG4gICAgICAgIHZlbmRvcklkOiBudW1iZXI7XHJcbiAgICAgICAgcHJvZHVjdElkOiBudW1iZXI7XHJcbiAgICAgICAgcHJvZHVjdDogc3RyaW5nO1xyXG4gICAgICAgIGludGVyZmFjZTogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuY29uc3QgVklEID0gMHgwQzQ1O1xyXG5jb25zdCBQSUQgPSAweDc0MDE7XHJcbmNvbnN0IFRFTVBFUl9HT0xEID0gJ1RFTVBlclYxLjQnO1xyXG5jb25zdCBURU1QRVJfOCA9ICdURU1QZXI4X1YxLjUnO1xyXG5jb25zdCBJTlRFUkZBQ0UgPSAxO1xyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RlbXBlckdvbGQoZGV2aWNlOiBISUQuRGV2aWNlKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKGRldmljZS52ZW5kb3JJZCA9PT0gVklEICYmXHJcbiAgICAgICAgZGV2aWNlLnByb2R1Y3RJZCA9PT0gUElEICYmXHJcbiAgICAgICAgZGV2aWNlLnByb2R1Y3QgPT09IFRFTVBFUl9HT0xEICYmXHJcbiAgICAgICAgZGV2aWNlLmludGVyZmFjZSA9PT0gSU5URVJGQUNFKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVtcGVyOChkZXZpY2U6IEhJRC5EZXZpY2UpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoZGV2aWNlLnZlbmRvcklkID09PSBWSUQgJiZcclxuICAgICAgICBkZXZpY2UucHJvZHVjdElkID09PSBQSUQgJiZcclxuICAgICAgICBkZXZpY2UucHJvZHVjdCA9PT0gVEVNUEVSXzggJiZcclxuICAgICAgICBkZXZpY2UuaW50ZXJmYWNlID09PSBJTlRFUkZBQ0UpO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBVU0JTZW5zb3JNYW5hZ2VyIHtcclxuICAgIHByaXZhdGUgc3RhdGljIGRldmljZXM6IFVTQkNvbnRyb2xsZXJbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgc2Vuc29yU3RhdGVzOiBTZW5zb3JTdGF0ZVtdID0gW107XHJcblxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0U2Vuc29yU3RhdGVzKCk6IFNlbnNvclN0YXRlW10ge1xyXG4gICAgICAgIHJldHVybiBVU0JTZW5zb3JNYW5hZ2VyLnNlbnNvclN0YXRlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZhY3RvcnkoKTogdm9pZCB7XHJcbiAgICAgICAgSElELmRldmljZXMoKS5maW5kKGRldmljZSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpc1RlbXBlckdvbGQoZGV2aWNlKSAmJiBkZXZpY2UucGF0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnKysrIFVTQlNlbnNvck1hbmFnZXIuZmFjdG9yeSwgaXNUZW1wZXJHb2xkJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoaWQgPSBuZXcgSElELkhJRChkZXZpY2UucGF0aCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wZXJHb2xkID0gbmV3IFRlbXBlckdvbGQoKTtcclxuICAgICAgICAgICAgICAgIFVTQlNlbnNvck1hbmFnZXIuc2Vuc29yU3RhdGVzLnB1c2godGVtcGVyR29sZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wZXJHb2xkRGV2aWNlID0gbmV3IFVTQkNvbnRyb2xsZXIgKGhpZCwgdGVtcGVyR29sZCk7XHJcbiAgICAgICAgICAgICAgICBVU0JTZW5zb3JNYW5hZ2VyLmRldmljZXMucHVzaCh0ZW1wZXJHb2xkRGV2aWNlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVGVtcGVyOChkZXZpY2UpICYmIGRldmljZS5wYXRoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCcrKysgVVNCU2Vuc29yTWFuYWdlci5mYWN0b3J5LCBpc1RlbXBlcjgnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhpZCA9IG5ldyBISUQuSElEKGRldmljZS5wYXRoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBlcjggPSBuZXcgVGVtcGVyOCgpO1xyXG4gICAgICAgICAgICAgICAgVVNCU2Vuc29yTWFuYWdlci5zZW5zb3JTdGF0ZXMucHVzaCh0ZW1wZXI4KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBlcjhEZXZpY2UgPSBuZXcgVVNCQ29udHJvbGxlciAoaGlkLCB0ZW1wZXI4KTtcclxuICAgICAgICAgICAgICAgIFVTQlNlbnNvck1hbmFnZXIuZGV2aWNlcy5wdXNoKHRlbXBlcjhEZXZpY2UpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=
