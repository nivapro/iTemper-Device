"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var settings_1 = require("./settings");
var usb_controller_1 = require("./usb-controller");
function parseInboundMessage(ws, data) {
    var message = JSON.parse(data.toString());
    switch (message.descr) {
        case 'getSensors':
            getSensors(ws);
            break;
        case 'getSettings':
            getSettings(ws);
            break;
        case 'startMonitor':
            message.data = message.data;
            startMonitor(ws, message.data);
            break;
        case 'stopMonitor':
            message.data = message.data;
            stopMonitor(ws, message.data);
            break;
    }
}
exports.parseInboundMessage = parseInboundMessage;
function description(attr, data) {
    return { SN: attr.SN, port: data.getPort() };
}
function sensorSample(data) {
    return { value: data.getValue(), date: data.timestamp() };
}
function AddSensorLogs(sensorLogs, state) {
    var attr = state.getAttr();
    var sensorData = state.getSensorData();
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var sensor = sensorData_1[_i];
        var samples = [];
        samples.push(sensorSample(sensor));
        sensorLogs.push({ descr: description(attr, sensor), samples: samples });
    }
}
function getSensors(ws) {
    var loggers = usb_controller_1.USBController.getLoggers();
    var descr = 'sensors';
    var data = [];
    for (var _i = 0, loggers_1 = loggers; _i < loggers_1.length; _i++) {
        var logger = loggers_1[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ descr: descr, data: data });
    ws.send(message);
    logger_1.log.info('browser-services.getSensors, sent: ' + message);
}
exports.getSensors = getSensors;
function getSettings(ws) {
    var data = settings_1.Settings.all();
    var message = JSON.stringify({ descr: 'settings', data: data });
    ws.send(message);
    logger_1.log.info('browser-service.getSettings: ' + message);
}
exports.getSettings = getSettings;
var MonitoringClients = new Set();
var logTimer;
function startMonitor(ws, descr) {
    logger_1.log.info('browser-service.startMonitor: has not implemented filter on Descr yet: ' + JSON.stringify(descr));
    if (!MonitoringClients.has(ws)) {
        MonitoringClients.add(ws);
    }
    if (MonitoringClients.size === 1) {
        logTimer = setInterval(logSensorData, usb_controller_1.USBController.getPollingInterval());
    }
    logger_1.log.info('Browser-service.startMonitor: ' + MonitoringClients.size + ' clients');
}
exports.startMonitor = startMonitor;
function stopMonitor(ws, descr) {
    logger_1.log.info('browser-service.stopMonitor: has not implemented filter on Descr yet: ' + JSON.stringify(descr));
    if (MonitoringClients.has(ws)) {
        MonitoringClients.delete(ws);
    }
    if (MonitoringClients.size === 0) {
        clearTimeout(logTimer);
    }
    logger_1.log.info('Browser-service.stopMonitor: ' + MonitoringClients.size + ' clients');
}
exports.stopMonitor = stopMonitor;
function logSensorData() {
    var loggers = usb_controller_1.USBController.getLoggers();
    var descr = 'log';
    var data = [];
    for (var _i = 0, loggers_2 = loggers; _i < loggers_2.length; _i++) {
        var logger = loggers_2[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ descr: descr, data: data });
    MonitoringClients.forEach(function (ws) {
        if (ws.readyState === ws.OPEN) {
            ws.send(message);
        }
        if (ws.readyState === ws.CLOSED || ws.readyState === ws.CLOSING) {
            MonitoringClients.delete(ws);
        }
    });
    logger_1.log.info('Browser-service.logSensorData: sent to ' + MonitoringClients.size + ' clients, message: ' + message);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvYnJvd3Nlci1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQWdDO0FBSWhDLHVDQUErQztBQUMvQyxtREFBaUQ7QUFXakQsNkJBQW9DLEVBQWEsRUFBRSxJQUFZO0lBQzNELElBQU0sT0FBTyxHQUEwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBRW5FLFFBQVEsT0FBTyxDQUFDLEtBQUssRUFBRTtRQUNuQixLQUFLLFlBQVk7WUFDYixVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDZixNQUFNO1FBQ1YsS0FBSyxhQUFhO1lBQ2QsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLE1BQU07UUFDVixLQUFLLGNBQWM7WUFDZixPQUFPLENBQUMsSUFBSSxHQUErQixPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ3hELFlBQVksQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9CLE1BQU07UUFDVixLQUFLLGFBQWE7WUFDZCxPQUFPLENBQUMsSUFBSSxHQUErQixPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ3hELFdBQVcsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlCLE1BQU07S0FDWDtBQUVQLENBQUM7QUFwQkQsa0RBb0JDO0FBbUJELHFCQUFxQixJQUFzQixFQUFFLElBQWdCO0lBQ3pELE9BQU8sRUFBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELHNCQUFzQixJQUFnQjtJQUNsQyxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELHVCQUF1QixV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QUksQ0FBRSx5Q0FBeUMsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcscUJBQXFCLEdBQUcsT0FBTyxDQUFDLENBQUM7QUFDcEgsQ0FBQyIsImZpbGUiOiJtb2RlbHMvYnJvd3Nlci1zZXJ2aWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYlNvY2tldCBmcm9tICd3cyc7XHJcbmltcG9ydCB7IGxvZyB9IGZyb20gJy4uL2xvZ2dlcic7XHJcbmltcG9ydCB7IFNlbnNvckF0dHJpYnV0ZXMgfSBmcm9tICcuL3NlbnNvci1hdHRyaWJ1dGVzJztcclxuaW1wb3J0IHsgU2Vuc29yRGF0YSB9IGZyb20gJy4vc2Vuc29yLWRhdGEnO1xyXG5pbXBvcnQgeyBTZW5zb3JTdGF0ZSB9IGZyb20gJy4vc2Vuc29yLXN0YXRlJztcclxuaW1wb3J0IHsgU2V0dGluZywgU2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzJztcclxuaW1wb3J0IHsgVVNCQ29udHJvbGxlciB9IGZyb20gJy4vdXNiLWNvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJbmJvdW5kbWVzc2FnZSB7XHJcbiAgICBkZXNjcjogJ2dldFNlbnNvcnMnfCdnZXRTZXR0aW5ncyd8ICd1cGRhdGVTZXR0aW5ncycgfCdzdGFydE1vbml0b3InIHwgJ3N0b3BNb25pdG9yJztcclxuICAgIGRhdGE6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBPdXRib3VuZE1lc3NhZ2Uge1xyXG4gICAgZGVzY3I6ICdzZW5zb3JzJ3wnc2V0dGluZ3MnfCAnbG9nJztcclxuICAgIGRhdGE6IGFueTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VJbmJvdW5kTWVzc2FnZSh3czogV2ViU29ja2V0LCBkYXRhOiBCdWZmZXIpOiB2b2lkICB7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gPEluYm91bmRtZXNzYWdlPiA8YW55PiBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSk7XHJcblxyXG4gICAgc3dpdGNoIChtZXNzYWdlLmRlc2NyKSB7XHJcbiAgICAgICAgY2FzZSAnZ2V0U2Vuc29ycyc6XHJcbiAgICAgICAgICAgIGdldFNlbnNvcnMod3MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdnZXRTZXR0aW5ncyc6XHJcbiAgICAgICAgICAgIGdldFNldHRpbmdzKHdzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3RhcnRNb25pdG9yJzpcclxuICAgICAgICAgICAgbWVzc2FnZS5kYXRhID0gPFNlbnNvckRlc2NyaXB0aW9uW10+IDxhbnk+IG1lc3NhZ2UuZGF0YTtcclxuICAgICAgICAgICAgc3RhcnRNb25pdG9yKHdzLCBtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzdG9wTW9uaXRvcic6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IDxTZW5zb3JEZXNjcmlwdGlvbltdPiA8YW55PiBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgICAgIHN0b3BNb25pdG9yKHdzLCBtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNvckRlc2NyaXB0aW9uIHtcclxuICAgIFNOOiBzdHJpbmc7XHJcbiAgICBwb3J0OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTZW5zb3JTYW1wbGUge1xyXG4gICAgdmFsdWU6IG51bWJlcjtcclxuICAgIGRhdGU6IG51bWJlcjtcclxufVxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNvckxvZyB7XHJcbiAgICBkZXNjcjogU2Vuc29yRGVzY3JpcHRpb247XHJcbiAgICBzYW1wbGVzOiBTZW5zb3JTYW1wbGVbXTtcclxufVxyXG5cclxuLy8gZXhwb3J0IGludGVyZmFjZSBTZXR0aW5nIHtcclxuLy8gICAgIG5hbWU6IHN0cmluZztcclxuLy8gICAgIHZhbHVlOiBzdHJpbmc7XHJcbi8vIH1cclxuXHJcbmZ1bmN0aW9uIGRlc2NyaXB0aW9uKGF0dHI6IFNlbnNvckF0dHJpYnV0ZXMsIGRhdGE6IFNlbnNvckRhdGEpOiBTZW5zb3JEZXNjcmlwdGlvbiB7XHJcbiAgICByZXR1cm4ge1NOOiBhdHRyLlNOLCBwb3J0OiBkYXRhLmdldFBvcnQoKX07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbnNvclNhbXBsZShkYXRhOiBTZW5zb3JEYXRhKTogU2Vuc29yU2FtcGxlIHtcclxuICAgIHJldHVybiB7dmFsdWU6IGRhdGEuZ2V0VmFsdWUoKSwgZGF0ZTogZGF0YS50aW1lc3RhbXAoKX07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFkZFNlbnNvckxvZ3Moc2Vuc29yTG9nczogU2Vuc29yTG9nW10sIHN0YXRlOiBTZW5zb3JTdGF0ZSk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IGF0dHI6IFNlbnNvckF0dHJpYnV0ZXMgPSBzdGF0ZS5nZXRBdHRyKCk7IC8vIENvbW1vbiBhdHRyaWJ1dGVzIGZvciBhbGwgc2Vuc29ycyBjb25uZWN0ZWRcclxuICAgIGNvbnN0IHNlbnNvckRhdGE6IFNlbnNvckRhdGFbXSA9IHN0YXRlLmdldFNlbnNvckRhdGEoKTsgLy8gb25lIHNlbnNvckRhdGEgZm9yIGVhY2ggc2Vuc29yXHJcblxyXG4gICAgZm9yIChjb25zdCBzZW5zb3Igb2Ygc2Vuc29yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZXM6IFNlbnNvclNhbXBsZVtdID0gW107XHJcbiAgICAgICAgc2FtcGxlcy5wdXNoKHNlbnNvclNhbXBsZShzZW5zb3IpKTtcclxuICAgICAgICBzZW5zb3JMb2dzLnB1c2goeyBkZXNjcjogZGVzY3JpcHRpb24oYXR0ciwgc2Vuc29yKSwgc2FtcGxlc30pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTZW5zb3JzKHdzOiBXZWJTb2NrZXQpIHtcclxuICAgIGNvbnN0IGxvZ2dlcnMgPSBVU0JDb250cm9sbGVyLmdldExvZ2dlcnMoKTtcclxuICAgIGNvbnN0IGRlc2NyID0gJ3NlbnNvcnMnO1xyXG4gICAgY29uc3QgZGF0YTogU2Vuc29yTG9nW10gPSBbXTtcclxuICAgIGZvciAoY29uc3QgbG9nZ2VyIG9mIGxvZ2dlcnMpIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IGxvZ2dlci5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIEFkZFNlbnNvckxvZ3MoZGF0YSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHtkZXNjciwgZGF0YX0pO1xyXG4gICAgd3Muc2VuZChtZXNzYWdlKTtcclxuICAgIGxvZy5pbmZvKCdicm93c2VyLXNlcnZpY2VzLmdldFNlbnNvcnMsIHNlbnQ6ICcgKyBtZXNzYWdlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmdzKHdzOiBXZWJTb2NrZXQpIHtcclxuICAgIGNvbnN0IGRhdGE6IFNldHRpbmdbXSA9IFNldHRpbmdzLmFsbCgpO1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHtkZXNjcjonc2V0dGluZ3MnLCBkYXRhfSk7XHJcbiAgICB3cy5zZW5kKG1lc3NhZ2UpO1xyXG4gICAgbG9nLmluZm8oJ2Jyb3dzZXItc2VydmljZS5nZXRTZXR0aW5nczogJyArIG1lc3NhZ2UpO1xyXG59XHJcbmNvbnN0IE1vbml0b3JpbmdDbGllbnRzID0gbmV3IFNldCgpO1xyXG5sZXQgbG9nVGltZXI6IE5vZGVKUy5UaW1lcjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdGFydE1vbml0b3Iod3M6IFdlYlNvY2tldCwgZGVzY3I6IFNlbnNvckRlc2NyaXB0aW9uW10pIHtcclxuICAgIGxvZy5pbmZvKCdicm93c2VyLXNlcnZpY2Uuc3RhcnRNb25pdG9yOiBoYXMgbm90IGltcGxlbWVudGVkIGZpbHRlciBvbiBEZXNjciB5ZXQ6ICcgKyBKU09OLnN0cmluZ2lmeShkZXNjcikpO1xyXG4gICAgaWYgKCFNb25pdG9yaW5nQ2xpZW50cy5oYXMod3MpKSB7XHJcbiAgICAgICAgTW9uaXRvcmluZ0NsaWVudHMuYWRkKHdzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoTW9uaXRvcmluZ0NsaWVudHMuc2l6ZSA9PT0gMSkge1xyXG4gICAgICAgIGxvZ1RpbWVyID0gc2V0SW50ZXJ2YWwobG9nU2Vuc29yRGF0YSwgVVNCQ29udHJvbGxlci5nZXRQb2xsaW5nSW50ZXJ2YWwoKSk7XHJcbiAgICB9XHJcbiAgICBsb2cuaW5mbyAoJ0Jyb3dzZXItc2VydmljZS5zdGFydE1vbml0b3I6ICcgKyBNb25pdG9yaW5nQ2xpZW50cy5zaXplICsgJyBjbGllbnRzJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdG9wTW9uaXRvcih3czogV2ViU29ja2V0LCBkZXNjcjogU2Vuc29yRGVzY3JpcHRpb25bXSkge1xyXG4gICAgbG9nLmluZm8oJ2Jyb3dzZXItc2VydmljZS5zdG9wTW9uaXRvcjogaGFzIG5vdCBpbXBsZW1lbnRlZCBmaWx0ZXIgb24gRGVzY3IgeWV0OiAnICsgSlNPTi5zdHJpbmdpZnkoZGVzY3IpKTtcclxuXHJcbiAgICBpZiAoTW9uaXRvcmluZ0NsaWVudHMuaGFzKHdzKSkge1xyXG4gICAgICAgIE1vbml0b3JpbmdDbGllbnRzLmRlbGV0ZSh3cyk7XHJcbiAgICB9XHJcbiAgICBpZiAoTW9uaXRvcmluZ0NsaWVudHMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChsb2dUaW1lcik7XHJcbiAgICB9XHJcbiAgICBsb2cuaW5mbyAoJ0Jyb3dzZXItc2VydmljZS5zdG9wTW9uaXRvcjogJyArIE1vbml0b3JpbmdDbGllbnRzLnNpemUgKyAnIGNsaWVudHMnKTtcclxufVxyXG5mdW5jdGlvbiBsb2dTZW5zb3JEYXRhKCkge1xyXG4gICAgY29uc3QgbG9nZ2VycyA9IFVTQkNvbnRyb2xsZXIuZ2V0TG9nZ2VycygpO1xyXG4gICAgY29uc3QgZGVzY3IgPSAnbG9nJztcclxuICAgIGNvbnN0IGRhdGE6IFNlbnNvckxvZ1tdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGxvZ2dlciBvZiBsb2dnZXJzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBsb2dnZXIuZ2V0U3RhdGUoKTtcclxuICAgICAgICBBZGRTZW5zb3JMb2dzKGRhdGEsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh7ZGVzY3IsIGRhdGF9KTtcclxuXHJcbiAgICBNb25pdG9yaW5nQ2xpZW50cy5mb3JFYWNoKCh3czogV2ViU29ja2V0KSA9PiB7XHJcbiAgICAgICAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLk9QRU4pIHtcclxuICAgICAgICAgICAgd3Muc2VuZChtZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh3cy5yZWFkeVN0YXRlID09PSB3cy5DTE9TRUQgfHwgd3MucmVhZHlTdGF0ZSA9PT0gd3MuQ0xPU0lORyApIHtcclxuICAgICAgICAgICAgTW9uaXRvcmluZ0NsaWVudHMuZGVsZXRlKHdzKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGxvZy5pbmZvICgnQnJvd3Nlci1zZXJ2aWNlLmxvZ1NlbnNvckRhdGE6IHNlbnQgdG8gJyArIE1vbml0b3JpbmdDbGllbnRzLnNpemUgKyAnIGNsaWVudHMsIG1lc3NhZ2U6ICcgKyBtZXNzYWdlKTtcclxufVxyXG5cclxuXHJcbiJdfQ==
