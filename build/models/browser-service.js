"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var config_1 = require("../config");
var usb_controller_1 = require("./usb-controller");
function parseInboundMessage(ws, data) {
    var message = JSON.parse(data.toString());
    switch (message.descr) {
        case 'getSensors':
            getSensors(ws);
            break;
        case 'getSettings':
            getSettings(ws);
            break;
        case 'startMonitor':
            message.data = message.data;
            startMonitor(ws, message.data);
            break;
        case 'stopMonitor':
            message.data = message.data;
            startMonitor(ws, message.data);
            break;
    }
}
exports.parseInboundMessage = parseInboundMessage;
function description(attr, sensorData) {
    return { SN: attr.SN, port: sensorData.getPort() };
}
function sensorSample(data) {
    return { value: data.getValue(), date: data.timestamp() };
}
function sensorLog(state) {
    var attr = state.getAttr();
    var sensorData = state.getSensorData();
    var samples = [];
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var data = sensorData_1[_i];
        samples.push(sensorSample(data));
    }
    return { descr: description(attr, sensorData[0]), samples: samples };
}
function getSensors(ws) {
    var loggers = usb_controller_1.USBController.getLoggers();
    var sensorLogs = [];
    for (var _i = 0, loggers_1 = loggers; _i < loggers_1.length; _i++) {
        var logger = loggers_1[_i];
        var state = logger.getState();
        sensorLogs.push(sensorLog(state));
    }
    var message = { descr: 'sensors', data: sensorLogs };
    ws.send(JSON.stringify(message));
}
exports.getSensors = getSensors;
function getSettings(ws) {
    var message = { descr: 'settings', data: [{ setting: 'hostname', value: config_1.HOSTNAME }] };
    ws.send(JSON.stringify(message));
}
exports.getSettings = getSettings;
var MonitoringClients = new Set();
var logTimer;
function startMonitor(ws, descr) {
    logger_1.log.info('browser-service. startMonitor: has not implemented filter on Descr yet: ' + descr);
    if (!MonitoringClients.has(ws)) {
        MonitoringClients.add(ws);
    }
    if (MonitoringClients.size === 1) {
        logTimer = setInterval(logSensorData, usb_controller_1.USBController.getPollingInterval());
    }
}
exports.startMonitor = startMonitor;
function stopMonitor(ws, descr) {
    logger_1.log.info('browser-service. stopMonitor: has not implemented filter on Descr yet: ' + descr);
    if (MonitoringClients.has(ws)) {
        MonitoringClients.delete(ws);
    }
    if (MonitoringClients.size === 0) {
        clearTimeout(logTimer);
    }
}
exports.stopMonitor = stopMonitor;
function logSensorData() {
    var loggers = usb_controller_1.USBController.getLoggers();
    var sensorLogs = [];
    for (var _i = 0, loggers_2 = loggers; _i < loggers_2.length; _i++) {
        var logger = loggers_2[_i];
        var state = logger.getState();
        sensorLogs.push(sensorLog(state));
    }
    var message = { descr: 'log', data: sensorLogs };
    MonitoringClients.forEach(function (ws) {
        if (ws.readyState === ws.OPEN) {
            ws.send(JSON.stringify(message));
        }
        if (ws.readyState === ws.CLOSED || ws.readyState === ws.CLOSING) {
            MonitoringClients.delete(ws);
        }
    });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
