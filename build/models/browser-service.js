"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("../logger");
var config_1 = require("../config");
var usb_controller_1 = require("./usb-controller");
function parseInboundMessage(ws, data) {
    var message = JSON.parse(data.toString());
    switch (message.descr) {
        case 'getSensors':
            getSensors(ws);
            break;
        case 'getSettings':
            getSettings(ws);
            break;
        case 'startMonitor':
            message.data = message.data;
            startMonitor(ws, message.data);
            break;
        case 'stopMonitor':
            message.data = message.data;
            stopMonitor(ws, message.data);
            break;
    }
}
exports.parseInboundMessage = parseInboundMessage;
function description(attr, data) {
    return { SN: attr.SN, port: data.getPort() };
}
function sensorSample(data) {
    return { value: data.getValue(), date: data.timestamp() };
}
function AddSensorLogs(sensorLogs, state) {
    var attr = state.getAttr();
    var sensorData = state.getSensorData();
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var sensor = sensorData_1[_i];
        var samples = [];
        samples.push(sensorSample(sensor));
        sensorLogs.push({ descr: description(attr, sensor), samples: samples });
    }
}
function getSensors(ws) {
    var loggers = usb_controller_1.USBController.getLoggers();
    var descr = 'sensors';
    var data = [];
    for (var _i = 0, loggers_1 = loggers; _i < loggers_1.length; _i++) {
        var logger = loggers_1[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ descr: descr, data: data });
    ws.send(message);
    logger_1.log.info('browser-services.getSensors, sent: ' + message);
}
exports.getSensors = getSensors;
function getSettings(ws) {
    var message = JSON.stringify({ descr: 'settings', data: [{ name: 'hostname', value: config_1.HOSTNAME }] });
    ws.send(message);
    logger_1.log.info('browser-service.getSettings: has not implemented all settings yet: ' + message);
}
exports.getSettings = getSettings;
var MonitoringClients = new Set();
var logTimer;
function startMonitor(ws, descr) {
    logger_1.log.info('browser-service.startMonitor: has not implemented filter on Descr yet: ' + JSON.stringify(descr));
    if (!MonitoringClients.has(ws)) {
        MonitoringClients.add(ws);
    }
    if (MonitoringClients.size === 1) {
        logTimer = setInterval(logSensorData, usb_controller_1.USBController.getPollingInterval());
    }
    logger_1.log.info('Browser-service.startMonitor: ' + MonitoringClients.size + ' clients');
}
exports.startMonitor = startMonitor;
function stopMonitor(ws, descr) {
    logger_1.log.info('browser-service.stopMonitor: has not implemented filter on Descr yet: ' + JSON.stringify(descr));
    if (MonitoringClients.has(ws)) {
        MonitoringClients.delete(ws);
    }
    if (MonitoringClients.size === 0) {
        clearTimeout(logTimer);
    }
    logger_1.log.info('Browser-service.stopMonitor: ' + MonitoringClients.size + ' clients');
}
exports.stopMonitor = stopMonitor;
function logSensorData() {
    var loggers = usb_controller_1.USBController.getLoggers();
    var descr = 'log';
    var data = [];
    for (var _i = 0, loggers_2 = loggers; _i < loggers_2.length; _i++) {
        var logger = loggers_2[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ descr: descr, data: data });
    MonitoringClients.forEach(function (ws) {
        if (ws.readyState === ws.OPEN) {
            ws.send(message);
        }
        if (ws.readyState === ws.CLOSED || ws.readyState === ws.CLOSING) {
            MonitoringClients.delete(ws);
        }
    });
    logger_1.log.info('Browser-service.logSensorData: sent to ' + MonitoringClients.size + ' clients, message: ' + message);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
