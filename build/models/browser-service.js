"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var WebSocket = __importStar(require("ws"));
var logger_1 = require("../logger");
var settings_1 = require("./settings");
var usb_controller_1 = require("./usb-controller");
var wss;
function broadcast(ws, message, includeSelf) {
    logger_1.log.debug('browser-Service.broadcast: sending message=' + JSON.stringify(message));
    wss.clients.forEach(function each(client) {
        if ((client !== ws || includeSelf) && client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify(message));
            logger_1.log.debug('browser-Service.broadcast: message sent');
        }
    });
}
function initOutboundMessageService(server) {
    wss = server;
}
exports.initOutboundMessageService = initOutboundMessageService;
function parseInboundMessage(ws, data) {
    var message = JSON.parse(data.toString());
    logger_1.log.debug('browser-service.parseInboundMessage: received message=' + message);
    switch (message.command) {
        case 'getSensors':
            getSensors(ws);
            break;
        case 'getSettings':
            getSettings(ws);
            break;
        case 'startMonitor':
            message.data = message.data;
            startMonitor(ws, message.data);
            break;
        case 'stopMonitor':
            message.data = message.data;
            stopMonitor(ws, message.data);
            break;
        case 'saveSetting':
            message.data = message.data;
            saveSetting(ws, message.data);
            break;
    }
}
exports.parseInboundMessage = parseInboundMessage;
function description(attr, data) {
    return { SN: attr.SN, port: data.getPort() };
}
function sensorSample(data) {
    return { value: data.getValue(), date: data.timestamp() };
}
function AddSensorLogs(sensorLogs, state) {
    var attr = state.getAttr();
    var sensorData = state.getSensorData();
    for (var _i = 0, sensorData_1 = sensorData; _i < sensorData_1.length; _i++) {
        var sensor = sensorData_1[_i];
        var samples = [];
        samples.push(sensorSample(sensor));
        sensorLogs.push({ desc: description(attr, sensor), samples: samples });
    }
}
function getSensors(ws) {
    var loggers = usb_controller_1.USBController.getLoggers();
    var command = 'sensors';
    var data = [];
    for (var _i = 0, loggers_1 = loggers; _i < loggers_1.length; _i++) {
        var logger = loggers_1[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ command: command, data: data });
    ws.send(message);
    logger_1.log.info('browser-services.getSensors, sent: ' + message);
}
exports.getSensors = getSensors;
function getSettings(ws) {
    var data = settings_1.Settings.all();
    var message = JSON.stringify({ command: 'settings', data: data });
    ws.send(message);
    logger_1.log.info('browser-service.getSettings: ' + message);
}
exports.getSettings = getSettings;
function saveSetting(ws, setting) {
    logger_1.log.debug('browser-service.saveSetting: ' + JSON.stringify(setting));
    if (setting.name && setting.value) {
        settings_1.Settings.update(setting.name, setting.value, function (updated) {
            if (updated) {
                var command = 'settings';
                var data = [];
                data.push(setting);
                var message = { command: command, data: data };
                broadcast(ws, message, true);
            }
        });
    }
}
exports.saveSetting = saveSetting;
var MonitoringClients = new Set();
var logTimer;
function startMonitor(ws, desc) {
    logger_1.log.info('browser-service.startMonitor: has not implemented filter on Desc yet: ' + JSON.stringify(desc));
    if (!MonitoringClients.has(ws)) {
        MonitoringClients.add(ws);
    }
    if (MonitoringClients.size === 1) {
        logTimer = setInterval(logSensorData, usb_controller_1.USBController.getPollingInterval());
    }
    logger_1.log.info('Browser-service.startMonitor: ' + MonitoringClients.size + ' clients');
}
exports.startMonitor = startMonitor;
function stopMonitor(ws, desc) {
    logger_1.log.info('browser-service.stopMonitor: has not implemented filter on Descr yet: ' + JSON.stringify(desc));
    if (MonitoringClients.has(ws)) {
        MonitoringClients.delete(ws);
    }
    if (MonitoringClients.size === 0) {
        clearTimeout(logTimer);
    }
    logger_1.log.info('Browser-service.stopMonitor: ' + MonitoringClients.size + ' clients');
}
exports.stopMonitor = stopMonitor;
function logSensorData() {
    var loggers = usb_controller_1.USBController.getLoggers();
    var command = 'log';
    var data = [];
    for (var _i = 0, loggers_2 = loggers; _i < loggers_2.length; _i++) {
        var logger = loggers_2[_i];
        var state = logger.getState();
        AddSensorLogs(data, state);
    }
    var message = JSON.stringify({ command: command, data: data });
    MonitoringClients.forEach(function (ws) {
        if (ws.readyState === ws.OPEN) {
            ws.send(message);
        }
        if (ws.readyState === ws.CLOSED || ws.readyState === ws.CLOSING) {
            MonitoringClients.delete(ws);
        }
    });
    logger_1.log.info('Browser-service.logSensorData: sent to ' + MonitoringClients.size + ' clients, message: ' + message);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbHMvYnJvd3Nlci1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDRDQUFnQztBQUNoQyxvQ0FBZ0M7QUFJaEMsdUNBQStDO0FBQy9DLG1EQUFpRDtBQVdqRCxJQUFJLEdBQXFCLENBQUM7QUFFMUIsbUJBQW1CLEVBQWEsRUFBRSxPQUF3QixFQUFFLFdBQW9CO0lBQzVFLFlBQUcsQ0FBQyxLQUFLLENBQUMsNkNBQTZDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ25GLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsTUFBTTtRQUNwQyxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7WUFDMUUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDckMsWUFBRyxDQUFDLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFVCxDQUFDO0FBQ0Qsb0NBQTJDLE1BQXdCO0lBQy9ELEdBQUcsR0FBQyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRkQsZ0VBRUM7QUFDRCw2QkFBb0MsRUFBYSxFQUFFLElBQVk7SUFDM0QsSUFBTSxPQUFPLEdBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDN0QsWUFBRyxDQUFDLEtBQUssQ0FBQyx3REFBd0QsR0FBRyxPQUFPLENBQUMsQ0FBQztJQUM5RSxRQUFRLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDckIsS0FBSyxZQUFZO1lBQ2IsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2YsTUFBTTtRQUNWLEtBQUssYUFBYTtZQUNkLFdBQVcsQ0FBQyxF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RCxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsVUFBQyxFQUFhO1FBQ3BDLElBQUksRUFBRSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFO1lBQzNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDcEI7UUFFRCxJQUFJLEVBQUUsQ0FBQyxVQUFVLEtBQUssRUFBRSxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsVUFBVSxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUc7WUFDOUQsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDSCxZQUFHLENBQUMsSUFBSSxDQUFFLHlDQUF5QyxHQUFHLGlCQUFpQixDQUFDLElBQUksR0FBRyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUNwSCxDQUFDIiwiZmlsZSI6Im1vZGVscy9icm93c2VyLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBXZWJTb2NrZXQgZnJvbSAnd3MnO1xyXG5pbXBvcnQgeyBsb2cgfSBmcm9tICcuLi9sb2dnZXInO1xyXG5pbXBvcnQgeyBTZW5zb3JBdHRyaWJ1dGVzIH0gZnJvbSAnLi9zZW5zb3ItYXR0cmlidXRlcyc7XHJcbmltcG9ydCB7IFNlbnNvckRhdGEgfSBmcm9tICcuL3NlbnNvci1kYXRhJztcclxuaW1wb3J0IHsgU2Vuc29yU3RhdGUgfSBmcm9tICcuL3NlbnNvci1zdGF0ZSc7XHJcbmltcG9ydCB7IFNldHRpbmcsIFNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbmltcG9ydCB7IFVTQkNvbnRyb2xsZXIgfSBmcm9tICcuL3VzYi1jb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5ib3VuZE1lc3NhZ2Uge1xyXG4gICAgY29tbWFuZDogJ2dldFNlbnNvcnMnfCdnZXRTZXR0aW5ncyd8ICdzdGFydE1vbml0b3InIHwgJ3N0b3BNb25pdG9yJyB8ICdzYXZlU2V0dGluZyc7XHJcbiAgICBkYXRhOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgT3V0Ym91bmRNZXNzYWdlIHtcclxuICAgIGNvbW1hbmQ6ICdzZW5zb3JzJyB8ICdzZXR0aW5ncyd8ICdzZXR0aW5nJyB8ICAnbG9nJztcclxuICAgIGRhdGE6IGFueTtcclxufVxyXG5sZXQgd3NzOiBXZWJTb2NrZXQuU2VydmVyO1xyXG5cclxuZnVuY3Rpb24gYnJvYWRjYXN0KHdzOiBXZWJTb2NrZXQsIG1lc3NhZ2U6IE91dGJvdW5kTWVzc2FnZSwgaW5jbHVkZVNlbGY6IGJvb2xlYW4gKSB7XHJcbiAgICBsb2cuZGVidWcoJ2Jyb3dzZXItU2VydmljZS5icm9hZGNhc3Q6IHNlbmRpbmcgbWVzc2FnZT0nICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xyXG4gICAgd3NzLmNsaWVudHMuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGNsaWVudCkge1xyXG4gICAgICAgIGlmICgoY2xpZW50ICE9PSB3cyB8fCBpbmNsdWRlU2VsZikgJiYgY2xpZW50LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOKSB7XHJcbiAgICAgICAgICBjbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XHJcbiAgICAgICAgICBsb2cuZGVidWcoJ2Jyb3dzZXItU2VydmljZS5icm9hZGNhc3Q6IG1lc3NhZ2Ugc2VudCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0T3V0Ym91bmRNZXNzYWdlU2VydmljZShzZXJ2ZXI6IFdlYlNvY2tldC5TZXJ2ZXIpIHtcclxuICAgIHdzcz1zZXJ2ZXI7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSW5ib3VuZE1lc3NhZ2Uod3M6IFdlYlNvY2tldCwgZGF0YTogQnVmZmVyKTogdm9pZCAge1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IDxJbmJvdW5kTWVzc2FnZT4gSlNPTi5wYXJzZShkYXRhLnRvU3RyaW5nKCkpO1xyXG4gICAgbG9nLmRlYnVnKCdicm93c2VyLXNlcnZpY2UucGFyc2VJbmJvdW5kTWVzc2FnZTogcmVjZWl2ZWQgbWVzc2FnZT0nICsgbWVzc2FnZSk7XHJcbiAgICBzd2l0Y2ggKG1lc3NhZ2UuY29tbWFuZCkge1xyXG4gICAgICAgIGNhc2UgJ2dldFNlbnNvcnMnOlxyXG4gICAgICAgICAgICBnZXRTZW5zb3JzKHdzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnZ2V0U2V0dGluZ3MnOlxyXG4gICAgICAgICAgICBnZXRTZXR0aW5ncyh3cyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3N0YXJ0TW9uaXRvcic6XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuZGF0YSA9IDxTZW5zb3JEZXNjcmlwdGlvbltdPiA8YW55PiBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgICAgIHN0YXJ0TW9uaXRvcih3cywgbWVzc2FnZS5kYXRhKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3RvcE1vbml0b3InOlxyXG4gICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSA8U2Vuc29yRGVzY3JpcHRpb25bXT4gPGFueT4gbWVzc2FnZS5kYXRhO1xyXG4gICAgICAgICAgICBzdG9wTW9uaXRvcih3cywgbWVzc2FnZS5kYXRhKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc2F2ZVNldHRpbmcnOlxyXG4gICAgICAgICAgICBtZXNzYWdlLmRhdGEgPSA8U2V0dGluZz4gPGFueT4gbWVzc2FnZS5kYXRhO1xyXG4gICAgICAgICAgICBzYXZlU2V0dGluZyh3cywgbWVzc2FnZS5kYXRhKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTZW5zb3JEZXNjcmlwdGlvbiB7XHJcbiAgICBTTjogc3RyaW5nO1xyXG4gICAgcG9ydDogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBpbnRlcmZhY2UgU2Vuc29yU2FtcGxlIHtcclxuICAgIHZhbHVlOiBudW1iZXI7XHJcbiAgICBkYXRlOiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGludGVyZmFjZSBTZW5zb3JMb2cge1xyXG4gICAgZGVzYzogU2Vuc29yRGVzY3JpcHRpb247XHJcbiAgICBzYW1wbGVzOiBTZW5zb3JTYW1wbGVbXTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGRlc2NyaXB0aW9uKGF0dHI6IFNlbnNvckF0dHJpYnV0ZXMsIGRhdGE6IFNlbnNvckRhdGEpOiBTZW5zb3JEZXNjcmlwdGlvbiB7XHJcbiAgICByZXR1cm4ge1NOOiBhdHRyLlNOLCBwb3J0OiBkYXRhLmdldFBvcnQoKX07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbnNvclNhbXBsZShkYXRhOiBTZW5zb3JEYXRhKTogU2Vuc29yU2FtcGxlIHtcclxuICAgIHJldHVybiB7dmFsdWU6IGRhdGEuZ2V0VmFsdWUoKSwgZGF0ZTogZGF0YS50aW1lc3RhbXAoKX07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIEFkZFNlbnNvckxvZ3Moc2Vuc29yTG9nczogU2Vuc29yTG9nW10sIHN0YXRlOiBTZW5zb3JTdGF0ZSk6IHZvaWQge1xyXG5cclxuICAgIGNvbnN0IGF0dHI6IFNlbnNvckF0dHJpYnV0ZXMgPSBzdGF0ZS5nZXRBdHRyKCk7IC8vIENvbW1vbiBhdHRyaWJ1dGVzIGZvciBhbGwgc2Vuc29ycyBjb25uZWN0ZWRcclxuICAgIGNvbnN0IHNlbnNvckRhdGE6IFNlbnNvckRhdGFbXSA9IHN0YXRlLmdldFNlbnNvckRhdGEoKTsgLy8gb25lIHNlbnNvckRhdGEgZm9yIGVhY2ggc2Vuc29yXHJcblxyXG4gICAgZm9yIChjb25zdCBzZW5zb3Igb2Ygc2Vuc29yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZXM6IFNlbnNvclNhbXBsZVtdID0gW107XHJcbiAgICAgICAgc2FtcGxlcy5wdXNoKHNlbnNvclNhbXBsZShzZW5zb3IpKTtcclxuICAgICAgICBzZW5zb3JMb2dzLnB1c2goeyBkZXNjOiBkZXNjcmlwdGlvbihhdHRyLCBzZW5zb3IpLCBzYW1wbGVzfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbnNvcnMod3M6IFdlYlNvY2tldCkge1xyXG4gICAgY29uc3QgbG9nZ2VycyA9IFVTQkNvbnRyb2xsZXIuZ2V0TG9nZ2VycygpO1xyXG4gICAgY29uc3QgY29tbWFuZCA9ICdzZW5zb3JzJztcclxuICAgIGNvbnN0IGRhdGE6IFNlbnNvckxvZ1tdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGxvZ2dlciBvZiBsb2dnZXJzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBsb2dnZXIuZ2V0U3RhdGUoKTtcclxuICAgICAgICBBZGRTZW5zb3JMb2dzKGRhdGEsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh7Y29tbWFuZCwgZGF0YX0pO1xyXG4gICAgd3Muc2VuZChtZXNzYWdlKTtcclxuICAgIGxvZy5pbmZvKCdicm93c2VyLXNlcnZpY2VzLmdldFNlbnNvcnMsIHNlbnQ6ICcgKyBtZXNzYWdlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmdzKHdzOiBXZWJTb2NrZXQpIHtcclxuICAgIGNvbnN0IGRhdGE6IFNldHRpbmdbXSA9IFNldHRpbmdzLmFsbCgpO1xyXG4gICAgY29uc3QgbWVzc2FnZSA9IEpTT04uc3RyaW5naWZ5KHtjb21tYW5kOidzZXR0aW5ncycsIGRhdGF9KTtcclxuICAgIHdzLnNlbmQobWVzc2FnZSk7XHJcbiAgICBsb2cuaW5mbygnYnJvd3Nlci1zZXJ2aWNlLmdldFNldHRpbmdzOiAnICsgbWVzc2FnZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlU2V0dGluZyh3czogV2ViU29ja2V0LCBzZXR0aW5nOiBTZXR0aW5nKSB7XHJcbiAgICBsb2cuZGVidWcoJ2Jyb3dzZXItc2VydmljZS5zYXZlU2V0dGluZzogJyArIEpTT04uc3RyaW5naWZ5KHNldHRpbmcpKTtcclxuICAgIGlmIChzZXR0aW5nLm5hbWUgJiYgc2V0dGluZy52YWx1ZSkge1xyXG4gICAgICAgIFNldHRpbmdzLnVwZGF0ZShzZXR0aW5nLm5hbWUsIHNldHRpbmcudmFsdWUsICh1cGRhdGVkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh1cGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb21tYW5kID0gJ3NldHRpbmdzJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgIGRhdGEucHVzaChzZXR0aW5nKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2U6IE91dGJvdW5kTWVzc2FnZSA9IHtjb21tYW5kLCBkYXRhfTtcclxuICAgICAgICAgICAgICAgIGJyb2FkY2FzdCh3cywgbWVzc2FnZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuY29uc3QgTW9uaXRvcmluZ0NsaWVudHMgPSBuZXcgU2V0KCk7XHJcbmxldCBsb2dUaW1lcjogTm9kZUpTLlRpbWVyO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0TW9uaXRvcih3czogV2ViU29ja2V0LCBkZXNjOiBTZW5zb3JEZXNjcmlwdGlvbltdKSB7XHJcbiAgICBsb2cuaW5mbygnYnJvd3Nlci1zZXJ2aWNlLnN0YXJ0TW9uaXRvcjogaGFzIG5vdCBpbXBsZW1lbnRlZCBmaWx0ZXIgb24gRGVzYyB5ZXQ6ICcgKyBKU09OLnN0cmluZ2lmeShkZXNjKSk7XHJcbiAgICBpZiAoIU1vbml0b3JpbmdDbGllbnRzLmhhcyh3cykpIHtcclxuICAgICAgICBNb25pdG9yaW5nQ2xpZW50cy5hZGQod3MpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChNb25pdG9yaW5nQ2xpZW50cy5zaXplID09PSAxKSB7XHJcbiAgICAgICAgbG9nVGltZXIgPSBzZXRJbnRlcnZhbChsb2dTZW5zb3JEYXRhLCBVU0JDb250cm9sbGVyLmdldFBvbGxpbmdJbnRlcnZhbCgpKTtcclxuICAgIH1cclxuICAgIGxvZy5pbmZvICgnQnJvd3Nlci1zZXJ2aWNlLnN0YXJ0TW9uaXRvcjogJyArIE1vbml0b3JpbmdDbGllbnRzLnNpemUgKyAnIGNsaWVudHMnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3BNb25pdG9yKHdzOiBXZWJTb2NrZXQsIGRlc2M6IFNlbnNvckRlc2NyaXB0aW9uW10pIHtcclxuICAgIGxvZy5pbmZvKCdicm93c2VyLXNlcnZpY2Uuc3RvcE1vbml0b3I6IGhhcyBub3QgaW1wbGVtZW50ZWQgZmlsdGVyIG9uIERlc2NyIHlldDogJyArIEpTT04uc3RyaW5naWZ5KGRlc2MpKTtcclxuXHJcbiAgICBpZiAoTW9uaXRvcmluZ0NsaWVudHMuaGFzKHdzKSkge1xyXG4gICAgICAgIE1vbml0b3JpbmdDbGllbnRzLmRlbGV0ZSh3cyk7XHJcbiAgICB9XHJcbiAgICBpZiAoTW9uaXRvcmluZ0NsaWVudHMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dChsb2dUaW1lcik7XHJcbiAgICB9XHJcbiAgICBsb2cuaW5mbyAoJ0Jyb3dzZXItc2VydmljZS5zdG9wTW9uaXRvcjogJyArIE1vbml0b3JpbmdDbGllbnRzLnNpemUgKyAnIGNsaWVudHMnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9nU2Vuc29yRGF0YSgpIHtcclxuICAgIGNvbnN0IGxvZ2dlcnMgPSBVU0JDb250cm9sbGVyLmdldExvZ2dlcnMoKTtcclxuICAgIGNvbnN0IGNvbW1hbmQgPSAnbG9nJztcclxuICAgIGNvbnN0IGRhdGE6IFNlbnNvckxvZ1tdID0gW107XHJcbiAgICBmb3IgKGNvbnN0IGxvZ2dlciBvZiBsb2dnZXJzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBsb2dnZXIuZ2V0U3RhdGUoKTtcclxuICAgICAgICBBZGRTZW5zb3JMb2dzKGRhdGEsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnN0cmluZ2lmeSh7Y29tbWFuZCwgZGF0YX0pO1xyXG5cclxuICAgIE1vbml0b3JpbmdDbGllbnRzLmZvckVhY2goKHdzOiBXZWJTb2NrZXQpID0+IHtcclxuICAgICAgICBpZiAod3MucmVhZHlTdGF0ZSA9PT0gd3MuT1BFTikge1xyXG4gICAgICAgICAgICB3cy5zZW5kKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHdzLnJlYWR5U3RhdGUgPT09IHdzLkNMT1NFRCB8fCB3cy5yZWFkeVN0YXRlID09PSB3cy5DTE9TSU5HICkge1xyXG4gICAgICAgICAgICBNb25pdG9yaW5nQ2xpZW50cy5kZWxldGUod3MpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgbG9nLmluZm8gKCdCcm93c2VyLXNlcnZpY2UubG9nU2Vuc29yRGF0YTogc2VudCB0byAnICsgTW9uaXRvcmluZ0NsaWVudHMuc2l6ZSArICcgY2xpZW50cywgbWVzc2FnZTogJyArIG1lc3NhZ2UpO1xyXG59XHJcblxyXG5cclxuIl19
