"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var logger_1 = require("./../logger");
var SensorLogger = (function () {
    function SensorLogger(attr, state) {
        this.timestamp = 0;
        this.logging = false;
        this.MAX_TIME_DIFF = 60000;
        logger_1.log.debug('--- SensorStateLogger:', JSON.stringify(state));
        this.timestamp = Date.now();
        this.logging = false;
        this.attr = attr;
        this.state = state;
        var dataFilter = {
            resolution: this.attr.resolution,
            maxTimeDiff: this.MAX_TIME_DIFF
        };
        this.state.addSensorDataListener(this.onSensorDataReceived.bind(this), dataFilter);
        this.axios = axios_1.default.create({
            baseURL: 'https://test.itemper.io/api/v1/sensors',
            headers: { 'Content-Type': 'application/json' },
        });
    }
    SensorLogger.prototype.getAttr = function () {
        return this.attr;
    };
    SensorLogger.prototype.getState = function () {
        return this.state;
    };
    SensorLogger.prototype.startLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.startLogging');
        this.logging = true;
    };
    SensorLogger.prototype.stopLogging = function () {
        logger_1.log.debug('--- SensorStateLogger.stopLogging');
        this.logging = false;
    };
    SensorLogger.prototype.onSensorDataReceived = function (data) {
        if (this.logging) {
            var descr = { SN: this.attr.SN, port: data.getPort() };
            var samples = [{ date: data.timestamp(), value: data.getValue() }];
            var sensorLog_1 = { descr: descr, samples: samples };
            var diff_1 = data.timestamp() - this.timestamp;
            this.timestamp = data.timestamp();
            var url_1 = '/' + descr.SN + '/' + descr.port;
            logger_1.log.debug('URL: ', url_1);
            this.axios.post(url_1, sensorLog_1)
                .then(function (res) {
                logger_1.log.info('SensorLogger axios.post ' + url_1 + ' ' + res.statusText +
                    ' value: ' + JSON.stringify(sensorLog_1), ' ms: ', diff_1);
            })
                .catch(function (e) {
                logger_1.log.error('catch error', e);
            });
        }
    };
    return SensorLogger;
}());
exports.SensorLogger = SensorLogger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9zZW5zb3ItbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTZDO0FBSzdDLHNDQUFrQztBQUVsQztJQVNJLHNCQUFZLElBQXNCLEVBQUUsS0FBa0I7UUFQOUMsY0FBUyxHQUFXLENBQUMsQ0FBQztRQUd0QixZQUFPLEdBQVksS0FBSyxDQUFDO1FBQ3pCLGtCQUFhLEdBQUcsS0FBTSxDQUFDO1FBSTNCLFlBQUcsQ0FBQyxLQUFLLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLElBQU0sVUFBVSxHQUFHO1lBQ2YsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FBQyxDQUFDO1FBRXJDLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVuRixJQUFJLENBQUMsS0FBSyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7WUFDdEIsT0FBTyxFQUFFLHdDQUF3QztZQUNqRCxPQUFPLEVBQUUsRUFBQyxjQUFjLEVBQUUsa0JBQWtCLEVBQUM7U0FDOUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUVNLDhCQUFPLEdBQWQ7UUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBQ00sK0JBQVEsR0FBZjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFDTSxtQ0FBWSxHQUFuQjtRQUNJLFlBQUcsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRU0sa0NBQVcsR0FBbEI7UUFDSSxZQUFHLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDekIsQ0FBQztJQUVPLDJDQUFvQixHQUE1QixVQUE2QixJQUFnQjtRQUN6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQU0sS0FBSyxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUMsQ0FBQztZQUN4RCxJQUFNLE9BQU8sR0FBRyxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFDLENBQUMsQ0FBQztZQUNuRSxJQUFNLFdBQVMsR0FBRyxFQUFFLEtBQUssT0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUM7WUFDckMsSUFBTSxNQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFbEMsSUFBTSxLQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFFLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDN0MsWUFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBRyxFQUFFLFdBQVMsQ0FBQztpQkFDOUIsSUFBSSxDQUFFLFVBQVMsR0FBRztnQkFDZixZQUFHLENBQUMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLEtBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVU7b0JBQzVELFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFJLENBQUMsQ0FBQztZQUMvRCxDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLFVBQVMsQ0FBQztnQkFDYixZQUFHLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDTCxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQWhFQSxBQWdFQyxJQUFBO0FBaEVZLG9DQUFZIiwiZmlsZSI6InNlcnZpY2VzL3NlbnNvci1sb2dnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MsIHsgQXhpb3NJbnN0YW5jZSB9IGZyb20gJ2F4aW9zJztcclxuaW1wb3J0IHsgU2Vuc29yQXR0cmlidXRlcyB9IGZyb20gJy4uL21vZGVscy9zZW5zb3ItYXR0cmlidXRlcyc7XHJcbmltcG9ydCB7IFNlbnNvckRhdGEgfSBmcm9tICcuLi9tb2RlbHMvc2Vuc29yLWRhdGEnO1xyXG5pbXBvcnQgeyBTZW5zb3JTdGF0ZSB9IGZyb20gJy4uL21vZGVscy9zZW5zb3Itc3RhdGUnO1xyXG5cclxuaW1wb3J0IHsgbG9nIH0gZnJvbSAnLi8uLi9sb2dnZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlbnNvckxvZ2dlciB7XHJcbiAgICBwcml2YXRlIGF0dHI6IFNlbnNvckF0dHJpYnV0ZXM7XHJcbiAgICBwcml2YXRlIHRpbWVzdGFtcDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgc3RhdGU6IFNlbnNvclN0YXRlO1xyXG5cclxuICAgIHByaXZhdGUgbG9nZ2luZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBNQVhfVElNRV9ESUZGID0gNjBfMDAwO1xyXG4gICAgcHJpdmF0ZSBheGlvczogQXhpb3NJbnN0YW5jZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhdHRyOiBTZW5zb3JBdHRyaWJ1dGVzLCBzdGF0ZTogU2Vuc29yU3RhdGUpIHtcclxuICAgICAgICBsb2cuZGVidWcoJy0tLSBTZW5zb3JTdGF0ZUxvZ2dlcjonLCBKU09OLnN0cmluZ2lmeShzdGF0ZSkpO1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLmxvZ2dpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmF0dHIgPSBhdHRyO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YUZpbHRlciA9IHtcclxuICAgICAgICAgICAgcmVzb2x1dGlvbjogdGhpcy5hdHRyLnJlc29sdXRpb24sXHJcbiAgICAgICAgICAgIG1heFRpbWVEaWZmOiB0aGlzLk1BWF9USU1FX0RJRkZ9O1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlLmFkZFNlbnNvckRhdGFMaXN0ZW5lcih0aGlzLm9uU2Vuc29yRGF0YVJlY2VpdmVkLmJpbmQodGhpcyksIGRhdGFGaWx0ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmF4aW9zID0gYXhpb3MuY3JlYXRlKHtcclxuICAgICAgICAgICAgYmFzZVVSTDogJ2h0dHBzOi8vdGVzdC5pdGVtcGVyLmlvL2FwaS92MS9zZW5zb3JzJyxcclxuICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxyXG4gICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEF0dHIoKTogU2Vuc29yQXR0cmlidXRlcyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cjtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRTdGF0ZSgpOiBTZW5zb3JTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhcnRMb2dnaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIFNlbnNvclN0YXRlTG9nZ2VyLnN0YXJ0TG9nZ2luZycpO1xyXG4gICAgICAgIHRoaXMubG9nZ2luZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0b3BMb2dnaW5nKCk6IHZvaWQge1xyXG4gICAgICAgIGxvZy5kZWJ1ZygnLS0tIFNlbnNvclN0YXRlTG9nZ2VyLnN0b3BMb2dnaW5nJyk7XHJcbiAgICAgICAgdGhpcy5sb2dnaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblNlbnNvckRhdGFSZWNlaXZlZChkYXRhOiBTZW5zb3JEYXRhKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9nZ2luZykge1xyXG4gICAgICAgICAgICBjb25zdCBkZXNjciA9IHsgU046IHRoaXMuYXR0ci5TTiwgcG9ydDogZGF0YS5nZXRQb3J0KCl9O1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVzID0gW3tkYXRlOiBkYXRhLnRpbWVzdGFtcCgpLCB2YWx1ZTogZGF0YS5nZXRWYWx1ZSgpfV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbnNvckxvZyA9IHsgZGVzY3IsIHNhbXBsZXMgfTtcclxuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGRhdGEudGltZXN0YW1wKCkgLSB0aGlzLnRpbWVzdGFtcDtcclxuICAgICAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBkYXRhLnRpbWVzdGFtcCgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdXJsID0gJy8nICsgZGVzY3IuU04gKyAnLycrIGRlc2NyLnBvcnQ7XHJcbiAgICAgICAgICAgIGxvZy5kZWJ1ZygnVVJMOiAnLCB1cmwpO1xyXG4gICAgICAgICAgICB0aGlzLmF4aW9zLnBvc3QodXJsLCBzZW5zb3JMb2cpXHJcbiAgICAgICAgICAgIC50aGVuIChmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdTZW5zb3JMb2dnZXIgYXhpb3MucG9zdCAnICsgdXJsICsgJyAnICsgcmVzLnN0YXR1c1RleHQgK1xyXG4gICAgICAgICAgICAgICAgICAgICcgdmFsdWU6ICcgKyBKU09OLnN0cmluZ2lmeShzZW5zb3JMb2cpLCAnIG1zOiAnLCBkaWZmKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGxvZy5lcnJvcignY2F0Y2ggZXJyb3InLCBlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==
